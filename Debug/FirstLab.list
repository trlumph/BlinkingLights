
FirstLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008960  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce8  08008ce8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cf0  08008cf0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000850  20000090  08008d88  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e0  08008d88  000208e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001651f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d9d  00000000  00000000  000365df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003a380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003b510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019521  00000000  00000000  0003c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e27  00000000  00000000  00055a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e8a0  00000000  00000000  0006f838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe0d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000496c  00000000  00000000  000fe128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008ae0 	.word	0x08008ae0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008ae0 	.word	0x08008ae0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08c      	sub	sp, #48	; 0x30
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 031c 	add.w	r3, r7, #28
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
 80004f6:	4b61      	ldr	r3, [pc, #388]	; (800067c <MX_GPIO_Init+0x1a0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a60      	ldr	r2, [pc, #384]	; (800067c <MX_GPIO_Init+0x1a0>)
 80004fc:	f043 0310 	orr.w	r3, r3, #16
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b5e      	ldr	r3, [pc, #376]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0310 	and.w	r3, r3, #16
 800050a:	61bb      	str	r3, [r7, #24]
 800050c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	4b5a      	ldr	r3, [pc, #360]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a59      	ldr	r2, [pc, #356]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000518:	f043 0304 	orr.w	r3, r3, #4
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b57      	ldr	r3, [pc, #348]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	4b53      	ldr	r3, [pc, #332]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a52      	ldr	r2, [pc, #328]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b50      	ldr	r3, [pc, #320]	; (800067c <MX_GPIO_Init+0x1a0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	4b4c      	ldr	r3, [pc, #304]	; (800067c <MX_GPIO_Init+0x1a0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a4b      	ldr	r2, [pc, #300]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b49      	ldr	r3, [pc, #292]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b45      	ldr	r3, [pc, #276]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a44      	ldr	r2, [pc, #272]	; (800067c <MX_GPIO_Init+0x1a0>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b42      	ldr	r3, [pc, #264]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b3e      	ldr	r3, [pc, #248]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a3d      	ldr	r2, [pc, #244]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b3b      	ldr	r3, [pc, #236]	; (800067c <MX_GPIO_Init+0x1a0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2108      	movs	r1, #8
 800059e:	4838      	ldr	r0, [pc, #224]	; (8000680 <MX_GPIO_Init+0x1a4>)
 80005a0:	f001 f8fa 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2101      	movs	r1, #1
 80005a8:	4836      	ldr	r0, [pc, #216]	; (8000684 <MX_GPIO_Init+0x1a8>)
 80005aa:	f001 f8f5 	bl	8001798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005ae:	2200      	movs	r2, #0
 80005b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b4:	4834      	ldr	r0, [pc, #208]	; (8000688 <MX_GPIO_Init+0x1ac>)
 80005b6:	f001 f8ef 	bl	8001798 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005ba:	2304      	movs	r3, #4
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	4619      	mov	r1, r3
 80005cc:	482c      	ldr	r0, [pc, #176]	; (8000680 <MX_GPIO_Init+0x1a4>)
 80005ce:	f000 fe23 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005d2:	2308      	movs	r3, #8
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4825      	ldr	r0, [pc, #148]	; (8000680 <MX_GPIO_Init+0x1a4>)
 80005ea:	f000 fe15 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005ee:	2332      	movs	r3, #50	; 0x32
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	481f      	ldr	r0, [pc, #124]	; (8000680 <MX_GPIO_Init+0x1a4>)
 8000604:	f000 fe08 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000608:	2301      	movs	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4819      	ldr	r0, [pc, #100]	; (8000684 <MX_GPIO_Init+0x1a8>)
 8000620:	f000 fdfa 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000624:	2301      	movs	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000628:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4619      	mov	r1, r3
 8000638:	4814      	ldr	r0, [pc, #80]	; (800068c <MX_GPIO_Init+0x1b0>)
 800063a:	f000 fded 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800063e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000642:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <MX_GPIO_Init+0x1ac>)
 8000658:	f000 fdde 	bl	8001218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800065c:	2320      	movs	r3, #32
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_GPIO_Init+0x1ac>)
 8000670:	f000 fdd2 	bl	8001218 <HAL_GPIO_Init>

}
 8000674:	bf00      	nop
 8000676:	3730      	adds	r7, #48	; 0x30
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40021000 	.word	0x40021000
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40020000 	.word	0x40020000

08000690 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x50>)
 8000696:	4a13      	ldr	r2, [pc, #76]	; (80006e4 <MX_I2C1_Init+0x54>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x50>)
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x58>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_I2C1_Init+0x50>)
 80006ce:	f002 fcd3 	bl	8003078 <HAL_I2C_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f000 fa6c 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	40005400 	.word	0x40005400
 80006e8:	000186a0 	.word	0x000186a0

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 0314 	add.w	r3, r7, #20
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a19      	ldr	r2, [pc, #100]	; (8000770 <HAL_I2C_MspInit+0x84>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d12c      	bne.n	8000768 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800072a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800072e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000730:	2312      	movs	r3, #18
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000734:	2301      	movs	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800073c:	2304      	movs	r3, #4
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_I2C_MspInit+0x8c>)
 8000748:	f000 fd66 	bl	8001218 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	4b08      	ldr	r3, [pc, #32]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	4a07      	ldr	r2, [pc, #28]	; (8000774 <HAL_I2C_MspInit+0x88>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800075a:	6413      	str	r3, [r2, #64]	; 0x40
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MspInit+0x88>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	; 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40020400 	.word	0x40020400

0800077c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_I2S2_Init+0x50>)
 8000782:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_I2S2_Init+0x54>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_I2S2_Init+0x50>)
 8000788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_I2S2_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_I2S2_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_I2S2_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <MX_I2S2_Init+0x50>)
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <MX_I2S2_Init+0x58>)
 80007a4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_I2S2_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_I2S2_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_I2S2_Init+0x50>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <MX_I2S2_Init+0x50>)
 80007ba:	f002 fe29 	bl	8003410 <HAL_I2S_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007c4:	f000 f9f6 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000100 	.word	0x20000100
 80007d0:	40003800 	.word	0x40003800
 80007d4:	00017700 	.word	0x00017700

080007d8 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_I2S3_Init+0x54>)
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <MX_I2S3_Init+0x58>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2S3_Init+0x54>)
 80007e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f0:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2S3_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_I2S3_Init+0x54>)
 80007f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_I2S3_Init+0x54>)
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <MX_I2S3_Init+0x5c>)
 8000802:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_I2S3_Init+0x54>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_I2S3_Init+0x54>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_I2S3_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_I2S3_Init+0x54>)
 8000818:	f002 fdfa 	bl	8003410 <HAL_I2S_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000822:	f000 f9c7 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000148 	.word	0x20000148
 8000830:	40003c00 	.word	0x40003c00
 8000834:	00017700 	.word	0x00017700

08000838 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08e      	sub	sp, #56	; 0x38
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a59      	ldr	r2, [pc, #356]	; (80009bc <HAL_I2S_MspInit+0x184>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d15b      	bne.n	8000912 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	4b58      	ldr	r3, [pc, #352]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a57      	ldr	r2, [pc, #348]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b55      	ldr	r3, [pc, #340]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	623b      	str	r3, [r7, #32]
 8000874:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	4b51      	ldr	r3, [pc, #324]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a50      	ldr	r2, [pc, #320]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b4e      	ldr	r3, [pc, #312]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61fb      	str	r3, [r7, #28]
 8000890:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b4a      	ldr	r3, [pc, #296]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a49      	ldr	r2, [pc, #292]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ae:	2304      	movs	r3, #4
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008be:	2306      	movs	r3, #6
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c6:	4619      	mov	r1, r3
 80008c8:	483e      	ldr	r0, [pc, #248]	; (80009c4 <HAL_I2S_MspInit+0x18c>)
 80008ca:	f000 fca5 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	4836      	ldr	r0, [pc, #216]	; (80009c4 <HAL_I2S_MspInit+0x18c>)
 80008ea:	f000 fc95 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000900:	2305      	movs	r3, #5
 8000902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000908:	4619      	mov	r1, r3
 800090a:	482f      	ldr	r0, [pc, #188]	; (80009c8 <HAL_I2S_MspInit+0x190>)
 800090c:	f000 fc84 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000910:	e04f      	b.n	80009b2 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a2d      	ldr	r2, [pc, #180]	; (80009cc <HAL_I2S_MspInit+0x194>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d14a      	bne.n	80009b2 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_I2S_MspInit+0x188>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000970:	2310      	movs	r3, #16
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000980:	2306      	movs	r3, #6
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	4811      	ldr	r0, [pc, #68]	; (80009d0 <HAL_I2S_MspInit+0x198>)
 800098c:	f000 fc44 	bl	8001218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000990:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a2:	2306      	movs	r3, #6
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <HAL_I2S_MspInit+0x18c>)
 80009ae:	f000 fc33 	bl	8001218 <HAL_GPIO_Init>
}
 80009b2:	bf00      	nop
 80009b4:	3738      	adds	r7, #56	; 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40003800 	.word	0x40003800
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40003c00 	.word	0x40003c00
 80009d0:	40020000 	.word	0x40020000

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f000 fa47 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f861 	bl	8000aa4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009e2:	f000 f8c7 	bl	8000b74 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f7ff fd79 	bl	80004dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ea:	f7ff fe51 	bl	8000690 <MX_I2C1_Init>
  MX_I2S2_Init();
 80009ee:	f7ff fec5 	bl	800077c <MX_I2S2_Init>
  MX_I2S3_Init();
 80009f2:	f7ff fef1 	bl	80007d8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009f6:	f000 f8ed 	bl	8000bd4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009fa:	f007 fc29 	bl	8008250 <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t lights[] = {GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
 80009fe:	4a26      	ldr	r2, [pc, #152]	; (8000a98 <main+0xc4>)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	e883 0003 	stmia.w	r3, {r0, r1}
  int8_t direction = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
  int8_t idx = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73bb      	strb	r3, [r7, #14]

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a12:	f007 fc43 	bl	800829c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8000a16:	2101      	movs	r1, #1
 8000a18:	4820      	ldr	r0, [pc, #128]	; (8000a9c <main+0xc8>)
 8000a1a:	f000 fe97 	bl	800174c <HAL_GPIO_ReadPin>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <main+0x5e>
         direction *= -1;
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	425b      	negs	r3, r3
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	73fb      	strb	r3, [r7, #15]
         HAL_Delay(50);
 8000a2c:	2032      	movs	r0, #50	; 0x32
 8000a2e:	f000 fa8f 	bl	8000f50 <HAL_Delay>
    }

    idx += direction;
 8000a32:	7bba      	ldrb	r2, [r7, #14]
 8000a34:	7bfb      	ldrb	r3, [r7, #15]
 8000a36:	4413      	add	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	73bb      	strb	r3, [r7, #14]
    idx %= 4;
 8000a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a40:	425a      	negs	r2, r3
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	f002 0203 	and.w	r2, r2, #3
 8000a4a:	bf58      	it	pl
 8000a4c:	4253      	negpl	r3, r2
 8000a4e:	73bb      	strb	r3, [r7, #14]
    if (idx < 0){
 8000a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da01      	bge.n	8000a5c <main+0x88>
    	idx = 3;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	73bb      	strb	r3, [r7, #14]
    }
    HAL_GPIO_TogglePin(GPIOD, lights[idx]);
 8000a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	3310      	adds	r3, #16
 8000a64:	443b      	add	r3, r7
 8000a66:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <main+0xcc>)
 8000a6e:	f000 fec5 	bl	80017fc <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000a72:	20c8      	movs	r0, #200	; 0xc8
 8000a74:	f000 fa6c 	bl	8000f50 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, lights[idx]);
 8000a78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	3310      	adds	r3, #16
 8000a80:	443b      	add	r3, r7
 8000a82:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <main+0xcc>)
 8000a8a:	f000 feb7 	bl	80017fc <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 8000a8e:	20c8      	movs	r0, #200	; 0xc8
 8000a90:	f000 fa5e 	bl	8000f50 <HAL_Delay>
    MX_USB_HOST_Process();
 8000a94:	e7bd      	b.n	8000a12 <main+0x3e>
 8000a96:	bf00      	nop
 8000a98:	08008af8 	.word	0x08008af8
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020c00 	.word	0x40020c00

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b094      	sub	sp, #80	; 0x50
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	2230      	movs	r2, #48	; 0x30
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f007 ff0e 	bl	80088d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <SystemClock_Config+0xc8>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a26      	ldr	r2, [pc, #152]	; (8000b6c <SystemClock_Config+0xc8>)
 8000ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad8:	4b24      	ldr	r3, [pc, #144]	; (8000b6c <SystemClock_Config+0xc8>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <SystemClock_Config+0xcc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a20      	ldr	r2, [pc, #128]	; (8000b70 <SystemClock_Config+0xcc>)
 8000aee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <SystemClock_Config+0xcc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b18:	23c0      	movs	r3, #192	; 0xc0
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b1c:	2304      	movs	r3, #4
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b20:	2308      	movs	r3, #8
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f003 f9cf 	bl	8003ecc <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b34:	f000 f83e 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2103      	movs	r1, #3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f003 fce1 	bl	800451c <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b60:	f000 f828 	bl	8000bb4 <Error_Handler>
  }
}
 8000b64:	bf00      	nop
 8000b66:	3750      	adds	r7, #80	; 0x50
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40007000 	.word	0x40007000

08000b74 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
 8000b88:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000b8e:	23c8      	movs	r3, #200	; 0xc8
 8000b90:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000b92:	2305      	movs	r3, #5
 8000b94:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f003 ff71 	bl	8004a84 <HAL_RCCEx_PeriphCLKConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000ba8:	f000 f804 	bl	8000bb4 <Error_Handler>
  }
}
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>

08000bbe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bda:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <MX_SPI1_Init+0x68>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bde:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c20:	220a      	movs	r2, #10
 8000c22:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_SPI1_Init+0x64>)
 8000c26:	f004 f9a3 	bl	8004f70 <HAL_SPI_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c30:	f7ff ffc0 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000190 	.word	0x20000190
 8000c3c:	40013000 	.word	0x40013000

08000c40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_SPI_MspInit+0x84>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d12b      	bne.n	8000cba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_SPI_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c9a:	23e0      	movs	r3, #224	; 0xe0
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000caa:	2305      	movs	r3, #5
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <HAL_SPI_MspInit+0x8c>)
 8000cb6:	f000 faaf 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x4c>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_MspInit+0x4c>)
 8000cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d00:	6413      	str	r3, [r2, #64]	; 0x40
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_MspInit+0x4c>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d0e:	2007      	movs	r0, #7
 8000d10:	f000 fa12 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40023800 	.word	0x40023800

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8d0 	bl	8000f10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <OTG_FS_IRQHandler+0x10>)
 8000d7a:	f000 ffdd 	bl	8001d38 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200005cc 	.word	0x200005cc

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f007 fd52 	bl	8008860 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200001e8 	.word	0x200001e8
 8000df0:	200008e0 	.word	0x200008e0

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e1e:	490e      	ldr	r1, [pc, #56]	; (8000e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e20:	4a0e      	ldr	r2, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e34:	4c0b      	ldr	r4, [pc, #44]	; (8000e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e42:	f7ff ffd7 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f007 fd11 	bl	800886c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fdc3 	bl	80009d4 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e5c:	08008cf8 	.word	0x08008cf8
  ldr r2, =_sbss
 8000e60:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e64:	200008e0 	.word	0x200008e0

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f94f 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f000 f808 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff ff16 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb8:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_InitTick+0x54>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x58>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f000 f996 	bl	8001200 <HAL_SYSTICK_Config>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2b0f      	cmp	r3, #15
 8000ee2:	d80a      	bhi.n	8000efa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eec:	f000 f944 	bl	8001178 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef0:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_InitTick+0x5c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	e000      	b.n	8000efc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000004 	.word	0x20000004

08000f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x20>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_IncTick+0x24>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <HAL_IncTick+0x24>)
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008
 8000f34:	200001ec 	.word	0x200001ec

08000f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_GetTick+0x14>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	200001ec 	.word	0x200001ec

08000f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f58:	f7ff ffee 	bl	8000f38 <HAL_GetTick>
 8000f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f68:	d005      	beq.n	8000f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_Delay+0x44>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f76:	bf00      	nop
 8000f78:	f7ff ffde 	bl	8000f38 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d8f7      	bhi.n	8000f78 <HAL_Delay+0x28>
  {
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008

08000f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fca:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <__NVIC_SetPriorityGrouping+0x44>)
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	60d3      	str	r3, [r2, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	0a1b      	lsrs	r3, r3, #8
 8000fea:	f003 0307 	and.w	r3, r3, #7
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	2b00      	cmp	r3, #0
 800100c:	db0b      	blt.n	8001026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 021f 	and.w	r2, r3, #31
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <__NVIC_EnableIRQ+0x38>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	2001      	movs	r0, #1
 800101e:	fa00 f202 	lsl.w	r2, r0, r2
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000e100 	.word	0xe000e100

08001038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	6039      	str	r1, [r7, #0]
 8001042:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	db0a      	blt.n	8001062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	b2da      	uxtb	r2, r3
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <__NVIC_SetPriority+0x4c>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	0112      	lsls	r2, r2, #4
 8001058:	b2d2      	uxtb	r2, r2
 800105a:	440b      	add	r3, r1
 800105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001060:	e00a      	b.n	8001078 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4908      	ldr	r1, [pc, #32]	; (8001088 <__NVIC_SetPriority+0x50>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b04      	subs	r3, #4
 8001070:	0112      	lsls	r2, r2, #4
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	440b      	add	r3, r1
 8001076:	761a      	strb	r2, [r3, #24]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f1c3 0307 	rsb	r3, r3, #7
 80010a6:	2b04      	cmp	r3, #4
 80010a8:	bf28      	it	cs
 80010aa:	2304      	movcs	r3, #4
 80010ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3304      	adds	r3, #4
 80010b2:	2b06      	cmp	r3, #6
 80010b4:	d902      	bls.n	80010bc <NVIC_EncodePriority+0x30>
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3b03      	subs	r3, #3
 80010ba:	e000      	b.n	80010be <NVIC_EncodePriority+0x32>
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43da      	mvns	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	43d9      	mvns	r1, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001118:	f7ff ff8e 	bl	8001038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b07      	cmp	r3, #7
 8001144:	d00f      	beq.n	8001166 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b06      	cmp	r3, #6
 800114a:	d00c      	beq.n	8001166 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d009      	beq.n	8001166 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b04      	cmp	r3, #4
 8001156:	d006      	beq.n	8001166 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d003      	beq.n	8001166 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800115e:	2190      	movs	r1, #144	; 0x90
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001162:	f7ff fd2c 	bl	8000bbe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff16 	bl	8000f98 <__NVIC_SetPriorityGrouping>
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08008b00 	.word	0x08008b00

08001178 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b0f      	cmp	r3, #15
 800118e:	d903      	bls.n	8001198 <HAL_NVIC_SetPriority+0x20>
 8001190:	21a8      	movs	r1, #168	; 0xa8
 8001192:	480e      	ldr	r0, [pc, #56]	; (80011cc <HAL_NVIC_SetPriority+0x54>)
 8001194:	f7ff fd13 	bl	8000bbe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b0f      	cmp	r3, #15
 800119c:	d903      	bls.n	80011a6 <HAL_NVIC_SetPriority+0x2e>
 800119e:	21a9      	movs	r1, #169	; 0xa9
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <HAL_NVIC_SetPriority+0x54>)
 80011a2:	f7ff fd0c 	bl	8000bbe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a6:	f7ff ff1b 	bl	8000fe0 <__NVIC_GetPriorityGrouping>
 80011aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	68b9      	ldr	r1, [r7, #8]
 80011b0:	6978      	ldr	r0, [r7, #20]
 80011b2:	f7ff ff6b 	bl	800108c <NVIC_EncodePriority>
 80011b6:	4602      	mov	r2, r0
 80011b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff3a 	bl	8001038 <__NVIC_SetPriority>
}
 80011c4:	bf00      	nop
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	08008b00 	.word	0x08008b00

080011d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da03      	bge.n	80011ea <HAL_NVIC_EnableIRQ+0x1a>
 80011e2:	21bc      	movs	r1, #188	; 0xbc
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <HAL_NVIC_EnableIRQ+0x2c>)
 80011e6:	f7ff fcea 	bl	8000bbe <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff04 	bl	8000ffc <__NVIC_EnableIRQ>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	08008b00 	.word	0x08008b00

08001200 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff73 	bl	80010f4 <SysTick_Config>
 800120e:	4603      	mov	r3, r0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a33      	ldr	r2, [pc, #204]	; (8001300 <HAL_GPIO_Init+0xe8>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0x4e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_GPIO_Init+0xec>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x4e>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a31      	ldr	r2, [pc, #196]	; (8001308 <HAL_GPIO_Init+0xf0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00f      	beq.n	8001266 <HAL_GPIO_Init+0x4e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a30      	ldr	r2, [pc, #192]	; (800130c <HAL_GPIO_Init+0xf4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00b      	beq.n	8001266 <HAL_GPIO_Init+0x4e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_GPIO_Init+0xf8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x4e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <HAL_GPIO_Init+0xfc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x4e>
 800125e:	21ac      	movs	r1, #172	; 0xac
 8001260:	482d      	ldr	r0, [pc, #180]	; (8001318 <HAL_GPIO_Init+0x100>)
 8001262:	f7ff fcac 	bl	8000bbe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	b29b      	uxth	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x64>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0c1b      	lsrs	r3, r3, #16
 8001276:	041b      	lsls	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x6c>
 800127c:	21ad      	movs	r1, #173	; 0xad
 800127e:	4826      	ldr	r0, [pc, #152]	; (8001318 <HAL_GPIO_Init+0x100>)
 8001280:	f7ff fc9d 	bl	8000bbe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d035      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d031      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b11      	cmp	r3, #17
 800129a:	d02d      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d029      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b12      	cmp	r3, #18
 80012aa:	d025      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80012b4:	d020      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80012be:	d01b      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80012c8:	d016      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80012d2:	d011      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80012dc:	d00c      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80012e6:	d007      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0xe0>
 80012f0:	21ae      	movs	r1, #174	; 0xae
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <HAL_GPIO_Init+0x100>)
 80012f4:	f7ff fc63 	bl	8000bbe <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	e20c      	b.n	8001718 <HAL_GPIO_Init+0x500>
 80012fe:	bf00      	nop
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40021c00 	.word	0x40021c00
 8001318:	08008b3c 	.word	0x08008b3c
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	429a      	cmp	r2, r3
 8001336:	f040 81ec 	bne.w	8001712 <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b01      	cmp	r3, #1
 8001344:	d005      	beq.n	8001352 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800134e:	2b02      	cmp	r3, #2
 8001350:	d144      	bne.n	80013dc <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00f      	beq.n	800137a <HAL_GPIO_Init+0x162>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d00b      	beq.n	800137a <HAL_GPIO_Init+0x162>
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x162>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x162>
 8001372:	21c0      	movs	r1, #192	; 0xc0
 8001374:	4884      	ldr	r0, [pc, #528]	; (8001588 <HAL_GPIO_Init+0x370>)
 8001376:	f7ff fc22 	bl	8000bbe <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f003 0201 	and.w	r2, r3, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d027      	beq.n	8001438 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0x1f0>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x1f0>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x1f0>
 8001400:	21d1      	movs	r1, #209	; 0xd1
 8001402:	4861      	ldr	r0, [pc, #388]	; (8001588 <HAL_GPIO_Init+0x370>)
 8001404:	f7ff fbdb 	bl	8000bbe <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	f040 80a3 	bne.w	800158c <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d077      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b09      	cmp	r3, #9
 8001454:	d073      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d06f      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d06b      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d067      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d063      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d05f      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d05b      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d057      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d053      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d04f      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d04b      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d047      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d043      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d03f      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d03b      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d037      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d033      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	2b06      	cmp	r3, #6
 80014dc:	d02f      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d02b      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d027      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b07      	cmp	r3, #7
 80014f4:	d023      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b07      	cmp	r3, #7
 80014fc:	d01f      	beq.n	800153e <HAL_GPIO_Init+0x326>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	2b07      	cmp	r3, #7
 8001504:	d01b      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b08      	cmp	r3, #8
 800150c:	d017      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b09      	cmp	r3, #9
 800151c:	d00f      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b09      	cmp	r3, #9
 8001524:	d00b      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d007      	beq.n	800153e <HAL_GPIO_Init+0x326>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x326>
 8001536:	21de      	movs	r1, #222	; 0xde
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <HAL_GPIO_Init+0x370>)
 800153a:	f7ff fb40 	bl	8000bbe <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	69b9      	ldr	r1, [r7, #24]
 8001582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001586:	e001      	b.n	800158c <HAL_GPIO_Init+0x374>
 8001588:	08008b3c 	.word	0x08008b3c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0203 	and.w	r2, r3, #3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80a2 	beq.w	8001712 <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b56      	ldr	r3, [pc, #344]	; (800172c <HAL_GPIO_Init+0x514>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a55      	ldr	r2, [pc, #340]	; (800172c <HAL_GPIO_Init+0x514>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b53      	ldr	r3, [pc, #332]	; (800172c <HAL_GPIO_Init+0x514>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ea:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_GPIO_Init+0x518>)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	220f      	movs	r2, #15
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a48      	ldr	r2, [pc, #288]	; (8001734 <HAL_GPIO_Init+0x51c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d019      	beq.n	800164a <HAL_GPIO_Init+0x432>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a47      	ldr	r2, [pc, #284]	; (8001738 <HAL_GPIO_Init+0x520>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x42e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a46      	ldr	r2, [pc, #280]	; (800173c <HAL_GPIO_Init+0x524>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x42a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a45      	ldr	r2, [pc, #276]	; (8001740 <HAL_GPIO_Init+0x528>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x426>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a44      	ldr	r2, [pc, #272]	; (8001744 <HAL_GPIO_Init+0x52c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x422>
 8001636:	2304      	movs	r3, #4
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x434>
 800163a:	2307      	movs	r3, #7
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x434>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x434>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x434>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x434>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4934      	ldr	r1, [pc, #208]	; (8001730 <HAL_GPIO_Init+0x518>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_GPIO_Init+0x530>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168e:	4a2e      	ldr	r2, [pc, #184]	; (8001748 <HAL_GPIO_Init+0x530>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_GPIO_Init+0x530>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b8:	4a23      	ldr	r2, [pc, #140]	; (8001748 <HAL_GPIO_Init+0x530>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016be:	4b22      	ldr	r3, [pc, #136]	; (8001748 <HAL_GPIO_Init+0x530>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_GPIO_Init+0x530>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_GPIO_Init+0x530>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170c:	4a0e      	ldr	r2, [pc, #56]	; (8001748 <HAL_GPIO_Init+0x530>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f adfe 	bls.w	800131c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3720      	adds	r7, #32
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40013800 	.word	0x40013800
 8001734:	40020000 	.word	0x40020000
 8001738:	40020400 	.word	0x40020400
 800173c:	40020800 	.word	0x40020800
 8001740:	40020c00 	.word	0x40020c00
 8001744:	40021000 	.word	0x40021000
 8001748:	40013c00 	.word	0x40013c00

0800174c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_GPIO_ReadPin+0x1c>
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	0c1b      	lsrs	r3, r3, #16
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_GPIO_ReadPin+0x26>
 8001768:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <HAL_GPIO_ReadPin+0x48>)
 800176e:	f7ff fa26 	bl	8000bbe <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691a      	ldr	r2, [r3, #16]
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800177e:	2301      	movs	r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e001      	b.n	8001788 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001784:	2300      	movs	r3, #0
 8001786:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001788:	7bfb      	ldrb	r3, [r7, #15]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	08008b3c 	.word	0x08008b3c

08001798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	460b      	mov	r3, r1
 80017a2:	807b      	strh	r3, [r7, #2]
 80017a4:	4613      	mov	r3, r2
 80017a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d004      	beq.n	80017b8 <HAL_GPIO_WritePin+0x20>
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d004      	beq.n	80017c2 <HAL_GPIO_WritePin+0x2a>
 80017b8:	f240 119d 	movw	r1, #413	; 0x19d
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <HAL_GPIO_WritePin+0x60>)
 80017be:	f7ff f9fe 	bl	8000bbe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80017c2:	787b      	ldrb	r3, [r7, #1]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d007      	beq.n	80017d8 <HAL_GPIO_WritePin+0x40>
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d004      	beq.n	80017d8 <HAL_GPIO_WritePin+0x40>
 80017ce:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80017d2:	4809      	ldr	r0, [pc, #36]	; (80017f8 <HAL_GPIO_WritePin+0x60>)
 80017d4:	f7ff f9f3 	bl	8000bbe <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017e4:	e003      	b.n	80017ee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	619a      	str	r2, [r3, #24]
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	08008b3c 	.word	0x08008b3c

080017fc <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001808:	887b      	ldrh	r3, [r7, #2]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_GPIO_TogglePin+0x1c>
 800180e:	887b      	ldrh	r3, [r7, #2]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	041b      	lsls	r3, r3, #16
 8001814:	2b00      	cmp	r3, #0
 8001816:	d004      	beq.n	8001822 <HAL_GPIO_TogglePin+0x26>
 8001818:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <HAL_GPIO_TogglePin+0x4c>)
 800181e:	f7ff f9ce 	bl	8000bbe <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	041a      	lsls	r2, r3, #16
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43d9      	mvns	r1, r3
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	400b      	ands	r3, r1
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	08008b3c 	.word	0x08008b3c

0800184c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800184c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800184e:	b08f      	sub	sp, #60	; 0x3c
 8001850:	af0a      	add	r7, sp, #40	; 0x28
 8001852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e05d      	b.n	800191a <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001866:	d003      	beq.n	8001870 <HAL_HCD_Init+0x24>
 8001868:	2179      	movs	r1, #121	; 0x79
 800186a:	482e      	ldr	r0, [pc, #184]	; (8001924 <HAL_HCD_Init+0xd8>)
 800186c:	f7ff f9a7 	bl	8000bbe <assert_failed>

  USBx = hhcd->Instance;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f006 fd3e 	bl	800830c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2203      	movs	r2, #3
 8001894:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 fd6c 	bl	800538c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	603b      	str	r3, [r7, #0]
 80018ba:	687e      	ldr	r6, [r7, #4]
 80018bc:	466d      	mov	r5, sp
 80018be:	f106 0410 	add.w	r4, r6, #16
 80018c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d2:	1d33      	adds	r3, r6, #4
 80018d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d6:	6838      	ldr	r0, [r7, #0]
 80018d8:	f003 fce6 	bl	80052a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 fd63 	bl	80053ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	603b      	str	r3, [r7, #0]
 80018ee:	687e      	ldr	r6, [r7, #4]
 80018f0:	466d      	mov	r5, sp
 80018f2:	f106 0410 	add.w	r4, r6, #16
 80018f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001902:	e885 0003 	stmia.w	r5, {r0, r1}
 8001906:	1d33      	adds	r3, r6, #4
 8001908:	cb0e      	ldmia	r3, {r1, r2, r3}
 800190a:	6838      	ldr	r0, [r7, #0]
 800190c:	f003 feec 	bl	80056e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001922:	bf00      	nop
 8001924:	08008b78 	.word	0x08008b78

08001928 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af04      	add	r7, sp, #16
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	460b      	mov	r3, r1
 800193c:	70bb      	strb	r3, [r7, #2]
 800193e:	4613      	mov	r3, r2
 8001940:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_HCD_HC_Init+0x28>
 800194c:	2302      	movs	r3, #2
 800194e:	e076      	b.n	8001a3e <HAL_HCD_HC_Init+0x116>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	212c      	movs	r1, #44	; 0x2c
 800195e:	fb01 f303 	mul.w	r3, r1, r3
 8001962:	4413      	add	r3, r2
 8001964:	333d      	adds	r3, #61	; 0x3d
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	212c      	movs	r1, #44	; 0x2c
 8001970:	fb01 f303 	mul.w	r3, r1, r3
 8001974:	4413      	add	r3, r2
 8001976:	3338      	adds	r3, #56	; 0x38
 8001978:	787a      	ldrb	r2, [r7, #1]
 800197a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	212c      	movs	r1, #44	; 0x2c
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3340      	adds	r3, #64	; 0x40
 800198a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800198c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	212c      	movs	r1, #44	; 0x2c
 8001994:	fb01 f303 	mul.w	r3, r1, r3
 8001998:	4413      	add	r3, r2
 800199a:	3339      	adds	r3, #57	; 0x39
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	333f      	adds	r3, #63	; 0x3f
 80019ae:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	78ba      	ldrb	r2, [r7, #2]
 80019b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019bc:	b2d0      	uxtb	r0, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	333a      	adds	r3, #58	; 0x3a
 80019ca:	4602      	mov	r2, r0
 80019cc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80019ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da09      	bge.n	80019ea <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	4413      	add	r3, r2
 80019e2:	333b      	adds	r3, #59	; 0x3b
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e008      	b.n	80019fc <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	333b      	adds	r3, #59	; 0x3b
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	333c      	adds	r3, #60	; 0x3c
 8001a0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a0e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	787c      	ldrb	r4, [r7, #1]
 8001a16:	78ba      	ldrb	r2, [r7, #2]
 8001a18:	78f9      	ldrb	r1, [r7, #3]
 8001a1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f003 ffe2 	bl	80059f4 <USB_HC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}

08001a46 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2300      	movs	r3, #0
 8001a54:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_HCD_HC_Halt+0x1e>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e00f      	b.n	8001a84 <HAL_HCD_HC_Halt+0x3e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f004 fa32 	bl	8005ede <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	70fb      	strb	r3, [r7, #3]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70bb      	strb	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	333b      	adds	r3, #59	; 0x3b
 8001ab4:	78ba      	ldrb	r2, [r7, #2]
 8001ab6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ab8:	78fb      	ldrb	r3, [r7, #3]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	212c      	movs	r1, #44	; 0x2c
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	333f      	adds	r3, #63	; 0x3f
 8001ac6:	787a      	ldrb	r2, [r7, #1]
 8001ac8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001aca:	7c3b      	ldrb	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d112      	bne.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	212c      	movs	r1, #44	; 0x2c
 8001ad6:	fb01 f303 	mul.w	r3, r1, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	3342      	adds	r3, #66	; 0x42
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	333d      	adds	r3, #61	; 0x3d
 8001af0:	7f3a      	ldrb	r2, [r7, #28]
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e008      	b.n	8001b08 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2202      	movs	r2, #2
 8001b06:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	f200 80c6 	bhi.w	8001c9c <HAL_HCD_HC_SubmitRequest+0x210>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001c89 	.word	0x08001c89
 8001b20:	08001b8d 	.word	0x08001b8d
 8001b24:	08001c0b 	.word	0x08001c0b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b28:	7c3b      	ldrb	r3, [r7, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	f040 80b8 	bne.w	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f040 80b4 	bne.w	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b38:	8b3b      	ldrh	r3, [r7, #24]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d108      	bne.n	8001b50 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	212c      	movs	r1, #44	; 0x2c
 8001b44:	fb01 f303 	mul.w	r3, r1, r3
 8001b48:	4413      	add	r3, r2
 8001b4a:	3355      	adds	r3, #85	; 0x55
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	212c      	movs	r1, #44	; 0x2c
 8001b56:	fb01 f303 	mul.w	r3, r1, r3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3355      	adds	r3, #85	; 0x55
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	212c      	movs	r1, #44	; 0x2c
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	4413      	add	r3, r2
 8001b70:	3342      	adds	r3, #66	; 0x42
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b76:	e093      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	212c      	movs	r1, #44	; 0x2c
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	4413      	add	r3, r2
 8001b84:	3342      	adds	r3, #66	; 0x42
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
      break;
 8001b8a:	e089      	b.n	8001ca0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b8c:	78bb      	ldrb	r3, [r7, #2]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11d      	bne.n	8001bce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	212c      	movs	r1, #44	; 0x2c
 8001b98:	fb01 f303 	mul.w	r3, r1, r3
 8001b9c:	4413      	add	r3, r2
 8001b9e:	3355      	adds	r3, #85	; 0x55
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3342      	adds	r3, #66	; 0x42
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bb8:	e073      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	212c      	movs	r1, #44	; 0x2c
 8001bc0:	fb01 f303 	mul.w	r3, r1, r3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3342      	adds	r3, #66	; 0x42
 8001bc8:	2202      	movs	r2, #2
 8001bca:	701a      	strb	r2, [r3, #0]
      break;
 8001bcc:	e069      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	212c      	movs	r1, #44	; 0x2c
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3354      	adds	r3, #84	; 0x54
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	212c      	movs	r1, #44	; 0x2c
 8001be8:	fb01 f303 	mul.w	r3, r1, r3
 8001bec:	4413      	add	r3, r2
 8001bee:	3342      	adds	r3, #66	; 0x42
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
      break;
 8001bf4:	e055      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bf6:	78fb      	ldrb	r3, [r7, #3]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	212c      	movs	r1, #44	; 0x2c
 8001bfc:	fb01 f303 	mul.w	r3, r1, r3
 8001c00:	4413      	add	r3, r2
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]
      break;
 8001c08:	e04b      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c0a:	78bb      	ldrb	r3, [r7, #2]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d11d      	bne.n	8001c4c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3355      	adds	r3, #85	; 0x55
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	212c      	movs	r1, #44	; 0x2c
 8001c2a:	fb01 f303 	mul.w	r3, r1, r3
 8001c2e:	4413      	add	r3, r2
 8001c30:	3342      	adds	r3, #66	; 0x42
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c36:	e034      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3342      	adds	r3, #66	; 0x42
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
      break;
 8001c4a:	e02a      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	212c      	movs	r1, #44	; 0x2c
 8001c52:	fb01 f303 	mul.w	r3, r1, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	3354      	adds	r3, #84	; 0x54
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3342      	adds	r3, #66	; 0x42
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
      break;
 8001c72:	e016      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3342      	adds	r3, #66	; 0x42
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
      break;
 8001c86:	e00c      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c9c:	bf00      	nop
 8001c9e:	e000      	b.n	8001ca2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ca0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	212c      	movs	r1, #44	; 0x2c
 8001ca8:	fb01 f303 	mul.w	r3, r1, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	3344      	adds	r3, #68	; 0x44
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	8b3a      	ldrh	r2, [r7, #24]
 8001cb8:	6879      	ldr	r1, [r7, #4]
 8001cba:	202c      	movs	r0, #44	; 0x2c
 8001cbc:	fb00 f303 	mul.w	r3, r0, r3
 8001cc0:	440b      	add	r3, r1
 8001cc2:	334c      	adds	r3, #76	; 0x4c
 8001cc4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	212c      	movs	r1, #44	; 0x2c
 8001ccc:	fb01 f303 	mul.w	r3, r1, r3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	3360      	adds	r3, #96	; 0x60
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3350      	adds	r3, #80	; 0x50
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3339      	adds	r3, #57	; 0x39
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	212c      	movs	r1, #44	; 0x2c
 8001d02:	fb01 f303 	mul.w	r3, r1, r3
 8001d06:	4413      	add	r3, r2
 8001d08:	3361      	adds	r3, #97	; 0x61
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	222c      	movs	r2, #44	; 0x2c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	3338      	adds	r3, #56	; 0x38
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	18d1      	adds	r1, r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	f003 ff86 	bl	8005c38 <USB_HC_StartXfer>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop

08001d38 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fc87 	bl	8005662 <USB_GetMode>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	f040 80f6 	bne.w	8001f48 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f003 fc6b 	bl	800563c <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 80ec 	beq.w	8001f46 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f003 fc62 	bl	800563c <USB_ReadInterrupts>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d82:	d104      	bne.n	8001d8e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fc52 	bl	800563c <USB_ReadInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da2:	d104      	bne.n	8001dae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fc42 	bl	800563c <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001dc2:	d104      	bne.n	8001dce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fc32 	bl	800563c <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d103      	bne.n	8001dea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fc24 	bl	800563c <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dfe:	d11c      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e08:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	6938      	ldr	r0, [r7, #16]
 8001e1e:	f003 fb13 	bl	8005448 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e22:	6938      	ldr	r0, [r7, #16]
 8001e24:	f003 fb44 	bl	80054b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fd1a 	bl	8005868 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f006 fae7 	bl	8008408 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fbfc 	bl	800563c <USB_ReadInterrupts>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e4e:	d102      	bne.n	8001e56 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f001 f89e 	bl	8002f92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fbee 	bl	800563c <USB_ReadInterrupts>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d106      	bne.n	8001e78 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f006 fab0 	bl	80083d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2208      	movs	r2, #8
 8001e76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f003 fbdd 	bl	800563c <USB_ReadInterrupts>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b10      	cmp	r3, #16
 8001e8a:	d101      	bne.n	8001e90 <HAL_HCD_IRQHandler+0x158>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_HCD_IRQHandler+0x15a>
 8001e90:	2300      	movs	r3, #0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0210 	bic.w	r2, r2, #16
 8001ea4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 ffa1 	bl	8002dee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0210 	orr.w	r2, r2, #16
 8001eba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fbbb 	bl	800563c <USB_ReadInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ed0:	d13a      	bne.n	8001f48 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fff0 	bl	8005ebc <USB_HC_ReadInterrupt>
 8001edc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e025      	b.n	8001f30 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d018      	beq.n	8001f2a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f0e:	d106      	bne.n	8001f1e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ab 	bl	8002072 <HCD_HC_IN_IRQHandler>
 8001f1c:	e005      	b.n	8001f2a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	4619      	mov	r1, r3
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 fbf9 	bl	800271c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d3d4      	bcc.n	8001ee4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f42:	615a      	str	r2, [r3, #20]
 8001f44:	e000      	b.n	8001f48 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f46:	bf00      	nop
    }
  }
}
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_HCD_Start+0x16>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e013      	b.n	8001f8c <HAL_HCD_Start+0x3e>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fcdc 	bl	8005930 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f003 f9f4 	bl	800536a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d101      	bne.n	8001faa <HAL_HCD_Stop+0x16>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e00d      	b.n	8001fc6 <HAL_HCD_Stop+0x32>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 f8ca 	bl	8006150 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fc7e 	bl	80058dc <USB_ResetPort>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3360      	adds	r3, #96	; 0x60
 8002004:	781b      	ldrb	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3350      	adds	r3, #80	; 0x50
 800202c:	681b      	ldr	r3, [r3, #0]
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fcc2 	bl	80059d0 <USB_GetCurrentFrame>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f003 fc9d 	bl	80059a2 <USB_GetHostSpeed>
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	460b      	mov	r3, r1
 800207c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d11a      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	461a      	mov	r2, r3
 80020b0:	2304      	movs	r3, #4
 80020b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	212c      	movs	r1, #44	; 0x2c
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	4413      	add	r3, r2
 80020c0:	3361      	adds	r3, #97	; 0x61
 80020c2:	2206      	movs	r2, #6
 80020c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	4611      	mov	r1, r2
 80020d0:	4618      	mov	r0, r3
 80020d2:	f003 ff04 	bl	8005ede <USB_HC_Halt>
 80020d6:	e0af      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	015a      	lsls	r2, r3, #5
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4413      	add	r3, r2
 80020e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ee:	d11b      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	461a      	mov	r2, r3
 80020fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002102:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	212c      	movs	r1, #44	; 0x2c
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3361      	adds	r3, #97	; 0x61
 8002112:	2207      	movs	r2, #7
 8002114:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f003 fedc 	bl	8005ede <USB_HC_Halt>
 8002126:	e087      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4413      	add	r3, r2
 8002130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b20      	cmp	r3, #32
 800213c:	d109      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	461a      	mov	r2, r3
 800214c:	2320      	movs	r3, #32
 800214e:	6093      	str	r3, [r2, #8]
 8002150:	e072      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b08      	cmp	r3, #8
 8002166:	d11a      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	461a      	mov	r2, r3
 8002176:	2308      	movs	r3, #8
 8002178:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3361      	adds	r3, #97	; 0x61
 8002188:	2205      	movs	r2, #5
 800218a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f003 fea1 	bl	8005ede <USB_HC_Halt>
 800219c:	e04c      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b4:	d11b      	bne.n	80021ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	461a      	mov	r2, r3
 80021c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	3361      	adds	r3, #97	; 0x61
 80021d8:	2208      	movs	r2, #8
 80021da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fe79 	bl	8005ede <USB_HC_Halt>
 80021ec:	e024      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d119      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	461a      	mov	r2, r3
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	3361      	adds	r3, #97	; 0x61
 8002224:	2206      	movs	r2, #6
 8002226:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fe53 	bl	8005ede <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800224a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800224e:	d112      	bne.n	8002276 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fe3f 	bl	8005ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002272:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002274:	e24e      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	f040 80df 	bne.w	800244c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d019      	beq.n	80022ca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3348      	adds	r3, #72	; 0x48
 80022a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	0159      	lsls	r1, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022b8:	1ad2      	subs	r2, r2, r3
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	202c      	movs	r0, #44	; 0x2c
 80022c0:	fb00 f303 	mul.w	r3, r0, r3
 80022c4:	440b      	add	r3, r1
 80022c6:	3350      	adds	r3, #80	; 0x50
 80022c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	212c      	movs	r1, #44	; 0x2c
 80022d0:	fb01 f303 	mul.w	r3, r1, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	3361      	adds	r3, #97	; 0x61
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	212c      	movs	r1, #44	; 0x2c
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	335c      	adds	r3, #92	; 0x5c
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	212c      	movs	r1, #44	; 0x2c
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	4413      	add	r3, r2
 800230c:	333f      	adds	r3, #63	; 0x3f
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d009      	beq.n	8002328 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	212c      	movs	r1, #44	; 0x2c
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	4413      	add	r3, r2
 8002320:	333f      	adds	r3, #63	; 0x3f
 8002322:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002324:	2b02      	cmp	r3, #2
 8002326:	d111      	bne.n	800234c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	4611      	mov	r1, r2
 8002332:	4618      	mov	r0, r3
 8002334:	f003 fdd3 	bl	8005ede <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2310      	movs	r3, #16
 8002348:	6093      	str	r3, [r2, #8]
 800234a:	e03a      	b.n	80023c2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	212c      	movs	r1, #44	; 0x2c
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	333f      	adds	r3, #63	; 0x3f
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b03      	cmp	r3, #3
 800235e:	d009      	beq.n	8002374 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	333f      	adds	r3, #63	; 0x3f
 800236e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002370:	2b01      	cmp	r3, #1
 8002372:	d126      	bne.n	80023c2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	0151      	lsls	r1, r2, #5
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	440a      	add	r2, r1
 800238a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800238e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002392:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	b2d9      	uxtb	r1, r3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	202c      	movs	r0, #44	; 0x2c
 80023b0:	fb00 f303 	mul.w	r3, r0, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	3360      	adds	r3, #96	; 0x60
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f006 f831 	bl	8008424 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d12b      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3348      	adds	r3, #72	; 0x48
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	202c      	movs	r0, #44	; 0x2c
 80023e0:	fb00 f202 	mul.w	r2, r0, r2
 80023e4:	440a      	add	r2, r1
 80023e6:	3240      	adds	r2, #64	; 0x40
 80023e8:	8812      	ldrh	r2, [r2, #0]
 80023ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 818e 	beq.w	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3354      	adds	r3, #84	; 0x54
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2d8      	uxtb	r0, r3
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3354      	adds	r3, #84	; 0x54
 800241c:	4602      	mov	r2, r0
 800241e:	701a      	strb	r2, [r3, #0]
}
 8002420:	e178      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	212c      	movs	r1, #44	; 0x2c
 8002428:	fb01 f303 	mul.w	r3, r1, r3
 800242c:	4413      	add	r3, r2
 800242e:	3354      	adds	r3, #84	; 0x54
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2d8      	uxtb	r0, r3
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3354      	adds	r3, #84	; 0x54
 8002446:	4602      	mov	r2, r0
 8002448:	701a      	strb	r2, [r3, #0]
}
 800244a:	e163      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	f040 80f6 	bne.w	8002650 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	212c      	movs	r1, #44	; 0x2c
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	4413      	add	r3, r2
 8002470:	3361      	adds	r3, #97	; 0x61
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d109      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3360      	adds	r3, #96	; 0x60
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	e0c9      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	212c      	movs	r1, #44	; 0x2c
 8002492:	fb01 f303 	mul.w	r3, r1, r3
 8002496:	4413      	add	r3, r2
 8002498:	3361      	adds	r3, #97	; 0x61
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b05      	cmp	r3, #5
 800249e:	d109      	bne.n	80024b4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	212c      	movs	r1, #44	; 0x2c
 80024a6:	fb01 f303 	mul.w	r3, r1, r3
 80024aa:	4413      	add	r3, r2
 80024ac:	3360      	adds	r3, #96	; 0x60
 80024ae:	2205      	movs	r2, #5
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	e0b5      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3361      	adds	r3, #97	; 0x61
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d009      	beq.n	80024dc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	212c      	movs	r1, #44	; 0x2c
 80024ce:	fb01 f303 	mul.w	r3, r1, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	3361      	adds	r3, #97	; 0x61
 80024d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d150      	bne.n	800257e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	335c      	adds	r3, #92	; 0x5c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	202c      	movs	r0, #44	; 0x2c
 80024f4:	fb00 f303 	mul.w	r3, r0, r3
 80024f8:	440b      	add	r3, r1
 80024fa:	335c      	adds	r3, #92	; 0x5c
 80024fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	212c      	movs	r1, #44	; 0x2c
 8002504:	fb01 f303 	mul.w	r3, r1, r3
 8002508:	4413      	add	r3, r2
 800250a:	335c      	adds	r3, #92	; 0x5c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d912      	bls.n	8002538 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	; 0x5c
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3360      	adds	r3, #96	; 0x60
 8002532:	2204      	movs	r2, #4
 8002534:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002536:	e073      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3360      	adds	r3, #96	; 0x60
 8002546:	2202      	movs	r2, #2
 8002548:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	015a      	lsls	r2, r3, #5
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4413      	add	r3, r2
 8002552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002560:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002568:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	461a      	mov	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800257c:	e050      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3361      	adds	r3, #97	; 0x61
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d122      	bne.n	80025d8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	3360      	adds	r3, #96	; 0x60
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e023      	b.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3361      	adds	r3, #97	; 0x61
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d119      	bne.n	8002620 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	335c      	adds	r3, #92	; 0x5c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	202c      	movs	r0, #44	; 0x2c
 8002604:	fb00 f303 	mul.w	r3, r0, r3
 8002608:	440b      	add	r3, r1
 800260a:	335c      	adds	r3, #92	; 0x5c
 800260c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	212c      	movs	r1, #44	; 0x2c
 8002614:	fb01 f303 	mul.w	r3, r1, r3
 8002618:	4413      	add	r3, r2
 800261a:	3360      	adds	r3, #96	; 0x60
 800261c:	2204      	movs	r2, #4
 800261e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4413      	add	r3, r2
 8002628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262c:	461a      	mov	r2, r3
 800262e:	2302      	movs	r3, #2
 8002630:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	b2d9      	uxtb	r1, r3
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	202c      	movs	r0, #44	; 0x2c
 800263c:	fb00 f303 	mul.w	r3, r0, r3
 8002640:	4413      	add	r3, r2
 8002642:	3360      	adds	r3, #96	; 0x60
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f005 feeb 	bl	8008424 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800264e:	e061      	b.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b10      	cmp	r3, #16
 8002664:	d156      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	333f      	adds	r3, #63	; 0x3f
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b03      	cmp	r3, #3
 8002678:	d111      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fc21 	bl	8005ede <USB_HC_Halt>
 800269c:	e031      	b.n	8002702 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	212c      	movs	r1, #44	; 0x2c
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	333f      	adds	r3, #63	; 0x3f
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333f      	adds	r3, #63	; 0x3f
 80026c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d11d      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	335c      	adds	r3, #92	; 0x5c
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3361      	adds	r3, #97	; 0x61
 80026ee:	2203      	movs	r2, #3
 80026f0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f003 fbee 	bl	8005ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2310      	movs	r3, #16
 8002712:	6093      	str	r3, [r2, #8]
}
 8002714:	bf00      	nop
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b04      	cmp	r3, #4
 800274a:	d11a      	bne.n	8002782 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	015a      	lsls	r2, r3, #5
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	4413      	add	r3, r2
 8002754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002758:	461a      	mov	r2, r3
 800275a:	2304      	movs	r3, #4
 800275c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3361      	adds	r3, #97	; 0x61
 800276c:	2206      	movs	r2, #6
 800276e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fbaf 	bl	8005ede <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002780:	e331      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	4413      	add	r3, r2
 800278a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d12e      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2320      	movs	r3, #32
 80027a8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	333d      	adds	r3, #61	; 0x3d
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	f040 8313 	bne.w	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	212c      	movs	r1, #44	; 0x2c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	333d      	adds	r3, #61	; 0x3d
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3360      	adds	r3, #96	; 0x60
 80027e0:	2202      	movs	r2, #2
 80027e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 fb75 	bl	8005ede <USB_HC_Halt>
}
 80027f4:	e2f7      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800280c:	d112      	bne.n	8002834 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	461a      	mov	r2, r3
 800281c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002820:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	697a      	ldr	r2, [r7, #20]
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f003 fb56 	bl	8005ede <USB_HC_Halt>
}
 8002832:	e2d8      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b01      	cmp	r3, #1
 8002848:	d140      	bne.n	80028cc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	335c      	adds	r3, #92	; 0x5c
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286e:	2b40      	cmp	r3, #64	; 0x40
 8002870:	d111      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	333d      	adds	r3, #61	; 0x3d
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fb0a 	bl	8005ede <USB_HC_Halt>
}
 80028ca:	e28c      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b40      	cmp	r3, #64	; 0x40
 80028e0:	d12c      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	212c      	movs	r1, #44	; 0x2c
 80028e8:	fb01 f303 	mul.w	r3, r1, r3
 80028ec:	4413      	add	r3, r2
 80028ee:	3361      	adds	r3, #97	; 0x61
 80028f0:	2204      	movs	r2, #4
 80028f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	333d      	adds	r3, #61	; 0x3d
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	212c      	movs	r1, #44	; 0x2c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	4413      	add	r3, r2
 8002912:	335c      	adds	r3, #92	; 0x5c
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f003 fadb 	bl	8005ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	461a      	mov	r2, r3
 8002936:	2340      	movs	r3, #64	; 0x40
 8002938:	6093      	str	r3, [r2, #8]
}
 800293a:	e254      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11a      	bne.n	8002988 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	2308      	movs	r3, #8
 8002962:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	2205      	movs	r2, #5
 8002974:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f003 faac 	bl	8005ede <USB_HC_Halt>
}
 8002986:	e22e      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	4413      	add	r3, r2
 8002990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d140      	bne.n	8002a20 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3361      	adds	r3, #97	; 0x61
 80029be:	2203      	movs	r2, #3
 80029c0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	333d      	adds	r3, #61	; 0x3d
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	333c      	adds	r3, #60	; 0x3c
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d108      	bne.n	80029fc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	333d      	adds	r3, #61	; 0x3d
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	b2d2      	uxtb	r2, r2
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fa69 	bl	8005ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	6093      	str	r3, [r2, #8]
}
 8002a1e:	e1e2      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b80      	cmp	r3, #128	; 0x80
 8002a34:	d164      	bne.n	8002b00 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d111      	bne.n	8002a62 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	212c      	movs	r1, #44	; 0x2c
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	3361      	adds	r3, #97	; 0x61
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fa3f 	bl	8005ede <USB_HC_Halt>
 8002a60:	e044      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	335c      	adds	r3, #92	; 0x5c
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	202c      	movs	r0, #44	; 0x2c
 8002a7a:	fb00 f303 	mul.w	r3, r0, r3
 8002a7e:	440b      	add	r3, r1
 8002a80:	335c      	adds	r3, #92	; 0x5c
 8002a82:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	335c      	adds	r3, #92	; 0x5c
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d920      	bls.n	8002ada <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	335c      	adds	r3, #92	; 0x5c
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3360      	adds	r3, #96	; 0x60
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	b2d9      	uxtb	r1, r3
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	202c      	movs	r0, #44	; 0x2c
 8002ac6:	fb00 f303 	mul.w	r3, r0, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3360      	adds	r3, #96	; 0x60
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f005 fca6 	bl	8008424 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ad8:	e008      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3360      	adds	r3, #96	; 0x60
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	461a      	mov	r2, r3
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	6093      	str	r3, [r2, #8]
}
 8002afe:	e172      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b16:	d11b      	bne.n	8002b50 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3361      	adds	r3, #97	; 0x61
 8002b26:	2208      	movs	r2, #8
 8002b28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f003 f9d2 	bl	8005ede <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4c:	6093      	str	r3, [r2, #8]
}
 8002b4e:	e14a      	b.n	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	f040 813f 	bne.w	8002de6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	3361      	adds	r3, #97	; 0x61
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d17d      	bne.n	8002c78 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	3360      	adds	r3, #96	; 0x60
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	333f      	adds	r3, #63	; 0x3f
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d00a      	beq.n	8002bb8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333f      	adds	r3, #63	; 0x3f
 8002bb0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	f040 8100 	bne.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d113      	bne.n	8002be8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	3355      	adds	r3, #85	; 0x55
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	f083 0301 	eor.w	r3, r3, #1
 8002bd4:	b2d8      	uxtb	r0, r3
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3355      	adds	r3, #85	; 0x55
 8002be4:	4602      	mov	r2, r0
 8002be6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f040 80e3 	bne.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	334c      	adds	r3, #76	; 0x4c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80d8 	beq.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	212c      	movs	r1, #44	; 0x2c
 8002c0e:	fb01 f303 	mul.w	r3, r1, r3
 8002c12:	4413      	add	r3, r2
 8002c14:	334c      	adds	r3, #76	; 0x4c
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	202c      	movs	r0, #44	; 0x2c
 8002c1e:	fb00 f202 	mul.w	r2, r0, r2
 8002c22:	440a      	add	r2, r1
 8002c24:	3240      	adds	r2, #64	; 0x40
 8002c26:	8812      	ldrh	r2, [r2, #0]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	202c      	movs	r0, #44	; 0x2c
 8002c32:	fb00 f202 	mul.w	r2, r0, r2
 8002c36:	440a      	add	r2, r1
 8002c38:	3240      	adds	r2, #64	; 0x40
 8002c3a:	8812      	ldrh	r2, [r2, #0]
 8002c3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80b5 	beq.w	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	212c      	movs	r1, #44	; 0x2c
 8002c54:	fb01 f303 	mul.w	r3, r1, r3
 8002c58:	4413      	add	r3, r2
 8002c5a:	3355      	adds	r3, #85	; 0x55
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f083 0301 	eor.w	r3, r3, #1
 8002c62:	b2d8      	uxtb	r0, r3
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3355      	adds	r3, #85	; 0x55
 8002c72:	4602      	mov	r2, r0
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e09f      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	212c      	movs	r1, #44	; 0x2c
 8002c7e:	fb01 f303 	mul.w	r3, r1, r3
 8002c82:	4413      	add	r3, r2
 8002c84:	3361      	adds	r3, #97	; 0x61
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d109      	bne.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3360      	adds	r3, #96	; 0x60
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e08b      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	3361      	adds	r3, #97	; 0x61
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d109      	bne.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3360      	adds	r3, #96	; 0x60
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e077      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3361      	adds	r3, #97	; 0x61
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d109      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	2205      	movs	r2, #5
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e063      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3361      	adds	r3, #97	; 0x61
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b06      	cmp	r3, #6
 8002d02:	d009      	beq.n	8002d18 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d14f      	bne.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	335c      	adds	r3, #92	; 0x5c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	202c      	movs	r0, #44	; 0x2c
 8002d30:	fb00 f303 	mul.w	r3, r0, r3
 8002d34:	440b      	add	r3, r1
 8002d36:	335c      	adds	r3, #92	; 0x5c
 8002d38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	335c      	adds	r3, #92	; 0x5c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d912      	bls.n	8002d74 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	212c      	movs	r1, #44	; 0x2c
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	335c      	adds	r3, #92	; 0x5c
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3360      	adds	r3, #96	; 0x60
 8002d6e:	2204      	movs	r2, #4
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e021      	b.n	8002db8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3360      	adds	r3, #96	; 0x60
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	b2d9      	uxtb	r1, r3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	202c      	movs	r0, #44	; 0x2c
 8002dd4:	fb00 f303 	mul.w	r3, r0, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3360      	adds	r3, #96	; 0x60
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f005 fb1f 	bl	8008424 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002de6:	bf00      	nop
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b08a      	sub	sp, #40	; 0x28
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	0c5b      	lsrs	r3, r3, #17
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e22:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d004      	beq.n	8002e34 <HCD_RXQLVL_IRQHandler+0x46>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	f000 80a9 	beq.w	8002f84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e32:	e0aa      	b.n	8002f8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a6 	beq.w	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3344      	adds	r3, #68	; 0x44
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 809b 	beq.w	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	212c      	movs	r1, #44	; 0x2c
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3350      	adds	r3, #80	; 0x50
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	441a      	add	r2, r3
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	202c      	movs	r0, #44	; 0x2c
 8002e6c:	fb00 f303 	mul.w	r3, r0, r3
 8002e70:	440b      	add	r3, r1
 8002e72:	334c      	adds	r3, #76	; 0x4c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d87a      	bhi.n	8002f70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3344      	adds	r3, #68	; 0x44
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	b292      	uxth	r2, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f002 fb7a 	bl	800558c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3344      	adds	r3, #68	; 0x44
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	441a      	add	r2, r3
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	202c      	movs	r0, #44	; 0x2c
 8002eb2:	fb00 f303 	mul.w	r3, r0, r3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3344      	adds	r3, #68	; 0x44
 8002eba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3350      	adds	r3, #80	; 0x50
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	441a      	add	r2, r3
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	202c      	movs	r0, #44	; 0x2c
 8002ed6:	fb00 f303 	mul.w	r3, r0, r3
 8002eda:	440b      	add	r3, r1
 8002edc:	3350      	adds	r3, #80	; 0x50
 8002ede:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	0cdb      	lsrs	r3, r3, #19
 8002ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	212c      	movs	r1, #44	; 0x2c
 8002efc:	fb01 f303 	mul.w	r3, r1, r3
 8002f00:	4413      	add	r3, r2
 8002f02:	3340      	adds	r3, #64	; 0x40
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d13c      	bne.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d039      	beq.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3354      	adds	r3, #84	; 0x54
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2d8      	uxtb	r0, r3
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3354      	adds	r3, #84	; 0x54
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	701a      	strb	r2, [r3, #0]
      break;
 8002f6e:	e00b      	b.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3360      	adds	r3, #96	; 0x60
 8002f7e:	2204      	movs	r2, #4
 8002f80:	701a      	strb	r2, [r3, #0]
      break;
 8002f82:	e001      	b.n	8002f88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002f88:	bf00      	nop
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	3728      	adds	r7, #40	; 0x28
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fbe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d10b      	bne.n	8002fe2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f005 fa09 	bl	80083ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d132      	bne.n	8003052 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f043 0308 	orr.w	r3, r3, #8
 8002ff2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d126      	bne.n	800304c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d113      	bne.n	800302e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800300c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003010:	d106      	bne.n	8003020 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2102      	movs	r1, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f002 fc25 	bl	8005868 <USB_InitFSLSPClkSel>
 800301e:	e011      	b.n	8003044 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	4618      	mov	r0, r3
 8003028:	f002 fc1e 	bl	8005868 <USB_InitFSLSPClkSel>
 800302c:	e00a      	b.n	8003044 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d106      	bne.n	8003044 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800303c:	461a      	mov	r2, r3
 800303e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003042:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f005 f9fb 	bl	8008440 <HAL_HCD_PortEnabled_Callback>
 800304a:	e002      	b.n	8003052 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f005 fa05 	bl	800845c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b20      	cmp	r3, #32
 800305a:	d103      	bne.n	8003064 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f043 0320 	orr.w	r3, r3, #32
 8003062:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6013      	str	r3, [r2, #0]
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e1bd      	b.n	8003406 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a93      	ldr	r2, [pc, #588]	; (80032dc <HAL_I2C_Init+0x264>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_I2C_Init+0x3a>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a91      	ldr	r2, [pc, #580]	; (80032e0 <HAL_I2C_Init+0x268>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_I2C_Init+0x3a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <HAL_I2C_Init+0x26c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_I2C_Init+0x3a>
 80030a8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80030ac:	488e      	ldr	r0, [pc, #568]	; (80032e8 <HAL_I2C_Init+0x270>)
 80030ae:	f7fd fd86 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_I2C_Init+0x4c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4a8b      	ldr	r2, [pc, #556]	; (80032ec <HAL_I2C_Init+0x274>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d904      	bls.n	80030ce <HAL_I2C_Init+0x56>
 80030c4:	f240 11bf 	movw	r1, #447	; 0x1bf
 80030c8:	4887      	ldr	r0, [pc, #540]	; (80032e8 <HAL_I2C_Init+0x270>)
 80030ca:	f7fd fd78 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_I2C_Init+0x72>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030de:	d004      	beq.n	80030ea <HAL_I2C_Init+0x72>
 80030e0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80030e4:	4880      	ldr	r0, [pc, #512]	; (80032e8 <HAL_I2C_Init+0x270>)
 80030e6:	f7fd fd6a 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030f2:	f023 0303 	bic.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <HAL_I2C_Init+0x8c>
 80030fa:	f240 11c1 	movw	r1, #449	; 0x1c1
 80030fe:	487a      	ldr	r0, [pc, #488]	; (80032e8 <HAL_I2C_Init+0x270>)
 8003100:	f7fd fd5d 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800310c:	d009      	beq.n	8003122 <HAL_I2C_Init+0xaa>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003116:	d004      	beq.n	8003122 <HAL_I2C_Init+0xaa>
 8003118:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800311c:	4872      	ldr	r0, [pc, #456]	; (80032e8 <HAL_I2C_Init+0x270>)
 800311e:	f7fd fd4e 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d008      	beq.n	800313c <HAL_I2C_Init+0xc4>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d004      	beq.n	800313c <HAL_I2C_Init+0xc4>
 8003132:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003136:	486c      	ldr	r0, [pc, #432]	; (80032e8 <HAL_I2C_Init+0x270>)
 8003138:	f7fd fd41 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003144:	2b00      	cmp	r3, #0
 8003146:	d004      	beq.n	8003152 <HAL_I2C_Init+0xda>
 8003148:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800314c:	4866      	ldr	r0, [pc, #408]	; (80032e8 <HAL_I2C_Init+0x270>)
 800314e:	f7fd fd36 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d008      	beq.n	800316c <HAL_I2C_Init+0xf4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	2b40      	cmp	r3, #64	; 0x40
 8003160:	d004      	beq.n	800316c <HAL_I2C_Init+0xf4>
 8003162:	f240 11c5 	movw	r1, #453	; 0x1c5
 8003166:	4860      	ldr	r0, [pc, #384]	; (80032e8 <HAL_I2C_Init+0x270>)
 8003168:	f7fd fd29 	bl	8000bbe <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_I2C_Init+0x10e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d004      	beq.n	8003186 <HAL_I2C_Init+0x10e>
 800317c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003180:	4859      	ldr	r0, [pc, #356]	; (80032e8 <HAL_I2C_Init+0x270>)
 8003182:	f7fd fd1c 	bl	8000bbe <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd faa6 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0201 	bic.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031d8:	f001 fc40 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 80031dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4a43      	ldr	r2, [pc, #268]	; (80032f0 <HAL_I2C_Init+0x278>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d807      	bhi.n	80031f8 <HAL_I2C_Init+0x180>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <HAL_I2C_Init+0x27c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	bf94      	ite	ls
 80031f0:	2301      	movls	r3, #1
 80031f2:	2300      	movhi	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	e006      	b.n	8003206 <HAL_I2C_Init+0x18e>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <HAL_I2C_Init+0x280>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	bf94      	ite	ls
 8003200:	2301      	movls	r3, #1
 8003202:	2300      	movhi	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0fb      	b.n	8003406 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4a3a      	ldr	r2, [pc, #232]	; (80032fc <HAL_I2C_Init+0x284>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	0c9b      	lsrs	r3, r3, #18
 8003218:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <HAL_I2C_Init+0x278>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d802      	bhi.n	8003248 <HAL_I2C_Init+0x1d0>
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3301      	adds	r3, #1
 8003246:	e009      	b.n	800325c <HAL_I2C_Init+0x1e4>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800324e:	fb02 f303 	mul.w	r3, r2, r3
 8003252:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <HAL_I2C_Init+0x288>)
 8003254:	fba2 2303 	umull	r2, r3, r2, r3
 8003258:	099b      	lsrs	r3, r3, #6
 800325a:	3301      	adds	r3, #1
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	430b      	orrs	r3, r1
 8003262:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800326e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	491e      	ldr	r1, [pc, #120]	; (80032f0 <HAL_I2C_Init+0x278>)
 8003278:	428b      	cmp	r3, r1
 800327a:	d819      	bhi.n	80032b0 <HAL_I2C_Init+0x238>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1e59      	subs	r1, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	fbb1 f3f3 	udiv	r3, r1, r3
 800328a:	1c59      	adds	r1, r3, #1
 800328c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003290:	400b      	ands	r3, r1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_I2C_Init+0x234>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1e59      	subs	r1, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	e065      	b.n	8003378 <HAL_I2C_Init+0x300>
 80032ac:	2304      	movs	r3, #4
 80032ae:	e063      	b.n	8003378 <HAL_I2C_Init+0x300>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d125      	bne.n	8003304 <HAL_I2C_Init+0x28c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1e58      	subs	r0, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6859      	ldr	r1, [r3, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	440b      	add	r3, r1
 80032c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ca:	3301      	adds	r3, #1
 80032cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	e026      	b.n	800332a <HAL_I2C_Init+0x2b2>
 80032dc:	40005400 	.word	0x40005400
 80032e0:	40005800 	.word	0x40005800
 80032e4:	40005c00 	.word	0x40005c00
 80032e8:	08008bb0 	.word	0x08008bb0
 80032ec:	00061a80 	.word	0x00061a80
 80032f0:	000186a0 	.word	0x000186a0
 80032f4:	001e847f 	.word	0x001e847f
 80032f8:	003d08ff 	.word	0x003d08ff
 80032fc:	431bde83 	.word	0x431bde83
 8003300:	10624dd3 	.word	0x10624dd3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Init+0x2ba>
 800332e:	2301      	movs	r3, #1
 8003330:	e022      	b.n	8003378 <HAL_I2C_Init+0x300>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10e      	bne.n	8003358 <HAL_I2C_Init+0x2e0>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1e58      	subs	r0, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	440b      	add	r3, r1
 8003348:	fbb0 f3f3 	udiv	r3, r0, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003356:	e00f      	b.n	8003378 <HAL_I2C_Init+0x300>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6809      	ldr	r1, [r1, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6911      	ldr	r1, [r2, #16]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop

08003410 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e1e7      	b.n	80037f2 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a92      	ldr	r2, [pc, #584]	; (8003670 <HAL_I2S_Init+0x260>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d018      	beq.n	800345e <HAL_I2S_Init+0x4e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a90      	ldr	r2, [pc, #576]	; (8003674 <HAL_I2S_Init+0x264>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d013      	beq.n	800345e <HAL_I2S_Init+0x4e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a8f      	ldr	r2, [pc, #572]	; (8003678 <HAL_I2S_Init+0x268>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_I2S_Init+0x4e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a8d      	ldr	r2, [pc, #564]	; (800367c <HAL_I2S_Init+0x26c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_I2S_Init+0x4e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a8c      	ldr	r2, [pc, #560]	; (8003680 <HAL_I2S_Init+0x270>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_I2S_Init+0x4e>
 8003454:	f240 111b 	movw	r1, #283	; 0x11b
 8003458:	488a      	ldr	r0, [pc, #552]	; (8003684 <HAL_I2S_Init+0x274>)
 800345a:	f7fd fbb0 	bl	8000bbe <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d013      	beq.n	800348e <HAL_I2S_Init+0x7e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346e:	d00e      	beq.n	800348e <HAL_I2S_Init+0x7e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d009      	beq.n	800348e <HAL_I2S_Init+0x7e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003482:	d004      	beq.n	800348e <HAL_I2S_Init+0x7e>
 8003484:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8003488:	487e      	ldr	r0, [pc, #504]	; (8003684 <HAL_I2S_Init+0x274>)
 800348a:	f7fd fb98 	bl	8000bbe <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d014      	beq.n	80034c0 <HAL_I2S_Init+0xb0>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2b10      	cmp	r3, #16
 800349c:	d010      	beq.n	80034c0 <HAL_I2S_Init+0xb0>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d00c      	beq.n	80034c0 <HAL_I2S_Init+0xb0>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b30      	cmp	r3, #48	; 0x30
 80034ac:	d008      	beq.n	80034c0 <HAL_I2S_Init+0xb0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2bb0      	cmp	r3, #176	; 0xb0
 80034b4:	d004      	beq.n	80034c0 <HAL_I2S_Init+0xb0>
 80034b6:	f240 111d 	movw	r1, #285	; 0x11d
 80034ba:	4872      	ldr	r0, [pc, #456]	; (8003684 <HAL_I2S_Init+0x274>)
 80034bc:	f7fd fb7f 	bl	8000bbe <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d010      	beq.n	80034ea <HAL_I2S_Init+0xda>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d00c      	beq.n	80034ea <HAL_I2S_Init+0xda>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d008      	beq.n	80034ea <HAL_I2S_Init+0xda>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d004      	beq.n	80034ea <HAL_I2S_Init+0xda>
 80034e0:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80034e4:	4867      	ldr	r0, [pc, #412]	; (8003684 <HAL_I2S_Init+0x274>)
 80034e6:	f7fd fb6a 	bl	8000bbe <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f2:	d008      	beq.n	8003506 <HAL_I2S_Init+0xf6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d004      	beq.n	8003506 <HAL_I2S_Init+0xf6>
 80034fc:	f240 111f 	movw	r1, #287	; 0x11f
 8003500:	4860      	ldr	r0, [pc, #384]	; (8003684 <HAL_I2S_Init+0x274>)
 8003502:	f7fd fb5c 	bl	8000bbe <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800350e:	d304      	bcc.n	800351a <HAL_I2S_Init+0x10a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	4a5c      	ldr	r2, [pc, #368]	; (8003688 <HAL_I2S_Init+0x278>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d908      	bls.n	800352c <HAL_I2S_Init+0x11c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	2b02      	cmp	r3, #2
 8003520:	d004      	beq.n	800352c <HAL_I2S_Init+0x11c>
 8003522:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003526:	4857      	ldr	r0, [pc, #348]	; (8003684 <HAL_I2S_Init+0x274>)
 8003528:	f7fd fb49 	bl	8000bbe <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_I2S_Init+0x136>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d004      	beq.n	8003546 <HAL_I2S_Init+0x136>
 800353c:	f240 1121 	movw	r1, #289	; 0x121
 8003540:	4850      	ldr	r0, [pc, #320]	; (8003684 <HAL_I2S_Init+0x274>)
 8003542:	f7fd fb3c 	bl	8000bbe <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d008      	beq.n	8003560 <HAL_I2S_Init+0x150>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <HAL_I2S_Init+0x150>
 8003556:	f44f 7191 	mov.w	r1, #290	; 0x122
 800355a:	484a      	ldr	r0, [pc, #296]	; (8003684 <HAL_I2S_Init+0x274>)
 800355c:	f7fd fb2f 	bl	8000bbe <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a45      	ldr	r2, [pc, #276]	; (800368c <HAL_I2S_Init+0x27c>)
 8003578:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd f95c 	bl	8000838 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003596:	f023 030f 	bic.w	r3, r3, #15
 800359a:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2202      	movs	r2, #2
 80035a2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d073      	beq.n	8003694 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80035b4:	2310      	movs	r3, #16
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e001      	b.n	80035be <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80035ba:	2320      	movs	r3, #32
 80035bc:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d802      	bhi.n	80035cc <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f001 fc6f 	bl	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq>
 80035d2:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035dc:	d125      	bne.n	800362a <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d010      	beq.n	8003608 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	461a      	mov	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	3305      	adds	r3, #5
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	e01f      	b.n	8003648 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	3305      	adds	r3, #5
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	e00e      	b.n	8003648 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	3305      	adds	r3, #5
 8003646:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4a11      	ldr	r2, [pc, #68]	; (8003690 <HAL_I2S_Init+0x280>)
 800364c:	fba2 2303 	umull	r2, r3, r2, r3
 8003650:	08db      	lsrs	r3, r3, #3
 8003652:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	e016      	b.n	800369c <HAL_I2S_Init+0x28c>
 800366e:	bf00      	nop
 8003670:	40013000 	.word	0x40013000
 8003674:	40003800 	.word	0x40003800
 8003678:	40003c00 	.word	0x40003c00
 800367c:	40013400 	.word	0x40013400
 8003680:	40015000 	.word	0x40015000
 8003684:	08008be8 	.word	0x08008be8
 8003688:	0002ee00 	.word	0x0002ee00
 800368c:	08003903 	.word	0x08003903
 8003690:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003694:	2302      	movs	r3, #2
 8003696:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d902      	bls.n	80036a8 <HAL_I2S_Init+0x298>
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2bff      	cmp	r3, #255	; 0xff
 80036a6:	d907      	bls.n	80036b8 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	f043 0210 	orr.w	r2, r3, #16
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e09c      	b.n	80037f2 <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	ea42 0103 	orr.w	r1, r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036d6:	f023 030f 	bic.w	r3, r3, #15
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6851      	ldr	r1, [r2, #4]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	4311      	orrs	r1, r2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68d2      	ldr	r2, [r2, #12]
 80036e8:	4311      	orrs	r1, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6992      	ldr	r2, [r2, #24]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	431a      	orrs	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <HAL_I2S_Init+0x306>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d004      	beq.n	8003716 <HAL_I2S_Init+0x306>
 800370c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003710:	483a      	ldr	r0, [pc, #232]	; (80037fc <HAL_I2S_Init+0x3ec>)
 8003712:	f7fd fa54 	bl	8000bbe <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d161      	bne.n	80037e2 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a37      	ldr	r2, [pc, #220]	; (8003800 <HAL_I2S_Init+0x3f0>)
 8003722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a36      	ldr	r2, [pc, #216]	; (8003804 <HAL_I2S_Init+0x3f4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <HAL_I2S_Init+0x322>
 800372e:	4b36      	ldr	r3, [pc, #216]	; (8003808 <HAL_I2S_Init+0x3f8>)
 8003730:	e001      	b.n	8003736 <HAL_I2S_Init+0x326>
 8003732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	4931      	ldr	r1, [pc, #196]	; (8003804 <HAL_I2S_Init+0x3f4>)
 800373e:	428a      	cmp	r2, r1
 8003740:	d101      	bne.n	8003746 <HAL_I2S_Init+0x336>
 8003742:	4a31      	ldr	r2, [pc, #196]	; (8003808 <HAL_I2S_Init+0x3f8>)
 8003744:	e001      	b.n	800374a <HAL_I2S_Init+0x33a>
 8003746:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800374a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800374e:	f023 030f 	bic.w	r3, r3, #15
 8003752:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <HAL_I2S_Init+0x3f4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_I2S_Init+0x352>
 800375e:	4b2a      	ldr	r3, [pc, #168]	; (8003808 <HAL_I2S_Init+0x3f8>)
 8003760:	e001      	b.n	8003766 <HAL_I2S_Init+0x356>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	2202      	movs	r2, #2
 8003768:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a25      	ldr	r2, [pc, #148]	; (8003804 <HAL_I2S_Init+0x3f4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d101      	bne.n	8003778 <HAL_I2S_Init+0x368>
 8003774:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_I2S_Init+0x3f8>)
 8003776:	e001      	b.n	800377c <HAL_I2S_Init+0x36c>
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003788:	d003      	beq.n	8003792 <HAL_I2S_Init+0x382>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	e001      	b.n	800379e <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037a8:	4313      	orrs	r3, r2
 80037aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037b2:	4313      	orrs	r3, r2
 80037b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037bc:	4313      	orrs	r3, r2
 80037be:	b29a      	uxth	r2, r3
 80037c0:	897b      	ldrh	r3, [r7, #10]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037ca:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0c      	ldr	r2, [pc, #48]	; (8003804 <HAL_I2S_Init+0x3f4>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_I2S_Init+0x3ca>
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_I2S_Init+0x3f8>)
 80037d8:	e001      	b.n	80037de <HAL_I2S_Init+0x3ce>
 80037da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037de:	897a      	ldrh	r2, [r7, #10]
 80037e0:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	08008be8 	.word	0x08008be8
 8003800:	08003a19 	.word	0x08003a19
 8003804:	40003800 	.word	0x40003800
 8003808:	40003400 	.word	0x40003400

0800380c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	881a      	ldrh	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c9a      	adds	r2, r3, #2
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10e      	bne.n	800389c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800388c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffb8 	bl	800380c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	b292      	uxth	r2, r2
 80038b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	1c9a      	adds	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	3b01      	subs	r3, #1
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10e      	bne.n	80038fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ff93 	bl	8003820 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b04      	cmp	r3, #4
 800391c:	d13a      	bne.n	8003994 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d109      	bne.n	800393c <I2S_IRQHandler+0x3a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d102      	bne.n	800393c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ffb4 	bl	80038a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b40      	cmp	r3, #64	; 0x40
 8003944:	d126      	bne.n	8003994 <I2S_IRQHandler+0x92>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b20      	cmp	r3, #32
 8003952:	d11f      	bne.n	8003994 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003962:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f043 0202 	orr.w	r2, r3, #2
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff50 	bl	8003834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b03      	cmp	r3, #3
 800399e:	d136      	bne.n	8003a0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d109      	bne.n	80039be <I2S_IRQHandler+0xbc>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d102      	bne.n	80039be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff45 	bl	8003848 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d122      	bne.n	8003a0e <I2S_IRQHandler+0x10c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0320 	and.w	r3, r3, #32
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d11b      	bne.n	8003a0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	f043 0204 	orr.w	r2, r3, #4
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff13 	bl	8003834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a92      	ldr	r2, [pc, #584]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d101      	bne.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a32:	4b92      	ldr	r3, [pc, #584]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a34:	e001      	b.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a8b      	ldr	r2, [pc, #556]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a50:	4b8a      	ldr	r3, [pc, #552]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a52:	e001      	b.n	8003a58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a64:	d004      	beq.n	8003a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 8099 	bne.w	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d107      	bne.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f925 	bl	8003cd4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d107      	bne.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f9c8 	bl	8003e34 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d13a      	bne.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d035      	beq.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6e      	ldr	r2, [pc, #440]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ac2:	4b6e      	ldr	r3, [pc, #440]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ac4:	e001      	b.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ac6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4969      	ldr	r1, [pc, #420]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad2:	428b      	cmp	r3, r1
 8003ad4:	d101      	bne.n	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ad6:	4b69      	ldr	r3, [pc, #420]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad8:	e001      	b.n	8003ade <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ade:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003af2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b16:	f043 0202 	orr.w	r2, r3, #2
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff fe88 	bl	8003834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	f040 80c3 	bne.w	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80bd 	beq.w	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a49      	ldr	r2, [pc, #292]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b56:	4b49      	ldr	r3, [pc, #292]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4944      	ldr	r1, [pc, #272]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b66:	428b      	cmp	r3, r1
 8003b68:	d101      	bne.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b6a:	4b44      	ldr	r3, [pc, #272]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b6c:	e001      	b.n	8003b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fe4a 	bl	8003834 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba0:	e089      	b.n	8003cb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d107      	bne.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f8be 	bl	8003d38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f8fd 	bl	8003dd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d12f      	bne.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02a      	beq.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c06:	e001      	b.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4919      	ldr	r1, [pc, #100]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d101      	bne.n	8003c1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c18:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c1a:	e001      	b.n	8003c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f043 0202 	orr.w	r2, r3, #2
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fdfa 	bl	8003834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d136      	bne.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d031      	beq.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a07      	ldr	r2, [pc, #28]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c60:	e001      	b.n	8003c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4902      	ldr	r1, [pc, #8]	; (8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c6e:	428b      	cmp	r3, r1
 8003c70:	d106      	bne.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003c72:	4b02      	ldr	r3, [pc, #8]	; (8003c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c74:	e006      	b.n	8003c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003c76:	bf00      	nop
 8003c78:	40003800 	.word	0x40003800
 8003c7c:	40003400 	.word	0x40003400
 8003c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c88:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff fdc0 	bl	8003834 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	e000      	b.n	8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cb6:	bf00      	nop
}
 8003cb8:	bf00      	nop
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	1c99      	adds	r1, r3, #2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d113      	bne.n	8003d2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ffc9 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c99      	adds	r1, r3, #2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6251      	str	r1, [r2, #36]	; 0x24
 8003d4a:	8819      	ldrh	r1, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <I2SEx_TxISR_I2SExt+0x22>
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <I2SEx_TxISR_I2SExt+0x94>)
 8003d58:	e001      	b.n	8003d5e <I2SEx_TxISR_I2SExt+0x26>
 8003d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5e:	460a      	mov	r2, r1
 8003d60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d121      	bne.n	8003dbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <I2SEx_TxISR_I2SExt+0x50>
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <I2SEx_TxISR_I2SExt+0x94>)
 8003d86:	e001      	b.n	8003d8c <I2SEx_TxISR_I2SExt+0x54>
 8003d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	490d      	ldr	r1, [pc, #52]	; (8003dc8 <I2SEx_TxISR_I2SExt+0x90>)
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d101      	bne.n	8003d9c <I2SEx_TxISR_I2SExt+0x64>
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <I2SEx_TxISR_I2SExt+0x94>)
 8003d9a:	e001      	b.n	8003da0 <I2SEx_TxISR_I2SExt+0x68>
 8003d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff81 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40003800 	.word	0x40003800
 8003dcc:	40003400 	.word	0x40003400

08003dd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68d8      	ldr	r0, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	1c99      	adds	r1, r3, #2
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003de8:	b282      	uxth	r2, r0
 8003dea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d113      	bne.n	8003e2c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e12:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff4a 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	; (8003ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <I2SEx_RxISR_I2SExt+0x16>
 8003e46:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e48:	e001      	b.n	8003e4e <I2SEx_RxISR_I2SExt+0x1a>
 8003e4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4e:	68d8      	ldr	r0, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	1c99      	adds	r1, r3, #2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e5a:	b282      	uxth	r2, r0
 8003e5c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d121      	bne.n	8003eba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a12      	ldr	r2, [pc, #72]	; (8003ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d101      	bne.n	8003e84 <I2SEx_RxISR_I2SExt+0x50>
 8003e80:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e82:	e001      	b.n	8003e88 <I2SEx_RxISR_I2SExt+0x54>
 8003e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <I2SEx_RxISR_I2SExt+0x90>)
 8003e90:	428b      	cmp	r3, r1
 8003e92:	d101      	bne.n	8003e98 <I2SEx_RxISR_I2SExt+0x64>
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <I2SEx_RxISR_I2SExt+0x94>)
 8003e96:	e001      	b.n	8003e9c <I2SEx_RxISR_I2SExt+0x68>
 8003e98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ea0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d106      	bne.n	8003eba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff03 	bl	8003cc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eba:	bf00      	nop
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40003800 	.word	0x40003800
 8003ec8:	40003400 	.word	0x40003400

08003ecc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e314      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b0f      	cmp	r3, #15
 8003ee4:	d903      	bls.n	8003eee <HAL_RCC_OscConfig+0x22>
 8003ee6:	21e6      	movs	r1, #230	; 0xe6
 8003ee8:	4897      	ldr	r0, [pc, #604]	; (8004148 <HAL_RCC_OscConfig+0x27c>)
 8003eea:	f7fc fe68 	bl	8000bbe <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8088 	beq.w	800400c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <HAL_RCC_OscConfig+0x54>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0c:	d008      	beq.n	8003f20 <HAL_RCC_OscConfig+0x54>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f16:	d003      	beq.n	8003f20 <HAL_RCC_OscConfig+0x54>
 8003f18:	21eb      	movs	r1, #235	; 0xeb
 8003f1a:	488b      	ldr	r0, [pc, #556]	; (8004148 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	f7fc fe4f 	bl	8000bbe <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f20:	4b8a      	ldr	r3, [pc, #552]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d00c      	beq.n	8003f46 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f2c:	4b87      	ldr	r3, [pc, #540]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d112      	bne.n	8003f5e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f38:	4b84      	ldr	r3, [pc, #528]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f44:	d10b      	bne.n	8003f5e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f46:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d05b      	beq.n	800400a <HAL_RCC_OscConfig+0x13e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d157      	bne.n	800400a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e2d4      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_OscConfig+0xaa>
 8003f68:	4b78      	ldr	r3, [pc, #480]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a77      	ldr	r2, [pc, #476]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	e01d      	b.n	8003fb2 <HAL_RCC_OscConfig+0xe6>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7e:	d10c      	bne.n	8003f9a <HAL_RCC_OscConfig+0xce>
 8003f80:	4b72      	ldr	r3, [pc, #456]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a71      	ldr	r2, [pc, #452]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b6f      	ldr	r3, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a6e      	ldr	r2, [pc, #440]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e00b      	b.n	8003fb2 <HAL_RCC_OscConfig+0xe6>
 8003f9a:	4b6c      	ldr	r3, [pc, #432]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a6b      	ldr	r2, [pc, #428]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b69      	ldr	r3, [pc, #420]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a68      	ldr	r2, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d013      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fc ffbd 	bl	8000f38 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc2:	f7fc ffb9 	bl	8000f38 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	; 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e299      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd4:	4b5d      	ldr	r3, [pc, #372]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0xf6>
 8003fe0:	e014      	b.n	800400c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fc ffa9 	bl	8000f38 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fea:	f7fc ffa5 	bl	8000f38 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b64      	cmp	r3, #100	; 0x64
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e285      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f0      	bne.n	8003fea <HAL_RCC_OscConfig+0x11e>
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d079      	beq.n	800410c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCC_OscConfig+0x166>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d004      	beq.n	8004032 <HAL_RCC_OscConfig+0x166>
 8004028:	f240 111d 	movw	r1, #285	; 0x11d
 800402c:	4846      	ldr	r0, [pc, #280]	; (8004148 <HAL_RCC_OscConfig+0x27c>)
 800402e:	f7fc fdc6 	bl	8000bbe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b1f      	cmp	r3, #31
 8004038:	d904      	bls.n	8004044 <HAL_RCC_OscConfig+0x178>
 800403a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800403e:	4842      	ldr	r0, [pc, #264]	; (8004148 <HAL_RCC_OscConfig+0x27c>)
 8004040:	f7fc fdbd 	bl	8000bbe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004044:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 030c 	and.w	r3, r3, #12
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004050:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004058:	2b08      	cmp	r3, #8
 800405a:	d11c      	bne.n	8004096 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405c:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCC_OscConfig+0x280>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d116      	bne.n	8004096 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004068:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_RCC_OscConfig+0x280>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_OscConfig+0x1b4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d001      	beq.n	8004080 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e243      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004080:	4b32      	ldr	r3, [pc, #200]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	492f      	ldr	r1, [pc, #188]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004094:	e03a      	b.n	800410c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d020      	beq.n	80040e0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409e:	4b2c      	ldr	r3, [pc, #176]	; (8004150 <HAL_RCC_OscConfig+0x284>)
 80040a0:	2201      	movs	r2, #1
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a4:	f7fc ff48 	bl	8000f38 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ac:	f7fc ff44 	bl	8000f38 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e224      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040be:	4b23      	ldr	r3, [pc, #140]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	491c      	ldr	r1, [pc, #112]	; (800414c <HAL_RCC_OscConfig+0x280>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
 80040de:	e015      	b.n	800410c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e0:	4b1b      	ldr	r3, [pc, #108]	; (8004150 <HAL_RCC_OscConfig+0x284>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e6:	f7fc ff27 	bl	8000f38 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ee:	f7fc ff23 	bl	8000f38 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e203      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004100:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_RCC_OscConfig+0x280>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d045      	beq.n	80041a4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_OscConfig+0x266>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d004      	beq.n	8004132 <HAL_RCC_OscConfig+0x266>
 8004128:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800412c:	4806      	ldr	r0, [pc, #24]	; (8004148 <HAL_RCC_OscConfig+0x27c>)
 800412e:	f7fc fd46 	bl	8000bbe <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d01e      	beq.n	8004178 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_RCC_OscConfig+0x288>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fc fefa 	bl	8000f38 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	e010      	b.n	800416a <HAL_RCC_OscConfig+0x29e>
 8004148:	08008c20 	.word	0x08008c20
 800414c:	40023800 	.word	0x40023800
 8004150:	42470000 	.word	0x42470000
 8004154:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004158:	f7fc feee 	bl	8000f38 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1ce      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	4b5e      	ldr	r3, [pc, #376]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x28c>
 8004176:	e015      	b.n	80041a4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004178:	4b5b      	ldr	r3, [pc, #364]	; (80042e8 <HAL_RCC_OscConfig+0x41c>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7fc fedb 	bl	8000f38 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004186:	f7fc fed7 	bl	8000f38 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1b7      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b52      	ldr	r3, [pc, #328]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80b0 	beq.w	8004312 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <HAL_RCC_OscConfig+0x30c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d008      	beq.n	80041d8 <HAL_RCC_OscConfig+0x30c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b05      	cmp	r3, #5
 80041cc:	d004      	beq.n	80041d8 <HAL_RCC_OscConfig+0x30c>
 80041ce:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80041d2:	4846      	ldr	r0, [pc, #280]	; (80042ec <HAL_RCC_OscConfig+0x420>)
 80041d4:	f7fc fcf3 	bl	8000bbe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041d8:	4b42      	ldr	r3, [pc, #264]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	2300      	movs	r3, #0
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	4b3e      	ldr	r3, [pc, #248]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	4a3d      	ldr	r2, [pc, #244]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f2:	6413      	str	r3, [r2, #64]	; 0x40
 80041f4:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004204:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <HAL_RCC_OscConfig+0x424>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d118      	bne.n	8004242 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004210:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_RCC_OscConfig+0x424>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a36      	ldr	r2, [pc, #216]	; (80042f0 <HAL_RCC_OscConfig+0x424>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421c:	f7fc fe8c 	bl	8000f38 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fc fe88 	bl	8000f38 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e168      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <HAL_RCC_OscConfig+0x424>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d106      	bne.n	8004258 <HAL_RCC_OscConfig+0x38c>
 800424a:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a25      	ldr	r2, [pc, #148]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	; 0x70
 8004256:	e01c      	b.n	8004292 <HAL_RCC_OscConfig+0x3c6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b05      	cmp	r3, #5
 800425e:	d10c      	bne.n	800427a <HAL_RCC_OscConfig+0x3ae>
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 8004266:	f043 0304 	orr.w	r3, r3, #4
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
 8004278:	e00b      	b.n	8004292 <HAL_RCC_OscConfig+0x3c6>
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 800427c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427e:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
 8004286:	4b17      	ldr	r3, [pc, #92]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 8004288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428a:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d015      	beq.n	80042c6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fc fe4d 	bl	8000f38 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fc fe49 	bl	8000f38 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e127      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_RCC_OscConfig+0x418>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0ee      	beq.n	80042a2 <HAL_RCC_OscConfig+0x3d6>
 80042c4:	e01c      	b.n	8004300 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c6:	f7fc fe37 	bl	8000f38 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042cc:	e012      	b.n	80042f4 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fc fe33 	bl	8000f38 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d909      	bls.n	80042f4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e111      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	42470e80 	.word	0x42470e80
 80042ec:	08008c20 	.word	0x08008c20
 80042f0:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f4:	4b86      	ldr	r3, [pc, #536]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e6      	bne.n	80042ce <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d105      	bne.n	8004312 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004306:	4b82      	ldr	r3, [pc, #520]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a81      	ldr	r2, [pc, #516]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 800430c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <HAL_RCC_OscConfig+0x468>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d008      	beq.n	8004334 <HAL_RCC_OscConfig+0x468>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d004      	beq.n	8004334 <HAL_RCC_OscConfig+0x468>
 800432a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800432e:	4879      	ldr	r0, [pc, #484]	; (8004514 <HAL_RCC_OscConfig+0x648>)
 8004330:	f7fc fc45 	bl	8000bbe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80e4 	beq.w	8004506 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800433e:	4b74      	ldr	r3, [pc, #464]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b08      	cmp	r3, #8
 8004348:	f000 80a5 	beq.w	8004496 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b02      	cmp	r3, #2
 8004352:	f040 8089 	bne.w	8004468 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d009      	beq.n	8004372 <HAL_RCC_OscConfig+0x4a6>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004366:	d004      	beq.n	8004372 <HAL_RCC_OscConfig+0x4a6>
 8004368:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 800436c:	4869      	ldr	r0, [pc, #420]	; (8004514 <HAL_RCC_OscConfig+0x648>)
 800436e:	f7fc fc26 	bl	8000bbe <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	2b3f      	cmp	r3, #63	; 0x3f
 8004378:	d904      	bls.n	8004384 <HAL_RCC_OscConfig+0x4b8>
 800437a:	f240 11d7 	movw	r1, #471	; 0x1d7
 800437e:	4865      	ldr	r0, [pc, #404]	; (8004514 <HAL_RCC_OscConfig+0x648>)
 8004380:	f7fc fc1d 	bl	8000bbe <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b31      	cmp	r3, #49	; 0x31
 800438a:	d904      	bls.n	8004396 <HAL_RCC_OscConfig+0x4ca>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004394:	d904      	bls.n	80043a0 <HAL_RCC_OscConfig+0x4d4>
 8004396:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800439a:	485e      	ldr	r0, [pc, #376]	; (8004514 <HAL_RCC_OscConfig+0x648>)
 800439c:	f7fc fc0f 	bl	8000bbe <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d010      	beq.n	80043ca <HAL_RCC_OscConfig+0x4fe>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d00c      	beq.n	80043ca <HAL_RCC_OscConfig+0x4fe>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	2b06      	cmp	r3, #6
 80043b6:	d008      	beq.n	80043ca <HAL_RCC_OscConfig+0x4fe>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d004      	beq.n	80043ca <HAL_RCC_OscConfig+0x4fe>
 80043c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80043c4:	4853      	ldr	r0, [pc, #332]	; (8004514 <HAL_RCC_OscConfig+0x648>)
 80043c6:	f7fc fbfa 	bl	8000bbe <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d903      	bls.n	80043da <HAL_RCC_OscConfig+0x50e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	2b0f      	cmp	r3, #15
 80043d8:	d904      	bls.n	80043e4 <HAL_RCC_OscConfig+0x518>
 80043da:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80043de:	484d      	ldr	r0, [pc, #308]	; (8004514 <HAL_RCC_OscConfig+0x648>)
 80043e0:	f7fc fbed 	bl	8000bbe <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b4c      	ldr	r3, [pc, #304]	; (8004518 <HAL_RCC_OscConfig+0x64c>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fc fda5 	bl	8000f38 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fc fda1 	bl	8000f38 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e081      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004404:	4b42      	ldr	r3, [pc, #264]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	019b      	lsls	r3, r3, #6
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	3b01      	subs	r3, #1
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	4936      	ldr	r1, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800443a:	4b37      	ldr	r3, [pc, #220]	; (8004518 <HAL_RCC_OscConfig+0x64c>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fc fd7a 	bl	8000f38 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fc fd76 	bl	8000f38 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e056      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b2d      	ldr	r3, [pc, #180]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x57c>
 8004466:	e04e      	b.n	8004506 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <HAL_RCC_OscConfig+0x64c>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fc fd63 	bl	8000f38 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004476:	f7fc fd5f 	bl	8000f38 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e03f      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004488:	4b21      	ldr	r3, [pc, #132]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x5aa>
 8004494:	e037      	b.n	8004506 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e032      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x644>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d028      	beq.n	8004502 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d121      	bne.n	8004502 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d11a      	bne.n	8004502 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d2:	4013      	ands	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	40023800 	.word	0x40023800
 8004514:	08008c20 	.word	0x08008c20
 8004518:	42470060 	.word	0x42470060

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e174      	b.n	800481a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_RCC_ClockConfig+0x24>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b0f      	cmp	r3, #15
 800453e:	d904      	bls.n	800454a <HAL_RCC_ClockConfig+0x2e>
 8004540:	f240 215a 	movw	r1, #602	; 0x25a
 8004544:	487b      	ldr	r0, [pc, #492]	; (8004734 <HAL_RCC_ClockConfig+0x218>)
 8004546:	f7fc fb3a 	bl	8000bbe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d019      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d016      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d013      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b03      	cmp	r3, #3
 8004560:	d010      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b04      	cmp	r3, #4
 8004566:	d00d      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d00a      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b06      	cmp	r3, #6
 8004572:	d007      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b07      	cmp	r3, #7
 8004578:	d004      	beq.n	8004584 <HAL_RCC_ClockConfig+0x68>
 800457a:	f240 215b 	movw	r1, #603	; 0x25b
 800457e:	486d      	ldr	r0, [pc, #436]	; (8004734 <HAL_RCC_ClockConfig+0x218>)
 8004580:	f7fc fb1d 	bl	8000bbe <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <HAL_RCC_ClockConfig+0x21c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d90c      	bls.n	80045ac <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b69      	ldr	r3, [pc, #420]	; (8004738 <HAL_RCC_ClockConfig+0x21c>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b67      	ldr	r3, [pc, #412]	; (8004738 <HAL_RCC_ClockConfig+0x21c>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e136      	b.n	800481a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d049      	beq.n	800464c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b5d      	ldr	r3, [pc, #372]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a5c      	ldr	r2, [pc, #368]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80045ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b57      	ldr	r3, [pc, #348]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a56      	ldr	r2, [pc, #344]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80045e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d024      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d020      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b90      	cmp	r3, #144	; 0x90
 80045fe:	d01c      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2ba0      	cmp	r3, #160	; 0xa0
 8004606:	d018      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2bb0      	cmp	r3, #176	; 0xb0
 800460e:	d014      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2bc0      	cmp	r3, #192	; 0xc0
 8004616:	d010      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2bd0      	cmp	r3, #208	; 0xd0
 800461e:	d00c      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2be0      	cmp	r3, #224	; 0xe0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2bf0      	cmp	r3, #240	; 0xf0
 800462e:	d004      	beq.n	800463a <HAL_RCC_ClockConfig+0x11e>
 8004630:	f240 217e 	movw	r1, #638	; 0x27e
 8004634:	483f      	ldr	r0, [pc, #252]	; (8004734 <HAL_RCC_ClockConfig+0x218>)
 8004636:	f7fc fac2 	bl	8000bbe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800463a:	4b40      	ldr	r3, [pc, #256]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	493d      	ldr	r1, [pc, #244]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 8004648:	4313      	orrs	r3, r2
 800464a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	d059      	beq.n	800470c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d010      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d00c      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d004      	beq.n	8004682 <HAL_RCC_ClockConfig+0x166>
 8004678:	f240 2185 	movw	r1, #645	; 0x285
 800467c:	482d      	ldr	r0, [pc, #180]	; (8004734 <HAL_RCC_ClockConfig+0x218>)
 800467e:	f7fc fa9e 	bl	8000bbe <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468a:	4b2c      	ldr	r3, [pc, #176]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d119      	bne.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0bf      	b.n	800481a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d109      	bne.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e0af      	b.n	800481a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ba:	4b20      	ldr	r3, [pc, #128]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e0a7      	b.n	800481a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 0203 	bic.w	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	4919      	ldr	r1, [pc, #100]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046dc:	f7fc fc2c 	bl	8000f38 <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fc fc28 	bl	8000f38 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e08f      	b.n	800481a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <HAL_RCC_ClockConfig+0x220>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 020c 	and.w	r2, r3, #12
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	429a      	cmp	r2, r3
 800470a:	d1eb      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <HAL_RCC_ClockConfig+0x21c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	429a      	cmp	r2, r3
 8004718:	d212      	bcs.n	8004740 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471a:	4b07      	ldr	r3, [pc, #28]	; (8004738 <HAL_RCC_ClockConfig+0x21c>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_ClockConfig+0x21c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d007      	beq.n	8004740 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e072      	b.n	800481a <HAL_RCC_ClockConfig+0x2fe>
 8004734:	08008c20 	.word	0x08008c20
 8004738:	40023c00 	.word	0x40023c00
 800473c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d025      	beq.n	8004798 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d018      	beq.n	8004786 <HAL_RCC_ClockConfig+0x26a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800475c:	d013      	beq.n	8004786 <HAL_RCC_ClockConfig+0x26a>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004766:	d00e      	beq.n	8004786 <HAL_RCC_ClockConfig+0x26a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004770:	d009      	beq.n	8004786 <HAL_RCC_ClockConfig+0x26a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800477a:	d004      	beq.n	8004786 <HAL_RCC_ClockConfig+0x26a>
 800477c:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004780:	4828      	ldr	r0, [pc, #160]	; (8004824 <HAL_RCC_ClockConfig+0x308>)
 8004782:	f7fc fa1c 	bl	8000bbe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004786:	4b28      	ldr	r3, [pc, #160]	; (8004828 <HAL_RCC_ClockConfig+0x30c>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	4925      	ldr	r1, [pc, #148]	; (8004828 <HAL_RCC_ClockConfig+0x30c>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d026      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_RCC_ClockConfig+0x2c2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	d013      	beq.n	80047de <HAL_RCC_ClockConfig+0x2c2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047be:	d00e      	beq.n	80047de <HAL_RCC_ClockConfig+0x2c2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047c8:	d009      	beq.n	80047de <HAL_RCC_ClockConfig+0x2c2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80047d2:	d004      	beq.n	80047de <HAL_RCC_ClockConfig+0x2c2>
 80047d4:	f240 21ca 	movw	r1, #714	; 0x2ca
 80047d8:	4812      	ldr	r0, [pc, #72]	; (8004824 <HAL_RCC_ClockConfig+0x308>)
 80047da:	f7fc f9f0 	bl	8000bbe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <HAL_RCC_ClockConfig+0x30c>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	490e      	ldr	r1, [pc, #56]	; (8004828 <HAL_RCC_ClockConfig+0x30c>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047f2:	f000 f821 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80047f6:	4602      	mov	r2, r0
 80047f8:	4b0b      	ldr	r3, [pc, #44]	; (8004828 <HAL_RCC_ClockConfig+0x30c>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	490a      	ldr	r1, [pc, #40]	; (800482c <HAL_RCC_ClockConfig+0x310>)
 8004804:	5ccb      	ldrb	r3, [r1, r3]
 8004806:	fa22 f303 	lsr.w	r3, r2, r3
 800480a:	4a09      	ldr	r2, [pc, #36]	; (8004830 <HAL_RCC_ClockConfig+0x314>)
 800480c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_RCC_ClockConfig+0x318>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fb4c 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	08008c20 	.word	0x08008c20
 8004828:	40023800 	.word	0x40023800
 800482c:	08008cd0 	.word	0x08008cd0
 8004830:	20000000 	.word	0x20000000
 8004834:	20000004 	.word	0x20000004

08004838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b094      	sub	sp, #80	; 0x50
 800483e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	647b      	str	r3, [r7, #68]	; 0x44
 8004844:	2300      	movs	r3, #0
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	2300      	movs	r3, #0
 800484a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004850:	4b79      	ldr	r3, [pc, #484]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d00d      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x40>
 800485c:	2b08      	cmp	r3, #8
 800485e:	f200 80e1 	bhi.w	8004a24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x34>
 8004866:	2b04      	cmp	r3, #4
 8004868:	d003      	beq.n	8004872 <HAL_RCC_GetSysClockFreq+0x3a>
 800486a:	e0db      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800486c:	4b73      	ldr	r3, [pc, #460]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x204>)
 800486e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004870:	e0db      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004872:	4b73      	ldr	r3, [pc, #460]	; (8004a40 <HAL_RCC_GetSysClockFreq+0x208>)
 8004874:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004876:	e0d8      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004878:	4b6f      	ldr	r3, [pc, #444]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004880:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004882:	4b6d      	ldr	r3, [pc, #436]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d063      	beq.n	8004956 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488e:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	099b      	lsrs	r3, r3, #6
 8004894:	2200      	movs	r2, #0
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
 8004898:	63fa      	str	r2, [r7, #60]	; 0x3c
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a0:	633b      	str	r3, [r7, #48]	; 0x30
 80048a2:	2300      	movs	r3, #0
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
 80048a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048aa:	4622      	mov	r2, r4
 80048ac:	462b      	mov	r3, r5
 80048ae:	f04f 0000 	mov.w	r0, #0
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	0159      	lsls	r1, r3, #5
 80048b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048bc:	0150      	lsls	r0, r2, #5
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4621      	mov	r1, r4
 80048c4:	1a51      	subs	r1, r2, r1
 80048c6:	6139      	str	r1, [r7, #16]
 80048c8:	4629      	mov	r1, r5
 80048ca:	eb63 0301 	sbc.w	r3, r3, r1
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048dc:	4659      	mov	r1, fp
 80048de:	018b      	lsls	r3, r1, #6
 80048e0:	4651      	mov	r1, sl
 80048e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048e6:	4651      	mov	r1, sl
 80048e8:	018a      	lsls	r2, r1, #6
 80048ea:	4651      	mov	r1, sl
 80048ec:	ebb2 0801 	subs.w	r8, r2, r1
 80048f0:	4659      	mov	r1, fp
 80048f2:	eb63 0901 	sbc.w	r9, r3, r1
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800490a:	4690      	mov	r8, r2
 800490c:	4699      	mov	r9, r3
 800490e:	4623      	mov	r3, r4
 8004910:	eb18 0303 	adds.w	r3, r8, r3
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	462b      	mov	r3, r5
 8004918:	eb49 0303 	adc.w	r3, r9, r3
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800492a:	4629      	mov	r1, r5
 800492c:	024b      	lsls	r3, r1, #9
 800492e:	4621      	mov	r1, r4
 8004930:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004934:	4621      	mov	r1, r4
 8004936:	024a      	lsls	r2, r1, #9
 8004938:	4610      	mov	r0, r2
 800493a:	4619      	mov	r1, r3
 800493c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493e:	2200      	movs	r2, #0
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004948:	f7fb fc46 	bl	80001d8 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4613      	mov	r3, r2
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004954:	e058      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004956:	4b38      	ldr	r3, [pc, #224]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	2200      	movs	r2, #0
 800495e:	4618      	mov	r0, r3
 8004960:	4611      	mov	r1, r2
 8004962:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004966:	623b      	str	r3, [r7, #32]
 8004968:	2300      	movs	r3, #0
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004970:	4642      	mov	r2, r8
 8004972:	464b      	mov	r3, r9
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	0159      	lsls	r1, r3, #5
 800497e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004982:	0150      	lsls	r0, r2, #5
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4641      	mov	r1, r8
 800498a:	ebb2 0a01 	subs.w	sl, r2, r1
 800498e:	4649      	mov	r1, r9
 8004990:	eb63 0b01 	sbc.w	fp, r3, r1
 8004994:	f04f 0200 	mov.w	r2, #0
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049a8:	ebb2 040a 	subs.w	r4, r2, sl
 80049ac:	eb63 050b 	sbc.w	r5, r3, fp
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	00eb      	lsls	r3, r5, #3
 80049ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049be:	00e2      	lsls	r2, r4, #3
 80049c0:	4614      	mov	r4, r2
 80049c2:	461d      	mov	r5, r3
 80049c4:	4643      	mov	r3, r8
 80049c6:	18e3      	adds	r3, r4, r3
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	464b      	mov	r3, r9
 80049cc:	eb45 0303 	adc.w	r3, r5, r3
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049de:	4629      	mov	r1, r5
 80049e0:	028b      	lsls	r3, r1, #10
 80049e2:	4621      	mov	r1, r4
 80049e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049e8:	4621      	mov	r1, r4
 80049ea:	028a      	lsls	r2, r1, #10
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f2:	2200      	movs	r2, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	61fa      	str	r2, [r7, #28]
 80049f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fc:	f7fb fbec 	bl	80001d8 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4613      	mov	r3, r2
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	3301      	adds	r3, #1
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b05      	ldr	r3, [pc, #20]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3750      	adds	r7, #80	; 0x50
 8004a30:	46bd      	mov	sp, r7
 8004a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	00f42400 	.word	0x00f42400
 8004a40:	007a1200 	.word	0x007a1200

08004a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a48:	4b03      	ldr	r3, [pc, #12]	; (8004a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000000 	.word	0x20000000

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f7ff fff0 	bl	8004a44 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	0a9b      	lsrs	r3, r3, #10
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	08008ce0 	.word	0x08008ce0

08004a84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b0f      	cmp	r3, #15
 8004aa2:	d904      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004aa4:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8004aa8:	4834      	ldr	r0, [pc, #208]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004aaa:	f7fc f888 	bl	8000bbe <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d105      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d066      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d903      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	2b07      	cmp	r3, #7
 8004ad4:	d904      	bls.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004ad6:	f640 11de 	movw	r1, #2526	; 0x9de
 8004ada:	4828      	ldr	r0, [pc, #160]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004adc:	f7fc f86f 	bl	8000bbe <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b31      	cmp	r3, #49	; 0x31
 8004ae6:	d904      	bls.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004af0:	d904      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004af2:	f640 11df 	movw	r1, #2527	; 0x9df
 8004af6:	4821      	ldr	r0, [pc, #132]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004af8:	f7fc f861 	bl	8000bbe <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d903      	bls.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b3f      	cmp	r3, #63	; 0x3f
 8004b0a:	d904      	bls.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004b0c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004b10:	481a      	ldr	r0, [pc, #104]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b12:	f7fc f854 	bl	8000bbe <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b16:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b1c:	f7fc fa0c 	bl	8000f38 <HAL_GetTick>
 8004b20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b24:	f7fc fa08 	bl	8000f38 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e1b3      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b36:	4b13      	ldr	r3, [pc, #76]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	019b      	lsls	r3, r3, #6
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	490b      	ldr	r1, [pc, #44]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b5c:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b62:	f7fc f9e9 	bl	8000f38 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b68:	e00e      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b6a:	f7fc f9e5 	bl	8000f38 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d907      	bls.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e190      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b7c:	08008c58 	.word	0x08008c58
 8004b80:	42470068 	.word	0x42470068
 8004b84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b88:	4b88      	ldr	r3, [pc, #544]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0ea      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8173 	beq.w	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	f000 80a6 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb6:	f000 80a0 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	f000 809a 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	4a7a      	ldr	r2, [pc, #488]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	f000 8094 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	4a78      	ldr	r2, [pc, #480]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	f000 808e 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	4a76      	ldr	r2, [pc, #472]	; (8004dbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	f000 8088 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	4a74      	ldr	r2, [pc, #464]	; (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	f000 8082 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	4a72      	ldr	r2, [pc, #456]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d07c      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	4a70      	ldr	r2, [pc, #448]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d077      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	4a6f      	ldr	r2, [pc, #444]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d072      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4a6d      	ldr	r2, [pc, #436]	; (8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d06d      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	4a6c      	ldr	r2, [pc, #432]	; (8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d068      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4a6a      	ldr	r2, [pc, #424]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d063      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d05e      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	4a67      	ldr	r2, [pc, #412]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d059      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	4a66      	ldr	r2, [pc, #408]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d054      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a64      	ldr	r2, [pc, #400]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d04f      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	4a63      	ldr	r2, [pc, #396]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d04a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	4a61      	ldr	r2, [pc, #388]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d045      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4a60      	ldr	r2, [pc, #384]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d040      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4a5e      	ldr	r2, [pc, #376]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d03b      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	4a5d      	ldr	r2, [pc, #372]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d036      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	4a5b      	ldr	r2, [pc, #364]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d031      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	4a5a      	ldr	r2, [pc, #360]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d02c      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	4a58      	ldr	r2, [pc, #352]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d027      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	4a57      	ldr	r2, [pc, #348]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	4a55      	ldr	r2, [pc, #340]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01d      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4a54      	ldr	r2, [pc, #336]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d018      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	4a52      	ldr	r2, [pc, #328]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	4a51      	ldr	r2, [pc, #324]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	4a4f      	ldr	r2, [pc, #316]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	4a4e      	ldr	r2, [pc, #312]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cf0:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8004cf4:	484c      	ldr	r0, [pc, #304]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004cf6:	f7fb ff62 	bl	8000bbe <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4b2b      	ldr	r3, [pc, #172]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d08:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0a:	4b28      	ldr	r3, [pc, #160]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d16:	4b45      	ldr	r3, [pc, #276]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a44      	ldr	r2, [pc, #272]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d22:	f7fc f909 	bl	8000f38 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fc f905 	bl	8000f38 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e0b0      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d073      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d06c      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d70:	4b2f      	ldr	r3, [pc, #188]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d76:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d7c:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d158      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d8e:	f7fc f8d3 	bl	8000f38 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d94:	e04e      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d96:	f7fc f8cf 	bl	8000f38 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d945      	bls.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e078      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004dac:	40023800 	.word	0x40023800
 8004db0:	00020300 	.word	0x00020300
 8004db4:	00030300 	.word	0x00030300
 8004db8:	00040300 	.word	0x00040300
 8004dbc:	00050300 	.word	0x00050300
 8004dc0:	00060300 	.word	0x00060300
 8004dc4:	00070300 	.word	0x00070300
 8004dc8:	00080300 	.word	0x00080300
 8004dcc:	00090300 	.word	0x00090300
 8004dd0:	000a0300 	.word	0x000a0300
 8004dd4:	000b0300 	.word	0x000b0300
 8004dd8:	000c0300 	.word	0x000c0300
 8004ddc:	000d0300 	.word	0x000d0300
 8004de0:	000e0300 	.word	0x000e0300
 8004de4:	000f0300 	.word	0x000f0300
 8004de8:	00100300 	.word	0x00100300
 8004dec:	00110300 	.word	0x00110300
 8004df0:	00120300 	.word	0x00120300
 8004df4:	00130300 	.word	0x00130300
 8004df8:	00140300 	.word	0x00140300
 8004dfc:	00150300 	.word	0x00150300
 8004e00:	00160300 	.word	0x00160300
 8004e04:	00170300 	.word	0x00170300
 8004e08:	00180300 	.word	0x00180300
 8004e0c:	00190300 	.word	0x00190300
 8004e10:	001a0300 	.word	0x001a0300
 8004e14:	001b0300 	.word	0x001b0300
 8004e18:	001c0300 	.word	0x001c0300
 8004e1c:	001d0300 	.word	0x001d0300
 8004e20:	001e0300 	.word	0x001e0300
 8004e24:	001f0300 	.word	0x001f0300
 8004e28:	08008c58 	.word	0x08008c58
 8004e2c:	40007000 	.word	0x40007000
 8004e30:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e34:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0aa      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4c:	d10d      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004e4e:	4b16      	ldr	r3, [pc, #88]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e62:	4911      	ldr	r1, [pc, #68]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	608b      	str	r3, [r1, #8]
 8004e68:	e005      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e74:	6093      	str	r3, [r2, #8]
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e82:	4909      	ldr	r1, [pc, #36]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7d1a      	ldrb	r2, [r3, #20]
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004e9a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	424711e0 	.word	0x424711e0

08004eb0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d140      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ece:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d131      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ee4:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ee6:	617b      	str	r3, [r7, #20]
          break;
 8004ee8:	e031      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004eea:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef6:	d109      	bne.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f02:	4a19      	ldr	r2, [pc, #100]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	e008      	b.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f0c:	4b14      	ldr	r3, [pc, #80]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f16:	4a15      	ldr	r2, [pc, #84]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f24:	099b      	lsrs	r3, r3, #6
 8004f26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f38:	0f1b      	lsrs	r3, r3, #28
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	617b      	str	r3, [r7, #20]
          break;
 8004f46:	e002      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
          break;
 8004f4c:	bf00      	nop
        }
      }
      break;
 8004f4e:	bf00      	nop
    }
  }
  return frequency;
 8004f50:	697b      	ldr	r3, [r7, #20]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	371c      	adds	r7, #28
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800
 8004f64:	00bb8000 	.word	0x00bb8000
 8004f68:	007a1200 	.word	0x007a1200
 8004f6c:	00f42400 	.word	0x00f42400

08004f70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e18c      	b.n	800529c <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a75      	ldr	r2, [pc, #468]	; (800515c <HAL_SPI_Init+0x1ec>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_SPI_Init+0x4e>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a73      	ldr	r2, [pc, #460]	; (8005160 <HAL_SPI_Init+0x1f0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_SPI_Init+0x4e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a72      	ldr	r2, [pc, #456]	; (8005164 <HAL_SPI_Init+0x1f4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_SPI_Init+0x4e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a70      	ldr	r2, [pc, #448]	; (8005168 <HAL_SPI_Init+0x1f8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_SPI_Init+0x4e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6f      	ldr	r2, [pc, #444]	; (800516c <HAL_SPI_Init+0x1fc>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_SPI_Init+0x4e>
 8004fb4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004fb8:	486d      	ldr	r0, [pc, #436]	; (8005170 <HAL_SPI_Init+0x200>)
 8004fba:	f7fb fe00 	bl	8000bbe <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d009      	beq.n	8004fda <HAL_SPI_Init+0x6a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fce:	d004      	beq.n	8004fda <HAL_SPI_Init+0x6a>
 8004fd0:	f240 1141 	movw	r1, #321	; 0x141
 8004fd4:	4866      	ldr	r0, [pc, #408]	; (8005170 <HAL_SPI_Init+0x200>)
 8004fd6:	f7fb fdf2 	bl	8000bbe <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00e      	beq.n	8005000 <HAL_SPI_Init+0x90>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fea:	d009      	beq.n	8005000 <HAL_SPI_Init+0x90>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff4:	d004      	beq.n	8005000 <HAL_SPI_Init+0x90>
 8004ff6:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004ffa:	485d      	ldr	r0, [pc, #372]	; (8005170 <HAL_SPI_Init+0x200>)
 8004ffc:	f7fb fddf 	bl	8000bbe <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005008:	d008      	beq.n	800501c <HAL_SPI_Init+0xac>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <HAL_SPI_Init+0xac>
 8005012:	f240 1143 	movw	r1, #323	; 0x143
 8005016:	4856      	ldr	r0, [pc, #344]	; (8005170 <HAL_SPI_Init+0x200>)
 8005018:	f7fb fdd1 	bl	8000bbe <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005024:	d00d      	beq.n	8005042 <HAL_SPI_Init+0xd2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_SPI_Init+0xd2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005036:	d004      	beq.n	8005042 <HAL_SPI_Init+0xd2>
 8005038:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800503c:	484c      	ldr	r0, [pc, #304]	; (8005170 <HAL_SPI_Init+0x200>)
 800503e:	f7fb fdbe 	bl	8000bbe <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d020      	beq.n	800508c <HAL_SPI_Init+0x11c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b08      	cmp	r3, #8
 8005050:	d01c      	beq.n	800508c <HAL_SPI_Init+0x11c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b10      	cmp	r3, #16
 8005058:	d018      	beq.n	800508c <HAL_SPI_Init+0x11c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	2b18      	cmp	r3, #24
 8005060:	d014      	beq.n	800508c <HAL_SPI_Init+0x11c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	2b20      	cmp	r3, #32
 8005068:	d010      	beq.n	800508c <HAL_SPI_Init+0x11c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	2b28      	cmp	r3, #40	; 0x28
 8005070:	d00c      	beq.n	800508c <HAL_SPI_Init+0x11c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2b30      	cmp	r3, #48	; 0x30
 8005078:	d008      	beq.n	800508c <HAL_SPI_Init+0x11c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b38      	cmp	r3, #56	; 0x38
 8005080:	d004      	beq.n	800508c <HAL_SPI_Init+0x11c>
 8005082:	f240 1145 	movw	r1, #325	; 0x145
 8005086:	483a      	ldr	r0, [pc, #232]	; (8005170 <HAL_SPI_Init+0x200>)
 8005088:	f7fb fd99 	bl	8000bbe <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_SPI_Init+0x136>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	2b80      	cmp	r3, #128	; 0x80
 800509a:	d004      	beq.n	80050a6 <HAL_SPI_Init+0x136>
 800509c:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80050a0:	4833      	ldr	r0, [pc, #204]	; (8005170 <HAL_SPI_Init+0x200>)
 80050a2:	f7fb fd8c 	bl	8000bbe <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_SPI_Init+0x150>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d004      	beq.n	80050c0 <HAL_SPI_Init+0x150>
 80050b6:	f240 1147 	movw	r1, #327	; 0x147
 80050ba:	482d      	ldr	r0, [pc, #180]	; (8005170 <HAL_SPI_Init+0x200>)
 80050bc:	f7fb fd7f 	bl	8000bbe <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d155      	bne.n	8005174 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_SPI_Init+0x172>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d004      	beq.n	80050e2 <HAL_SPI_Init+0x172>
 80050d8:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80050dc:	4824      	ldr	r0, [pc, #144]	; (8005170 <HAL_SPI_Init+0x200>)
 80050de:	f7fb fd6e 	bl	8000bbe <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d008      	beq.n	80050fc <HAL_SPI_Init+0x18c>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d004      	beq.n	80050fc <HAL_SPI_Init+0x18c>
 80050f2:	f240 114b 	movw	r1, #331	; 0x14b
 80050f6:	481e      	ldr	r0, [pc, #120]	; (8005170 <HAL_SPI_Init+0x200>)
 80050f8:	f7fb fd61 	bl	8000bbe <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005104:	d125      	bne.n	8005152 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d05d      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	2b08      	cmp	r3, #8
 8005114:	d059      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	2b10      	cmp	r3, #16
 800511c:	d055      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	2b18      	cmp	r3, #24
 8005124:	d051      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	2b20      	cmp	r3, #32
 800512c:	d04d      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	2b28      	cmp	r3, #40	; 0x28
 8005134:	d049      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	2b30      	cmp	r3, #48	; 0x30
 800513c:	d045      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	2b38      	cmp	r3, #56	; 0x38
 8005144:	d041      	beq.n	80051ca <HAL_SPI_Init+0x25a>
 8005146:	f240 114f 	movw	r1, #335	; 0x14f
 800514a:	4809      	ldr	r0, [pc, #36]	; (8005170 <HAL_SPI_Init+0x200>)
 800514c:	f7fb fd37 	bl	8000bbe <assert_failed>
 8005150:	e03b      	b.n	80051ca <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	61da      	str	r2, [r3, #28]
 8005158:	e037      	b.n	80051ca <HAL_SPI_Init+0x25a>
 800515a:	bf00      	nop
 800515c:	40013000 	.word	0x40013000
 8005160:	40003800 	.word	0x40003800
 8005164:	40003c00 	.word	0x40003c00
 8005168:	40013400 	.word	0x40013400
 800516c:	40015000 	.word	0x40015000
 8005170:	08008c94 	.word	0x08008c94
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_SPI_Init+0x24e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	2b08      	cmp	r3, #8
 8005182:	d01c      	beq.n	80051be <HAL_SPI_Init+0x24e>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	2b10      	cmp	r3, #16
 800518a:	d018      	beq.n	80051be <HAL_SPI_Init+0x24e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2b18      	cmp	r3, #24
 8005192:	d014      	beq.n	80051be <HAL_SPI_Init+0x24e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	2b20      	cmp	r3, #32
 800519a:	d010      	beq.n	80051be <HAL_SPI_Init+0x24e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	2b28      	cmp	r3, #40	; 0x28
 80051a2:	d00c      	beq.n	80051be <HAL_SPI_Init+0x24e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b30      	cmp	r3, #48	; 0x30
 80051aa:	d008      	beq.n	80051be <HAL_SPI_Init+0x24e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	2b38      	cmp	r3, #56	; 0x38
 80051b2:	d004      	beq.n	80051be <HAL_SPI_Init+0x24e>
 80051b4:	f240 1159 	movw	r1, #345	; 0x159
 80051b8:	483a      	ldr	r0, [pc, #232]	; (80052a4 <HAL_SPI_Init+0x334>)
 80051ba:	f7fb fd00 	bl	8000bbe <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fb fd2b 	bl	8000c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2202      	movs	r2, #2
 80051ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005200:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800523a:	431a      	orrs	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005244:	431a      	orrs	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800524e:	ea42 0103 	orr.w	r1, r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 0104 	and.w	r1, r3, #4
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	f003 0210 	and.w	r2, r3, #16
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69da      	ldr	r2, [r3, #28]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	08008c94 	.word	0x08008c94

080052a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052a8:	b084      	sub	sp, #16
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	f107 001c 	add.w	r0, r7, #28
 80052b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d122      	bne.n	8005306 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80052d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d105      	bne.n	80052fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9c0 	bl	8005680 <USB_CoreReset>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]
 8005304:	e01a      	b.n	800533c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9b4 	bl	8005680 <USB_CoreReset>
 8005318:	4603      	mov	r3, r0
 800531a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800531c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	639a      	str	r2, [r3, #56]	; 0x38
 800532e:	e005      	b.n	800533c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10b      	bne.n	800535a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f043 0206 	orr.w	r2, r3, #6
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f043 0220 	orr.w	r2, r3, #32
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005366:	b004      	add	sp, #16
 8005368:	4770      	bx	lr

0800536a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f023 0201 	bic.w	r2, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	460b      	mov	r3, r1
 80053b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053ca:	78fb      	ldrb	r3, [r7, #3]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d115      	bne.n	80053fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053dc:	2001      	movs	r0, #1
 80053de:	f7fb fdb7 	bl	8000f50 <HAL_Delay>
      ms++;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	3301      	adds	r3, #1
 80053e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f93a 	bl	8005662 <USB_GetMode>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d01e      	beq.n	8005432 <USB_SetCurrentMode+0x84>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b31      	cmp	r3, #49	; 0x31
 80053f8:	d9f0      	bls.n	80053dc <USB_SetCurrentMode+0x2e>
 80053fa:	e01a      	b.n	8005432 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d115      	bne.n	800542e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800540e:	2001      	movs	r0, #1
 8005410:	f7fb fd9e 	bl	8000f50 <HAL_Delay>
      ms++;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3301      	adds	r3, #1
 8005418:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f921 	bl	8005662 <USB_GetMode>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <USB_SetCurrentMode+0x84>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b31      	cmp	r3, #49	; 0x31
 800542a:	d9f0      	bls.n	800540e <USB_SetCurrentMode+0x60>
 800542c:	e001      	b.n	8005432 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e005      	b.n	800543e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b32      	cmp	r3, #50	; 0x32
 8005436:	d101      	bne.n	800543c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <USB_FlushTxFifo+0x64>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d901      	bls.n	8005468 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e01b      	b.n	80054a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	daf2      	bge.n	8005456 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	019b      	lsls	r3, r3, #6
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a08      	ldr	r2, [pc, #32]	; (80054ac <USB_FlushTxFifo+0x64>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e006      	b.n	80054a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b20      	cmp	r3, #32
 800549c:	d0f0      	beq.n	8005480 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	00030d40 	.word	0x00030d40

080054b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a11      	ldr	r2, [pc, #68]	; (800550c <USB_FlushRxFifo+0x5c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e018      	b.n	8005500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	daf2      	bge.n	80054bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2210      	movs	r2, #16
 80054de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4a08      	ldr	r2, [pc, #32]	; (800550c <USB_FlushRxFifo+0x5c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d901      	bls.n	80054f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e006      	b.n	8005500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d0f0      	beq.n	80054e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	00030d40 	.word	0x00030d40

08005510 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005510:	b480      	push	{r7}
 8005512:	b089      	sub	sp, #36	; 0x24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4611      	mov	r1, r2
 800551c:	461a      	mov	r2, r3
 800551e:	460b      	mov	r3, r1
 8005520:	71fb      	strb	r3, [r7, #7]
 8005522:	4613      	mov	r3, r2
 8005524:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800552e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d123      	bne.n	800557e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005536:	88bb      	ldrh	r3, [r7, #4]
 8005538:	3303      	adds	r3, #3
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800553e:	2300      	movs	r3, #0
 8005540:	61bb      	str	r3, [r7, #24]
 8005542:	e018      	b.n	8005576 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	031a      	lsls	r2, r3, #12
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4413      	add	r3, r2
 800554c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005550:	461a      	mov	r2, r3
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3301      	adds	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3301      	adds	r3, #1
 800556e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	3301      	adds	r3, #1
 8005574:	61bb      	str	r3, [r7, #24]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	429a      	cmp	r2, r3
 800557c:	d3e2      	bcc.n	8005544 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3724      	adds	r7, #36	; 0x24
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800558c:	b480      	push	{r7}
 800558e:	b08b      	sub	sp, #44	; 0x2c
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055a2:	88fb      	ldrh	r3, [r7, #6]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	623b      	str	r3, [r7, #32]
 80055b6:	e014      	b.n	80055e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	3301      	adds	r3, #1
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	3301      	adds	r3, #1
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	3301      	adds	r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	3301      	adds	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	3301      	adds	r3, #1
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3e6      	bcc.n	80055b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055ea:	8bfb      	ldrh	r3, [r7, #30]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01e      	beq.n	800562e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fa:	461a      	mov	r2, r3
 80055fc:	f107 0310 	add.w	r3, r7, #16
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
 8005610:	b2da      	uxtb	r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	701a      	strb	r2, [r3, #0]
      i++;
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	3301      	adds	r3, #1
 800561a:	623b      	str	r3, [r7, #32]
      pDest++;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	3301      	adds	r3, #1
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005622:	8bfb      	ldrh	r3, [r7, #30]
 8005624:	3b01      	subs	r3, #1
 8005626:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005628:	8bfb      	ldrh	r3, [r7, #30]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1ea      	bne.n	8005604 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005630:	4618      	mov	r0, r3
 8005632:	372c      	adds	r7, #44	; 0x2c
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4013      	ands	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005654:	68fb      	ldr	r3, [r7, #12]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0301 	and.w	r3, r3, #1
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a13      	ldr	r2, [pc, #76]	; (80056e4 <USB_CoreReset+0x64>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d901      	bls.n	800569e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e01b      	b.n	80056d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	daf2      	bge.n	800568c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f043 0201 	orr.w	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3301      	adds	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <USB_CoreReset+0x64>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d901      	bls.n	80056c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e006      	b.n	80056d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d0f0      	beq.n	80056b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	00030d40 	.word	0x00030d40

080056e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e8:	b084      	sub	sp, #16
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005708:	461a      	mov	r2, r3
 800570a:	2300      	movs	r3, #0
 800570c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d018      	beq.n	8005770 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d10a      	bne.n	800575a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005752:	f043 0304 	orr.w	r3, r3, #4
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e014      	b.n	8005784 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005768:	f023 0304 	bic.w	r3, r3, #4
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e009      	b.n	8005784 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800577e:	f023 0304 	bic.w	r3, r3, #4
 8005782:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005784:	2110      	movs	r1, #16
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fe5e 	bl	8005448 <USB_FlushTxFifo>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff fe8a 	bl	80054b0 <USB_FlushRxFifo>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
 80057aa:	e015      	b.n	80057d8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	461a      	mov	r2, r3
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057be:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057cc:	461a      	mov	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3301      	adds	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d3e5      	bcc.n	80057ac <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057ec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005800:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a13      	ldr	r2, [pc, #76]	; (8005854 <USB_HostInit+0x16c>)
 8005806:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a13      	ldr	r2, [pc, #76]	; (8005858 <USB_HostInit+0x170>)
 800580c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005810:	e009      	b.n	8005826 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2280      	movs	r2, #128	; 0x80
 8005816:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a10      	ldr	r2, [pc, #64]	; (800585c <USB_HostInit+0x174>)
 800581c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <USB_HostInit+0x178>)
 8005822:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	2b00      	cmp	r3, #0
 800582a:	d105      	bne.n	8005838 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	f043 0210 	orr.w	r2, r3, #16
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	699a      	ldr	r2, [r3, #24]
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <USB_HostInit+0x17c>)
 800583e:	4313      	orrs	r3, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005844:	7dfb      	ldrb	r3, [r7, #23]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005850:	b004      	add	sp, #16
 8005852:	4770      	bx	lr
 8005854:	01000200 	.word	0x01000200
 8005858:	00e00300 	.word	0x00e00300
 800585c:	00600080 	.word	0x00600080
 8005860:	004000e0 	.word	0x004000e0
 8005864:	a3200008 	.word	0xa3200008

08005868 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005886:	f023 0303 	bic.w	r3, r3, #3
 800588a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	68f9      	ldr	r1, [r7, #12]
 800589c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d107      	bne.n	80058ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058b0:	461a      	mov	r2, r3
 80058b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058b6:	6053      	str	r3, [r2, #4]
 80058b8:	e009      	b.n	80058ce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d106      	bne.n	80058ce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c6:	461a      	mov	r2, r3
 80058c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80058cc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80058fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800590c:	2064      	movs	r0, #100	; 0x64
 800590e:	f7fb fb1f 	bl	8000f50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800591a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800591e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005920:	200a      	movs	r0, #10
 8005922:	f7fb fb15 	bl	8000f50 <HAL_Delay>

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005954:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <USB_DriveVbus+0x44>
 8005960:	78fb      	ldrb	r3, [r7, #3]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d106      	bne.n	8005974 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800596e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005972:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800597a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597e:	d109      	bne.n	8005994 <USB_DriveVbus+0x64>
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d106      	bne.n	8005994 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800598e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005992:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	0c5b      	lsrs	r3, r3, #17
 80059c0:	f003 0303 	and.w	r3, r3, #3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	b29b      	uxth	r3, r3
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	4608      	mov	r0, r1
 80059fe:	4611      	mov	r1, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	70fb      	strb	r3, [r7, #3]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70bb      	strb	r3, [r7, #2]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a22:	461a      	mov	r2, r3
 8005a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d87e      	bhi.n	8005b30 <USB_HC_Init+0x13c>
 8005a32:	a201      	add	r2, pc, #4	; (adr r2, 8005a38 <USB_HC_Init+0x44>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a49 	.word	0x08005a49
 8005a3c:	08005af3 	.word	0x08005af3
 8005a40:	08005a49 	.word	0x08005a49
 8005a44:	08005ab5 	.word	0x08005ab5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	461a      	mov	r2, r3
 8005a56:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	da10      	bge.n	8005a86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a82:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005a84:	e057      	b.n	8005b36 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d051      	beq.n	8005b36 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ab0:	60d3      	str	r3, [r2, #12]
      break;
 8005ab2:	e040      	b.n	8005b36 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f240 639d 	movw	r3, #1693	; 0x69d
 8005ac6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ac8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da34      	bge.n	8005b3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	78fa      	ldrb	r2, [r7, #3]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aee:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005af0:	e023      	b.n	8005b3a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afe:	461a      	mov	r2, r3
 8005b00:	f240 2325 	movw	r3, #549	; 0x225
 8005b04:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da17      	bge.n	8005b3e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b28:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b2c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b2e:	e006      	b.n	8005b3e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	77fb      	strb	r3, [r7, #31]
      break;
 8005b34:	e004      	b.n	8005b40 <USB_HC_Init+0x14c>
      break;
 8005b36:	bf00      	nop
 8005b38:	e002      	b.n	8005b40 <USB_HC_Init+0x14c>
      break;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <USB_HC_Init+0x14c>
      break;
 8005b3e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	2101      	movs	r1, #1
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	6939      	ldr	r1, [r7, #16]
 8005b76:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	da03      	bge.n	8005b9a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	e001      	b.n	8005b9e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff feff 	bl	80059a2 <USB_GetHostSpeed>
 8005ba4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ba6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d106      	bne.n	8005bbc <USB_HC_Init+0x1c8>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d003      	beq.n	8005bbc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e001      	b.n	8005bc0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bc0:	787b      	ldrb	r3, [r7, #1]
 8005bc2:	059b      	lsls	r3, r3, #22
 8005bc4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bc8:	78bb      	ldrb	r3, [r7, #2]
 8005bca:	02db      	lsls	r3, r3, #11
 8005bcc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bd0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005bd6:	049b      	lsls	r3, r3, #18
 8005bd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bdc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bde:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005be0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005be4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	0159      	lsls	r1, r3, #5
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	440b      	add	r3, r1
 8005bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bfc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d003      	beq.n	8005c0e <USB_HC_Init+0x21a>
 8005c06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10f      	bne.n	8005c2e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	78fa      	ldrb	r2, [r7, #3]
 8005c1e:	0151      	lsls	r1, r2, #5
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	440a      	add	r2, r1
 8005c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c2c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	; 0x30
 8005c3c:	af02      	add	r7, sp, #8
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	785b      	ldrb	r3, [r3, #1]
 8005c4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c54:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02d      	beq.n	8005cbe <USB_HC_StartXfer+0x86>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	791b      	ldrb	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d129      	bne.n	8005cbe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d117      	bne.n	8005ca0 <USB_HC_StartXfer+0x68>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	79db      	ldrb	r3, [r3, #7]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <USB_HC_StartXfer+0x48>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	79db      	ldrb	r3, [r3, #7]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d10f      	bne.n	8005ca0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	0151      	lsls	r1, r2, #5
 8005c92:	6a3a      	ldr	r2, [r7, #32]
 8005c94:	440a      	add	r2, r1
 8005c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10b      	bne.n	8005cbe <USB_HC_StartXfer+0x86>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	795b      	ldrb	r3, [r3, #5]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d107      	bne.n	8005cbe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fa0f 	bl	80060d8 <USB_DoPing>
      return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e0f8      	b.n	8005eb0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d018      	beq.n	8005cf8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	8912      	ldrh	r2, [r2, #8]
 8005cce:	4413      	add	r3, r2
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	8912      	ldrh	r2, [r2, #8]
 8005cd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cda:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005cdc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cde:	8b7b      	ldrh	r3, [r7, #26]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d90b      	bls.n	8005cfc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005ce4:	8b7b      	ldrh	r3, [r7, #26]
 8005ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	8912      	ldrh	r2, [r2, #8]
 8005cee:	fb03 f202 	mul.w	r2, r3, r2
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	611a      	str	r2, [r3, #16]
 8005cf6:	e001      	b.n	8005cfc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	78db      	ldrb	r3, [r3, #3]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	8912      	ldrh	r2, [r2, #8]
 8005d0a:	fb03 f202 	mul.w	r2, r3, r2
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	611a      	str	r2, [r3, #16]
 8005d12:	e003      	b.n	8005d1c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d26:	04d9      	lsls	r1, r3, #19
 8005d28:	4b63      	ldr	r3, [pc, #396]	; (8005eb8 <USB_HC_StartXfer+0x280>)
 8005d2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	7a9b      	ldrb	r3, [r3, #10]
 8005d32:	075b      	lsls	r3, r3, #29
 8005d34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d38:	69f9      	ldr	r1, [r7, #28]
 8005d3a:	0148      	lsls	r0, r1, #5
 8005d3c:	6a39      	ldr	r1, [r7, #32]
 8005d3e:	4401      	add	r1, r0
 8005d40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d46:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	68d9      	ldr	r1, [r3, #12]
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5e:	460a      	mov	r2, r1
 8005d60:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d94:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d98:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	7e7b      	ldrb	r3, [r7, #25]
 8005daa:	075b      	lsls	r3, r3, #29
 8005dac:	69f9      	ldr	r1, [r7, #28]
 8005dae:	0148      	lsls	r0, r1, #5
 8005db0:	6a39      	ldr	r1, [r7, #32]
 8005db2:	4401      	add	r1, r0
 8005db4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005db8:	4313      	orrs	r3, r2
 8005dba:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dd2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	78db      	ldrb	r3, [r3, #3]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e003      	b.n	8005dee <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005dec:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005df4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	461a      	mov	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e04e      	b.n	8005eb0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	78db      	ldrb	r3, [r3, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d149      	bne.n	8005eae <USB_HC_StartXfer+0x276>
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d045      	beq.n	8005eae <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	79db      	ldrb	r3, [r3, #7]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d830      	bhi.n	8005e8c <USB_HC_StartXfer+0x254>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <USB_HC_StartXfer+0x1f8>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e41 	.word	0x08005e41
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e41 	.word	0x08005e41
 8005e3c:	08005e65 	.word	0x08005e65
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	3303      	adds	r3, #3
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e4a:	8afa      	ldrh	r2, [r7, #22]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d91c      	bls.n	8005e90 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e62:	e015      	b.n	8005e90 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	3303      	adds	r3, #3
 8005e6a:	089b      	lsrs	r3, r3, #2
 8005e6c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005e6e:	8afa      	ldrh	r2, [r7, #22]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d90a      	bls.n	8005e94 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e8a:	e003      	b.n	8005e94 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e8c:	bf00      	nop
 8005e8e:	e002      	b.n	8005e96 <USB_HC_StartXfer+0x25e>
        break;
 8005e90:	bf00      	nop
 8005e92:	e000      	b.n	8005e96 <USB_HC_StartXfer+0x25e>
        break;
 8005e94:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68d9      	ldr	r1, [r3, #12]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	785a      	ldrb	r2, [r3, #1]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	9000      	str	r0, [sp, #0]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f7ff fb31 	bl	8005510 <USB_WritePacket>
  }

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3728      	adds	r7, #40	; 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	1ff80000 	.word	0x1ff80000

08005ebc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	b29b      	uxth	r3, r3
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b089      	sub	sp, #36	; 0x24
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	0c9b      	lsrs	r3, r3, #18
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	0fdb      	lsrs	r3, r3, #31
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d104      	bne.n	8005f38 <USB_HC_Halt+0x5a>
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	e0c8      	b.n	80060ca <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <USB_HC_Halt+0x66>
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d163      	bne.n	800600c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f62:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f003 0320 	and.w	r3, r3, #32
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 80ab 	bne.w	80060c8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d133      	bne.n	8005fe6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	0151      	lsls	r1, r2, #5
 8005f90:	69fa      	ldr	r2, [r7, #28]
 8005f92:	440a      	add	r2, r1
 8005f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f9c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	0151      	lsls	r1, r2, #5
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	440a      	add	r2, r1
 8005fb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fca:	d81d      	bhi.n	8006008 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fe2:	d0ec      	beq.n	8005fbe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fe4:	e070      	b.n	80060c8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006004:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006006:	e05f      	b.n	80060c8 <USB_HC_Halt+0x1ea>
            break;
 8006008:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800600a:	e05d      	b.n	80060c8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006026:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d133      	bne.n	80060a4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	4413      	add	r3, r2
 8006044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	440a      	add	r2, r1
 8006052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800605a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	440a      	add	r2, r1
 8006072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006076:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800607a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006088:	d81d      	bhi.n	80060c6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	4413      	add	r3, r2
 8006092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800609c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a0:	d0ec      	beq.n	800607c <USB_HC_Halt+0x19e>
 80060a2:	e011      	b.n	80060c8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e000      	b.n	80060c8 <USB_HC_Halt+0x1ea>
          break;
 80060c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
	...

080060d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060ec:	2301      	movs	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	04da      	lsls	r2, r3, #19
 80060f4:	4b15      	ldr	r3, [pc, #84]	; (800614c <USB_DoPing+0x74>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006108:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	015a      	lsls	r2, r3, #5
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4413      	add	r3, r2
 8006112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006120:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006128:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	371c      	adds	r7, #28
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	1ff80000 	.word	0x1ff80000

08006150 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff f911 	bl	800538c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800616a:	2110      	movs	r1, #16
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff f96b 	bl	8005448 <USB_FlushTxFifo>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f7ff f997 	bl	80054b0 <USB_FlushRxFifo>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800618c:	2300      	movs	r3, #0
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	e01f      	b.n	80061d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c6:	461a      	mov	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	3301      	adds	r3, #1
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b0f      	cmp	r3, #15
 80061d6:	d9dc      	bls.n	8006192 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80061d8:	2300      	movs	r3, #0
 80061da:	61bb      	str	r3, [r7, #24]
 80061dc:	e034      	b.n	8006248 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006204:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006212:	461a      	mov	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006224:	d80c      	bhi.n	8006240 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800623c:	d0ec      	beq.n	8006218 <USB_StopHost+0xc8>
 800623e:	e000      	b.n	8006242 <USB_StopHost+0xf2>
        break;
 8006240:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3301      	adds	r3, #1
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	d9c7      	bls.n	80061de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006254:	461a      	mov	r2, r3
 8006256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800625a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006262:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7ff f880 	bl	800536a <USB_EnableGlobalInt>

  return ret;
 800626a:	7ffb      	ldrb	r3, [r7, #31]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b089      	sub	sp, #36	; 0x24
 8006278:	af04      	add	r7, sp, #16
 800627a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800627c:	2301      	movs	r3, #1
 800627e:	2202      	movs	r2, #2
 8006280:	2102      	movs	r1, #2
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fc66 	bl	8006b54 <USBH_FindInterface>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2bff      	cmp	r3, #255	; 0xff
 8006290:	d002      	beq.n	8006298 <USBH_CDC_InterfaceInit+0x24>
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d901      	bls.n	800629c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006298:	2302      	movs	r3, #2
 800629a:	e13d      	b.n	8006518 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800629c:	7bfb      	ldrb	r3, [r7, #15]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fc3b 	bl	8006b1c <USBH_SelectInterface>
 80062a6:	4603      	mov	r3, r0
 80062a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80062b0:	2302      	movs	r3, #2
 80062b2:	e131      	b.n	8006518 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80062ba:	2050      	movs	r0, #80	; 0x50
 80062bc:	f002 fafa 	bl	80088b4 <malloc>
 80062c0:	4603      	mov	r3, r0
 80062c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062d4:	2302      	movs	r3, #2
 80062d6:	e11f      	b.n	8006518 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062d8:	2250      	movs	r2, #80	; 0x50
 80062da:	2100      	movs	r1, #0
 80062dc:	68b8      	ldr	r0, [r7, #8]
 80062de:	f002 faf9 	bl	80088d4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	211a      	movs	r1, #26
 80062e8:	fb01 f303 	mul.w	r3, r1, r3
 80062ec:	4413      	add	r3, r2
 80062ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b25b      	sxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	da15      	bge.n	8006326 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	211a      	movs	r1, #26
 8006300:	fb01 f303 	mul.w	r3, r1, r3
 8006304:	4413      	add	r3, r2
 8006306:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	211a      	movs	r1, #26
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	4413      	add	r3, r2
 800631c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006320:	881a      	ldrh	r2, [r3, #0]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	785b      	ldrb	r3, [r3, #1]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 ff2c 	bl	800818a <USBH_AllocPipe>
 8006332:	4603      	mov	r3, r0
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	7819      	ldrb	r1, [r3, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	7858      	ldrb	r0, [r3, #1]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	8952      	ldrh	r2, [r2, #10]
 8006352:	9202      	str	r2, [sp, #8]
 8006354:	2203      	movs	r2, #3
 8006356:	9201      	str	r2, [sp, #4]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4623      	mov	r3, r4
 800635c:	4602      	mov	r2, r0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 fee4 	bl	800812c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2200      	movs	r2, #0
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 f9f3 	bl	8008758 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006372:	2300      	movs	r3, #0
 8006374:	2200      	movs	r2, #0
 8006376:	210a      	movs	r1, #10
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fbeb 	bl	8006b54 <USBH_FindInterface>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2bff      	cmp	r3, #255	; 0xff
 8006386:	d002      	beq.n	800638e <USBH_CDC_InterfaceInit+0x11a>
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d901      	bls.n	8006392 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800638e:	2302      	movs	r3, #2
 8006390:	e0c2      	b.n	8006518 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	211a      	movs	r1, #26
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	4413      	add	r3, r2
 800639e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da16      	bge.n	80063d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	211a      	movs	r1, #26
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	211a      	movs	r1, #26
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	835a      	strh	r2, [r3, #26]
 80063d6:	e015      	b.n	8006404 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	211a      	movs	r1, #26
 80063de:	fb01 f303 	mul.w	r3, r1, r3
 80063e2:	4413      	add	r3, r2
 80063e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063e8:	781a      	ldrb	r2, [r3, #0]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	211a      	movs	r1, #26
 80063f4:	fb01 f303 	mul.w	r3, r1, r3
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063fe:	881a      	ldrh	r2, [r3, #0]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	211a      	movs	r1, #26
 800640a:	fb01 f303 	mul.w	r3, r1, r3
 800640e:	4413      	add	r3, r2
 8006410:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	b25b      	sxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	da16      	bge.n	800644a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	211a      	movs	r1, #26
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	4413      	add	r3, r2
 8006428:	f203 3356 	addw	r3, r3, #854	; 0x356
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	211a      	movs	r1, #26
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	4413      	add	r3, r2
 800643e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006442:	881a      	ldrh	r2, [r3, #0]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	835a      	strh	r2, [r3, #26]
 8006448:	e015      	b.n	8006476 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	211a      	movs	r1, #26
 8006450:	fb01 f303 	mul.w	r3, r1, r3
 8006454:	4413      	add	r3, r2
 8006456:	f203 3356 	addw	r3, r3, #854	; 0x356
 800645a:	781a      	ldrb	r2, [r3, #0]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	211a      	movs	r1, #26
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	4413      	add	r3, r2
 800646c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006470:	881a      	ldrh	r2, [r3, #0]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	7b9b      	ldrb	r3, [r3, #14]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f001 fe84 	bl	800818a <USBH_AllocPipe>
 8006482:	4603      	mov	r3, r0
 8006484:	461a      	mov	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	7bdb      	ldrb	r3, [r3, #15]
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f001 fe7a 	bl	800818a <USBH_AllocPipe>
 8006496:	4603      	mov	r3, r0
 8006498:	461a      	mov	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	7b59      	ldrb	r1, [r3, #13]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	7b98      	ldrb	r0, [r3, #14]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	8b12      	ldrh	r2, [r2, #24]
 80064b6:	9202      	str	r2, [sp, #8]
 80064b8:	2202      	movs	r2, #2
 80064ba:	9201      	str	r2, [sp, #4]
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	4623      	mov	r3, r4
 80064c0:	4602      	mov	r2, r0
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fe32 	bl	800812c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	7b19      	ldrb	r1, [r3, #12]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	7bd8      	ldrb	r0, [r3, #15]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	8b52      	ldrh	r2, [r2, #26]
 80064e0:	9202      	str	r2, [sp, #8]
 80064e2:	2202      	movs	r2, #2
 80064e4:	9201      	str	r2, [sp, #4]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	4623      	mov	r3, r4
 80064ea:	4602      	mov	r2, r0
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 fe1d 	bl	800812c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	7b5b      	ldrb	r3, [r3, #13]
 80064fe:	2200      	movs	r2, #0
 8006500:	4619      	mov	r1, r3
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f002 f928 	bl	8008758 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	7b1b      	ldrb	r3, [r3, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f002 f921 	bl	8008758 <USBH_LL_SetToggle>

  return USBH_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	bd90      	pop	{r4, r7, pc}

08006520 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fe12 	bl	800816a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 fe3d 	bl	80081cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	7b1b      	ldrb	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00e      	beq.n	800657e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	7b1b      	ldrb	r3, [r3, #12]
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 fdff 	bl	800816a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	7b1b      	ldrb	r3, [r3, #12]
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fe2a 	bl	80081cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	7b5b      	ldrb	r3, [r3, #13]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00e      	beq.n	80065a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	7b5b      	ldrb	r3, [r3, #13]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fdec 	bl	800816a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	7b5b      	ldrb	r3, [r3, #13]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fe17 	bl	80081cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00b      	beq.n	80065c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f002 f983 	bl	80088c4 <free>
    phost->pActiveClass->pData = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c4:	2200      	movs	r2, #0
 80065c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b084      	sub	sp, #16
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	3340      	adds	r3, #64	; 0x40
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f8b1 	bl	8006752 <GetLineCoding>
 80065f0:	4603      	mov	r3, r0
 80065f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d105      	bne.n	8006606 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006600:	2102      	movs	r1, #2
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006606:	7afb      	ldrb	r3, [r7, #11]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006630:	2b04      	cmp	r3, #4
 8006632:	d877      	bhi.n	8006724 <USBH_CDC_Process+0x114>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <USBH_CDC_Process+0x2c>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	08006651 	.word	0x08006651
 8006640:	08006657 	.word	0x08006657
 8006644:	08006687 	.word	0x08006687
 8006648:	080066fb 	.word	0x080066fb
 800664c:	08006709 	.word	0x08006709
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
      break;
 8006654:	e06d      	b.n	8006732 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f897 	bl	8006790 <SetLineCoding>
 8006662:	4603      	mov	r3, r0
 8006664:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006674:	e058      	b.n	8006728 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d055      	beq.n	8006728 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2204      	movs	r2, #4
 8006680:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006684:	e050      	b.n	8006728 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	3340      	adds	r3, #64	; 0x40
 800668a:	4619      	mov	r1, r3
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f860 	bl	8006752 <GetLineCoding>
 8006692:	4603      	mov	r3, r0
 8006694:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d126      	bne.n	80066ea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ae:	791b      	ldrb	r3, [r3, #4]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d13b      	bne.n	800672c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066be:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d133      	bne.n	800672c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d12b      	bne.n	800672c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066dc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066de:	429a      	cmp	r2, r3
 80066e0:	d124      	bne.n	800672c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f958 	bl	8006998 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066e8:	e020      	b.n	800672c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d01d      	beq.n	800672c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2204      	movs	r2, #4
 80066f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066f8:	e018      	b.n	800672c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f867 	bl	80067ce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8da 	bl	80068ba <CDC_ProcessReception>
      break;
 8006706:	e014      	b.n	8006732 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 ffef 	bl	80076ee <USBH_ClrFeature>
 8006710:	4603      	mov	r3, r0
 8006712:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006722:	e005      	b.n	8006730 <USBH_CDC_Process+0x120>

    default:
      break;
 8006724:	bf00      	nop
 8006726:	e004      	b.n	8006732 <USBH_CDC_Process+0x122>
      break;
 8006728:	bf00      	nop
 800672a:	e002      	b.n	8006732 <USBH_CDC_Process+0x122>
      break;
 800672c:	bf00      	nop
 800672e:	e000      	b.n	8006732 <USBH_CDC_Process+0x122>
      break;
 8006730:	bf00      	nop

  }

  return status;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	22a1      	movs	r2, #161	; 0xa1
 8006760:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2221      	movs	r2, #33	; 0x21
 8006766:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2207      	movs	r2, #7
 8006778:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2207      	movs	r2, #7
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fa81 	bl	8007c88 <USBH_CtlReq>
 8006786:	4603      	mov	r3, r0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3708      	adds	r7, #8
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2221      	movs	r2, #33	; 0x21
 800679e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2207      	movs	r2, #7
 80067b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2207      	movs	r2, #7
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fa62 	bl	8007c88 <USBH_CtlReq>
 80067c4:	4603      	mov	r3, r0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b086      	sub	sp, #24
 80067d2:	af02      	add	r7, sp, #8
 80067d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d002      	beq.n	80067f4 <CDC_ProcessTransmission+0x26>
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d023      	beq.n	800683a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067f2:	e05e      	b.n	80068b2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	8b12      	ldrh	r2, [r2, #24]
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d90b      	bls.n	8006818 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	69d9      	ldr	r1, [r3, #28]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8b1a      	ldrh	r2, [r3, #24]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	7b5b      	ldrb	r3, [r3, #13]
 800680c:	2001      	movs	r0, #1
 800680e:	9000      	str	r0, [sp, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fc48 	bl	80080a6 <USBH_BulkSendData>
 8006816:	e00b      	b.n	8006830 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	7b5b      	ldrb	r3, [r3, #13]
 8006826:	2001      	movs	r0, #1
 8006828:	9000      	str	r0, [sp, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fc3b 	bl	80080a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006838:	e03b      	b.n	80068b2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	7b5b      	ldrb	r3, [r3, #13]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 ff5f 	bl	8008704 <USBH_LL_GetURBState>
 8006846:	4603      	mov	r3, r0
 8006848:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800684a:	7afb      	ldrb	r3, [r7, #11]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d128      	bne.n	80068a2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	8b12      	ldrh	r2, [r2, #24]
 8006858:	4293      	cmp	r3, r2
 800685a:	d90e      	bls.n	800687a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	8b12      	ldrh	r2, [r2, #24]
 8006864:	1a9a      	subs	r2, r3, r2
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	8b12      	ldrh	r2, [r2, #24]
 8006872:	441a      	add	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	61da      	str	r2, [r3, #28]
 8006878:	e002      	b.n	8006880 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006890:	e00e      	b.n	80068b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f868 	bl	8006970 <USBH_CDC_TransmitCallback>
      break;
 80068a0:	e006      	b.n	80068b0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d103      	bne.n	80068b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068b0:	bf00      	nop
  }
}
 80068b2:	bf00      	nop
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d002      	beq.n	80068e0 <CDC_ProcessReception+0x26>
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d00e      	beq.n	80068fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068de:	e043      	b.n	8006968 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6a19      	ldr	r1, [r3, #32]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	8b5a      	ldrh	r2, [r3, #26]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 fbff 	bl	80080f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2204      	movs	r2, #4
 80068f6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068fa:	e035      	b.n	8006968 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	7b1b      	ldrb	r3, [r3, #12]
 8006900:	4619      	mov	r1, r3
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fefe 	bl	8008704 <USBH_LL_GetURBState>
 8006908:	4603      	mov	r3, r0
 800690a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800690c:	7cfb      	ldrb	r3, [r7, #19]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d129      	bne.n	8006966 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	7b1b      	ldrb	r3, [r3, #12]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fe61 	bl	80085e0 <USBH_LL_GetLastXferSize>
 800691e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d016      	beq.n	8006958 <CDC_ProcessReception+0x9e>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	8b5b      	ldrh	r3, [r3, #26]
 800692e:	461a      	mov	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4293      	cmp	r3, r2
 8006934:	d910      	bls.n	8006958 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	6a1a      	ldr	r2, [r3, #32]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	441a      	add	r2, r3
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2203      	movs	r2, #3
 8006952:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006956:	e006      	b.n	8006966 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f80f 	bl	8006984 <USBH_CDC_ReceiveCallback>
      break;
 8006966:	bf00      	nop
  }
}
 8006968:	bf00      	nop
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80069c0:	2302      	movs	r3, #2
 80069c2:	e029      	b.n	8006a18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	79fa      	ldrb	r2, [r7, #7]
 80069c8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f81f 	bl	8006a20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f001 fd31 	bl	8008478 <USBH_LL_Init>

  return USBH_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e009      	b.n	8006a46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	33e0      	adds	r3, #224	; 0xe0
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b0f      	cmp	r3, #15
 8006a4a:	d9f2      	bls.n	8006a32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e009      	b.n	8006a66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	3301      	adds	r3, #1
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6c:	d3f1      	bcc.n	8006a52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2240      	movs	r2, #64	; 0x40
 8006a92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d016      	beq.n	8006b0a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10e      	bne.n	8006b04 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	33de      	adds	r3, #222	; 0xde
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
 8006b02:	e004      	b.n	8006b0e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b04:	2302      	movs	r3, #2
 8006b06:	73fb      	strb	r3, [r7, #15]
 8006b08:	e001      	b.n	8006b0e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d204      	bcs.n	8006b42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b40:	e001      	b.n	8006b46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b42:	2302      	movs	r3, #2
 8006b44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	4611      	mov	r1, r2
 8006b60:	461a      	mov	r2, r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	70fb      	strb	r3, [r7, #3]
 8006b66:	460b      	mov	r3, r1
 8006b68:	70bb      	strb	r3, [r7, #2]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b7c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b7e:	e025      	b.n	8006bcc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b80:	7dfb      	ldrb	r3, [r7, #23]
 8006b82:	221a      	movs	r2, #26
 8006b84:	fb02 f303 	mul.w	r3, r2, r3
 8006b88:	3308      	adds	r3, #8
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	3302      	adds	r3, #2
 8006b90:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	795b      	ldrb	r3, [r3, #5]
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d002      	beq.n	8006ba2 <USBH_FindInterface+0x4e>
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	2bff      	cmp	r3, #255	; 0xff
 8006ba0:	d111      	bne.n	8006bc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ba6:	78ba      	ldrb	r2, [r7, #2]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d002      	beq.n	8006bb2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bac:	78bb      	ldrb	r3, [r7, #2]
 8006bae:	2bff      	cmp	r3, #255	; 0xff
 8006bb0:	d109      	bne.n	8006bc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bb6:	787a      	ldrb	r2, [r7, #1]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d002      	beq.n	8006bc2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bbc:	787b      	ldrb	r3, [r7, #1]
 8006bbe:	2bff      	cmp	r3, #255	; 0xff
 8006bc0:	d101      	bne.n	8006bc6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	e006      	b.n	8006bd4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bc6:	7dfb      	ldrb	r3, [r7, #23]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d9d6      	bls.n	8006b80 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bd2:	23ff      	movs	r3, #255	; 0xff
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 fc81 	bl	80084f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bee:	2101      	movs	r1, #1
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fd9a 	bl	800872a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3708      	adds	r7, #8
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af04      	add	r7, sp, #16
 8006c06:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d102      	bne.n	8006c22 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b0b      	cmp	r3, #11
 8006c2a:	f200 81be 	bhi.w	8006faa <USBH_Process+0x3aa>
 8006c2e:	a201      	add	r2, pc, #4	; (adr r2, 8006c34 <USBH_Process+0x34>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006c97 	.word	0x08006c97
 8006c3c:	08006cff 	.word	0x08006cff
 8006c40:	08006f45 	.word	0x08006f45
 8006c44:	08006fab 	.word	0x08006fab
 8006c48:	08006da3 	.word	0x08006da3
 8006c4c:	08006eeb 	.word	0x08006eeb
 8006c50:	08006dd9 	.word	0x08006dd9
 8006c54:	08006df9 	.word	0x08006df9
 8006c58:	08006e19 	.word	0x08006e19
 8006c5c:	08006e5d 	.word	0x08006e5d
 8006c60:	08006f2d 	.word	0x08006f2d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 819e 	beq.w	8006fae <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c78:	20c8      	movs	r0, #200	; 0xc8
 8006c7a:	f001 fd9d 	bl	80087b8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fc93 	bl	80085aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c94:	e18b      	b.n	8006fae <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d107      	bne.n	8006cb0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cae:	e18d      	b.n	8006fcc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cba:	d914      	bls.n	8006ce6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d903      	bls.n	8006cde <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	220d      	movs	r2, #13
 8006cda:	701a      	strb	r2, [r3, #0]
      break;
 8006cdc:	e176      	b.n	8006fcc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
      break;
 8006ce4:	e172      	b.n	8006fcc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cec:	f103 020a 	add.w	r2, r3, #10
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cf6:	200a      	movs	r0, #10
 8006cf8:	f001 fd5e 	bl	80087b8 <USBH_Delay>
      break;
 8006cfc:	e166      	b.n	8006fcc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d0e:	2104      	movs	r1, #4
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d14:	2064      	movs	r0, #100	; 0x64
 8006d16:	f001 fd4f 	bl	80087b8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fc1e 	bl	800855c <USBH_LL_GetSpeed>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2205      	movs	r2, #5
 8006d2e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d30:	2100      	movs	r1, #0
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f001 fa29 	bl	800818a <USBH_AllocPipe>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d40:	2180      	movs	r1, #128	; 0x80
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f001 fa21 	bl	800818a <USBH_AllocPipe>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7919      	ldrb	r1, [r3, #4]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d64:	b292      	uxth	r2, r2
 8006d66:	9202      	str	r2, [sp, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2280      	movs	r2, #128	; 0x80
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 f9da 	bl	800812c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7959      	ldrb	r1, [r3, #5]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d8c:	b292      	uxth	r2, r2
 8006d8e:	9202      	str	r2, [sp, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4603      	mov	r3, r0
 8006d98:	2200      	movs	r2, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 f9c6 	bl	800812c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006da0:	e114      	b.n	8006fcc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f918 	bl	8006fd8 <USBH_HandleEnum>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f040 80fe 	bne.w	8006fb2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d103      	bne.n	8006dd0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2208      	movs	r2, #8
 8006dcc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dce:	e0f0      	b.n	8006fb2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2207      	movs	r2, #7
 8006dd4:	701a      	strb	r2, [r3, #0]
      break;
 8006dd6:	e0ec      	b.n	8006fb2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 80e9 	beq.w	8006fb6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dea:	2101      	movs	r1, #1
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2208      	movs	r2, #8
 8006df4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006df6:	e0de      	b.n	8006fb6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fc2c 	bl	8007660 <USBH_SetCfg>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 80d5 	bne.w	8006fba <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2209      	movs	r2, #9
 8006e14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e16:	e0d0      	b.n	8006fba <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d016      	beq.n	8006e54 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e26:	2101      	movs	r1, #1
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fc3c 	bl	80076a6 <USBH_SetFeature>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	220a      	movs	r2, #10
 8006e3e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e40:	e0bd      	b.n	8006fbe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	f040 80b9 	bne.w	8006fbe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	220a      	movs	r2, #10
 8006e50:	701a      	strb	r2, [r3, #0]
      break;
 8006e52:	e0b4      	b.n	8006fbe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	220a      	movs	r2, #10
 8006e58:	701a      	strb	r2, [r3, #0]
      break;
 8006e5a:	e0b0      	b.n	8006fbe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 80ad 	beq.w	8006fc2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	e016      	b.n	8006ea4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	32de      	adds	r2, #222	; 0xde
 8006e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e80:	791a      	ldrb	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d108      	bne.n	8006e9e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e8c:	7bfa      	ldrb	r2, [r7, #15]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	32de      	adds	r2, #222	; 0xde
 8006e92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e9c:	e005      	b.n	8006eaa <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0e5      	beq.n	8006e76 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d016      	beq.n	8006ee2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d109      	bne.n	8006eda <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2206      	movs	r2, #6
 8006eca:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ed2:	2103      	movs	r1, #3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ed8:	e073      	b.n	8006fc2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220d      	movs	r2, #13
 8006ede:	701a      	strb	r2, [r3, #0]
      break;
 8006ee0:	e06f      	b.n	8006fc2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	220d      	movs	r2, #13
 8006ee6:	701a      	strb	r2, [r3, #0]
      break;
 8006ee8:	e06b      	b.n	8006fc2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d017      	beq.n	8006f24 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	220b      	movs	r2, #11
 8006f10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f12:	e058      	b.n	8006fc6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d154      	bne.n	8006fc6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	220d      	movs	r2, #13
 8006f20:	701a      	strb	r2, [r3, #0]
      break;
 8006f22:	e050      	b.n	8006fc6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	220d      	movs	r2, #13
 8006f28:	701a      	strb	r2, [r3, #0]
      break;
 8006f2a:	e04c      	b.n	8006fc6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d049      	beq.n	8006fca <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	4798      	blx	r3
      }
      break;
 8006f42:	e042      	b.n	8006fca <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fd67 	bl	8006a20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f80:	2105      	movs	r1, #5
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d107      	bne.n	8006fa2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7ff fe20 	bl	8006be0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fa0:	e014      	b.n	8006fcc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 faa4 	bl	80084f0 <USBH_LL_Start>
      break;
 8006fa8:	e010      	b.n	8006fcc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006faa:	bf00      	nop
 8006fac:	e00e      	b.n	8006fcc <USBH_Process+0x3cc>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e00c      	b.n	8006fcc <USBH_Process+0x3cc>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e00a      	b.n	8006fcc <USBH_Process+0x3cc>
    break;
 8006fb6:	bf00      	nop
 8006fb8:	e008      	b.n	8006fcc <USBH_Process+0x3cc>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e006      	b.n	8006fcc <USBH_Process+0x3cc>
      break;
 8006fbe:	bf00      	nop
 8006fc0:	e004      	b.n	8006fcc <USBH_Process+0x3cc>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e002      	b.n	8006fcc <USBH_Process+0x3cc>
      break;
 8006fc6:	bf00      	nop
 8006fc8:	e000      	b.n	8006fcc <USBH_Process+0x3cc>
      break;
 8006fca:	bf00      	nop
  }
  return USBH_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af04      	add	r7, sp, #16
 8006fde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	f200 81c1 	bhi.w	8007374 <USBH_HandleEnum+0x39c>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USBH_HandleEnum+0x20>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007019 	.word	0x08007019
 8006ffc:	080070d7 	.word	0x080070d7
 8007000:	08007141 	.word	0x08007141
 8007004:	080071cf 	.word	0x080071cf
 8007008:	08007239 	.word	0x08007239
 800700c:	080072a9 	.word	0x080072a9
 8007010:	080072ef 	.word	0x080072ef
 8007014:	08007335 	.word	0x08007335
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007018:	2108      	movs	r1, #8
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa50 	bl	80074c0 <USBH_Get_DevDesc>
 8007020:	4603      	mov	r3, r0
 8007022:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d130      	bne.n	800708c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7919      	ldrb	r1, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800704e:	b292      	uxth	r2, r2
 8007050:	9202      	str	r2, [sp, #8]
 8007052:	2200      	movs	r2, #0
 8007054:	9201      	str	r2, [sp, #4]
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4603      	mov	r3, r0
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f865 	bl	800812c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	7959      	ldrb	r1, [r3, #5]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007076:	b292      	uxth	r2, r2
 8007078:	9202      	str	r2, [sp, #8]
 800707a:	2200      	movs	r2, #0
 800707c:	9201      	str	r2, [sp, #4]
 800707e:	9300      	str	r3, [sp, #0]
 8007080:	4603      	mov	r3, r0
 8007082:	2200      	movs	r2, #0
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f851 	bl	800812c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800708a:	e175      	b.n	8007378 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	2b03      	cmp	r3, #3
 8007090:	f040 8172 	bne.w	8007378 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800709a:	3301      	adds	r3, #1
 800709c:	b2da      	uxtb	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d903      	bls.n	80070b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	220d      	movs	r2, #13
 80070b2:	701a      	strb	r2, [r3, #0]
      break;
 80070b4:	e160      	b.n	8007378 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	795b      	ldrb	r3, [r3, #5]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 f885 	bl	80081cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	791b      	ldrb	r3, [r3, #4]
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 f87f 	bl	80081cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	701a      	strb	r2, [r3, #0]
      break;
 80070d4:	e150      	b.n	8007378 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070d6:	2112      	movs	r1, #18
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f9f1 	bl	80074c0 <USBH_Get_DevDesc>
 80070de:	4603      	mov	r3, r0
 80070e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070ee:	e145      	b.n	800737c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070f0:	7bbb      	ldrb	r3, [r7, #14]
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	f040 8142 	bne.w	800737c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070fe:	3301      	adds	r3, #1
 8007100:	b2da      	uxtb	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800710e:	2b03      	cmp	r3, #3
 8007110:	d903      	bls.n	800711a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	220d      	movs	r2, #13
 8007116:	701a      	strb	r2, [r3, #0]
      break;
 8007118:	e130      	b.n	800737c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	795b      	ldrb	r3, [r3, #5]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f853 	bl	80081cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 f84d 	bl	80081cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]
      break;
 800713e:	e11d      	b.n	800737c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007140:	2101      	movs	r1, #1
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa68 	bl	8007618 <USBH_SetAddress>
 8007148:	4603      	mov	r3, r0
 800714a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800714c:	7bbb      	ldrb	r3, [r7, #14]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d132      	bne.n	80071b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007152:	2002      	movs	r0, #2
 8007154:	f001 fb30 	bl	80087b8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2203      	movs	r2, #3
 8007164:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7919      	ldrb	r1, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800717a:	b292      	uxth	r2, r2
 800717c:	9202      	str	r2, [sp, #8]
 800717e:	2200      	movs	r2, #0
 8007180:	9201      	str	r2, [sp, #4]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	4603      	mov	r3, r0
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 ffcf 	bl	800812c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	7959      	ldrb	r1, [r3, #5]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071a2:	b292      	uxth	r2, r2
 80071a4:	9202      	str	r2, [sp, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	9201      	str	r2, [sp, #4]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	4603      	mov	r3, r0
 80071ae:	2200      	movs	r2, #0
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 ffbb 	bl	800812c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071b6:	e0e3      	b.n	8007380 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b03      	cmp	r3, #3
 80071bc:	f040 80e0 	bne.w	8007380 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	220d      	movs	r2, #13
 80071c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	705a      	strb	r2, [r3, #1]
      break;
 80071cc:	e0d8      	b.n	8007380 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071ce:	2109      	movs	r1, #9
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f99d 	bl	8007510 <USBH_Get_CfgDesc>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071da:	7bbb      	ldrb	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2204      	movs	r2, #4
 80071e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071e6:	e0cd      	b.n	8007384 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	f040 80ca 	bne.w	8007384 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071f6:	3301      	adds	r3, #1
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007206:	2b03      	cmp	r3, #3
 8007208:	d903      	bls.n	8007212 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	220d      	movs	r2, #13
 800720e:	701a      	strb	r2, [r3, #0]
      break;
 8007210:	e0b8      	b.n	8007384 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	795b      	ldrb	r3, [r3, #5]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 ffd7 	bl	80081cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	791b      	ldrb	r3, [r3, #4]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 ffd1 	bl	80081cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
      break;
 8007236:	e0a5      	b.n	8007384 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f965 	bl	8007510 <USBH_Get_CfgDesc>
 8007246:	4603      	mov	r3, r0
 8007248:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d103      	bne.n	8007258 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2205      	movs	r2, #5
 8007254:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007256:	e097      	b.n	8007388 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007258:	7bbb      	ldrb	r3, [r7, #14]
 800725a:	2b03      	cmp	r3, #3
 800725c:	f040 8094 	bne.w	8007388 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007266:	3301      	adds	r3, #1
 8007268:	b2da      	uxtb	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007276:	2b03      	cmp	r3, #3
 8007278:	d903      	bls.n	8007282 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	220d      	movs	r2, #13
 800727e:	701a      	strb	r2, [r3, #0]
      break;
 8007280:	e082      	b.n	8007388 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	795b      	ldrb	r3, [r3, #5]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 ff9f 	bl	80081cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	791b      	ldrb	r3, [r3, #4]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 ff99 	bl	80081cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	701a      	strb	r2, [r3, #0]
      break;
 80072a6:	e06f      	b.n	8007388 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d019      	beq.n	80072e6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072be:	23ff      	movs	r3, #255	; 0xff
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f949 	bl	8007558 <USBH_Get_StringDesc>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d103      	bne.n	80072d8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2206      	movs	r2, #6
 80072d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072d6:	e059      	b.n	800738c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d156      	bne.n	800738c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2206      	movs	r2, #6
 80072e2:	705a      	strb	r2, [r3, #1]
      break;
 80072e4:	e052      	b.n	800738c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2206      	movs	r2, #6
 80072ea:	705a      	strb	r2, [r3, #1]
      break;
 80072ec:	e04e      	b.n	800738c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d019      	beq.n	800732c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007304:	23ff      	movs	r3, #255	; 0xff
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f926 	bl	8007558 <USBH_Get_StringDesc>
 800730c:	4603      	mov	r3, r0
 800730e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d103      	bne.n	800731e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2207      	movs	r2, #7
 800731a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800731c:	e038      	b.n	8007390 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b03      	cmp	r3, #3
 8007322:	d135      	bne.n	8007390 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2207      	movs	r2, #7
 8007328:	705a      	strb	r2, [r3, #1]
      break;
 800732a:	e031      	b.n	8007390 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2207      	movs	r2, #7
 8007330:	705a      	strb	r2, [r3, #1]
      break;
 8007332:	e02d      	b.n	8007390 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800733a:	2b00      	cmp	r3, #0
 800733c:	d017      	beq.n	800736e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800734a:	23ff      	movs	r3, #255	; 0xff
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f903 	bl	8007558 <USBH_Get_StringDesc>
 8007352:	4603      	mov	r3, r0
 8007354:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d102      	bne.n	8007362 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007360:	e018      	b.n	8007394 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b03      	cmp	r3, #3
 8007366:	d115      	bne.n	8007394 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
      break;
 800736c:	e012      	b.n	8007394 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
      break;
 8007372:	e00f      	b.n	8007394 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007374:	bf00      	nop
 8007376:	e00e      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 8007378:	bf00      	nop
 800737a:	e00c      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 800737c:	bf00      	nop
 800737e:	e00a      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 8007380:	bf00      	nop
 8007382:	e008      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 8007384:	bf00      	nop
 8007386:	e006      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 8007388:	bf00      	nop
 800738a:	e004      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 800738c:	bf00      	nop
 800738e:	e002      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 8007390:	bf00      	nop
 8007392:	e000      	b.n	8007396 <USBH_HandleEnum+0x3be>
      break;
 8007394:	bf00      	nop
  }
  return Status;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b082      	sub	sp, #8
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f804 	bl	80073e2 <USBH_HandleSof>
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b082      	sub	sp, #8
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	2b0b      	cmp	r3, #11
 80073f2:	d10a      	bne.n	800740a <USBH_HandleSof+0x28>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d005      	beq.n	800740a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
  }
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007422:	bf00      	nop
}
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800743e:	bf00      	nop
}
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 f844 	bl	8008526 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	4619      	mov	r1, r3
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fe91 	bl	80081cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	795b      	ldrb	r3, [r3, #5]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fe8b 	bl	80081cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af02      	add	r7, sp, #8
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074de:	2100      	movs	r1, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 f864 	bl	80075ae <USBH_GetDescriptor>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10a      	bne.n	8007506 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074fc:	78fa      	ldrb	r2, [r7, #3]
 80074fe:	b292      	uxth	r2, r2
 8007500:	4619      	mov	r1, r3
 8007502:	f000 f918 	bl	8007736 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007506:	7bfb      	ldrb	r3, [r7, #15]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af02      	add	r7, sp, #8
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	331c      	adds	r3, #28
 8007520:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007522:	887b      	ldrh	r3, [r7, #2]
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800752c:	2100      	movs	r1, #0
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f83d 	bl	80075ae <USBH_GetDescriptor>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d107      	bne.n	800754e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800753e:	887b      	ldrh	r3, [r7, #2]
 8007540:	461a      	mov	r2, r3
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f987 	bl	8007858 <USBH_ParseCfgDesc>
 800754a:	4603      	mov	r3, r0
 800754c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af02      	add	r7, sp, #8
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	461a      	mov	r2, r3
 8007564:	460b      	mov	r3, r1
 8007566:	72fb      	strb	r3, [r7, #11]
 8007568:	4613      	mov	r3, r2
 800756a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800756c:	7afb      	ldrb	r3, [r7, #11]
 800756e:	b29b      	uxth	r3, r3
 8007570:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007574:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800757c:	893b      	ldrh	r3, [r7, #8]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	460b      	mov	r3, r1
 8007582:	2100      	movs	r1, #0
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f812 	bl	80075ae <USBH_GetDescriptor>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d107      	bne.n	80075a4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800759a:	893a      	ldrh	r2, [r7, #8]
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fb24 	bl	8007bec <USBH_ParseStringDesc>
  }

  return status;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	607b      	str	r3, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	72fb      	strb	r3, [r7, #11]
 80075bc:	4613      	mov	r3, r2
 80075be:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	789b      	ldrb	r3, [r3, #2]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d11c      	bne.n	8007602 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075ce:	b2da      	uxtb	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2206      	movs	r2, #6
 80075d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	893a      	ldrh	r2, [r7, #8]
 80075de:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075e0:	893b      	ldrh	r3, [r7, #8]
 80075e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075ea:	d104      	bne.n	80075f6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f240 4209 	movw	r2, #1033	; 0x409
 80075f2:	829a      	strh	r2, [r3, #20]
 80075f4:	e002      	b.n	80075fc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8b3a      	ldrh	r2, [r7, #24]
 8007600:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007602:	8b3b      	ldrh	r3, [r7, #24]
 8007604:	461a      	mov	r2, r3
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fb3d 	bl	8007c88 <USBH_CtlReq>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	789b      	ldrb	r3, [r3, #2]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d10f      	bne.n	800764c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2205      	movs	r2, #5
 8007636:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	b29a      	uxth	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800764c:	2200      	movs	r2, #0
 800764e:	2100      	movs	r1, #0
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fb19 	bl	8007c88 <USBH_CtlReq>
 8007656:	4603      	mov	r3, r0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	789b      	ldrb	r3, [r3, #2]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d10e      	bne.n	8007692 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2209      	movs	r2, #9
 800767e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	887a      	ldrh	r2, [r7, #2]
 8007684:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 faf6 	bl	8007c88 <USBH_CtlReq>
 800769c:	4603      	mov	r3, r0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	789b      	ldrb	r3, [r3, #2]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d10f      	bne.n	80076da <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2203      	movs	r2, #3
 80076c4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076da:	2200      	movs	r2, #0
 80076dc:	2100      	movs	r1, #0
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fad2 	bl	8007c88 <USBH_CtlReq>
 80076e4:	4603      	mov	r3, r0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	789b      	ldrb	r3, [r3, #2]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d10f      	bne.n	8007722 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2202      	movs	r2, #2
 8007706:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	b29a      	uxth	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007722:	2200      	movs	r2, #0
 8007724:	2100      	movs	r1, #0
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 faae 	bl	8007c88 <USBH_CtlReq>
 800772c:	4603      	mov	r3, r0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007736:	b480      	push	{r7}
 8007738:	b085      	sub	sp, #20
 800773a:	af00      	add	r7, sp, #0
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	4613      	mov	r3, r2
 8007742:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	781a      	ldrb	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	785a      	ldrb	r2, [r3, #1]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3302      	adds	r3, #2
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	b29a      	uxth	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	3303      	adds	r3, #3
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	b29b      	uxth	r3, r3
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	b29b      	uxth	r3, r3
 8007768:	4313      	orrs	r3, r2
 800776a:	b29a      	uxth	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	791a      	ldrb	r2, [r3, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	795a      	ldrb	r2, [r3, #5]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	799a      	ldrb	r2, [r3, #6]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	79da      	ldrb	r2, [r3, #7]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	79db      	ldrb	r3, [r3, #7]
 8007794:	2b20      	cmp	r3, #32
 8007796:	dc11      	bgt.n	80077bc <USBH_ParseDevDesc+0x86>
 8007798:	2b08      	cmp	r3, #8
 800779a:	db16      	blt.n	80077ca <USBH_ParseDevDesc+0x94>
 800779c:	3b08      	subs	r3, #8
 800779e:	2201      	movs	r2, #1
 80077a0:	fa02 f303 	lsl.w	r3, r2, r3
 80077a4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80077a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bf14      	ite	ne
 80077b0:	2301      	movne	r3, #1
 80077b2:	2300      	moveq	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d102      	bne.n	80077c0 <USBH_ParseDevDesc+0x8a>
 80077ba:	e006      	b.n	80077ca <USBH_ParseDevDesc+0x94>
 80077bc:	2b40      	cmp	r3, #64	; 0x40
 80077be:	d104      	bne.n	80077ca <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	79da      	ldrb	r2, [r3, #7]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	71da      	strb	r2, [r3, #7]
      break;
 80077c8:	e003      	b.n	80077d2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2240      	movs	r2, #64	; 0x40
 80077ce:	71da      	strb	r2, [r3, #7]
      break;
 80077d0:	bf00      	nop
  }

  if (length > 8U)
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d939      	bls.n	800784c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	3308      	adds	r3, #8
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	3309      	adds	r3, #9
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	4313      	orrs	r3, r2
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	330a      	adds	r3, #10
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	330b      	adds	r3, #11
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b29b      	uxth	r3, r3
 8007804:	021b      	lsls	r3, r3, #8
 8007806:	b29b      	uxth	r3, r3
 8007808:	4313      	orrs	r3, r2
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	330c      	adds	r3, #12
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	b29a      	uxth	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	330d      	adds	r3, #13
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	b29b      	uxth	r3, r3
 8007824:	4313      	orrs	r3, r2
 8007826:	b29a      	uxth	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	7b9a      	ldrb	r2, [r3, #14]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	7bda      	ldrb	r2, [r3, #15]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	7c1a      	ldrb	r2, [r3, #16]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	7c5a      	ldrb	r2, [r3, #17]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	745a      	strb	r2, [r3, #17]
  }
}
 800784c:	bf00      	nop
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	; 0x30
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	4613      	mov	r3, r2
 8007864:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800786c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	781a      	ldrb	r2, [r3, #0]
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	785a      	ldrb	r2, [r3, #1]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	3302      	adds	r3, #2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	3303      	adds	r3, #3
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	4313      	orrs	r3, r2
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b4:	bf28      	it	cs
 80078b6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	791a      	ldrb	r2, [r3, #4]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	795a      	ldrb	r2, [r3, #5]
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	799a      	ldrb	r2, [r3, #6]
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	79da      	ldrb	r2, [r3, #7]
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	7a1a      	ldrb	r2, [r3, #8]
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b09      	cmp	r3, #9
 80078ee:	d002      	beq.n	80078f6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	2209      	movs	r2, #9
 80078f4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078f6:	88fb      	ldrh	r3, [r7, #6]
 80078f8:	2b09      	cmp	r3, #9
 80078fa:	f240 809d 	bls.w	8007a38 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80078fe:	2309      	movs	r3, #9
 8007900:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007902:	2300      	movs	r3, #0
 8007904:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007906:	e081      	b.n	8007a0c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007908:	f107 0316 	add.w	r3, r7, #22
 800790c:	4619      	mov	r1, r3
 800790e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007910:	f000 f99f 	bl	8007c52 <USBH_GetNextDesc>
 8007914:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	785b      	ldrb	r3, [r3, #1]
 800791a:	2b04      	cmp	r3, #4
 800791c:	d176      	bne.n	8007a0c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b09      	cmp	r3, #9
 8007924:	d002      	beq.n	800792c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	2209      	movs	r2, #9
 800792a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800792c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007930:	221a      	movs	r2, #26
 8007932:	fb02 f303 	mul.w	r3, r2, r3
 8007936:	3308      	adds	r3, #8
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	4413      	add	r3, r2
 800793c:	3302      	adds	r3, #2
 800793e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007942:	69f8      	ldr	r0, [r7, #28]
 8007944:	f000 f87e 	bl	8007a44 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800794e:	2300      	movs	r3, #0
 8007950:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007952:	e043      	b.n	80079dc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007954:	f107 0316 	add.w	r3, r7, #22
 8007958:	4619      	mov	r1, r3
 800795a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800795c:	f000 f979 	bl	8007c52 <USBH_GetNextDesc>
 8007960:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	785b      	ldrb	r3, [r3, #1]
 8007966:	2b05      	cmp	r3, #5
 8007968:	d138      	bne.n	80079dc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	795b      	ldrb	r3, [r3, #5]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10f      	bne.n	8007992 <USBH_ParseCfgDesc+0x13a>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	799b      	ldrb	r3, [r3, #6]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d10b      	bne.n	8007992 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	79db      	ldrb	r3, [r3, #7]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10f      	bne.n	80079a2 <USBH_ParseCfgDesc+0x14a>
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b09      	cmp	r3, #9
 8007988:	d00b      	beq.n	80079a2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	2209      	movs	r2, #9
 800798e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007990:	e007      	b.n	80079a2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b07      	cmp	r3, #7
 8007998:	d004      	beq.n	80079a4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	2207      	movs	r2, #7
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e000      	b.n	80079a4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079a2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079ac:	3201      	adds	r2, #1
 80079ae:	00d2      	lsls	r2, r2, #3
 80079b0:	211a      	movs	r1, #26
 80079b2:	fb01 f303 	mul.w	r3, r1, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	3308      	adds	r3, #8
 80079ba:	6a3a      	ldr	r2, [r7, #32]
 80079bc:	4413      	add	r3, r2
 80079be:	3304      	adds	r3, #4
 80079c0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80079c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079c4:	69b9      	ldr	r1, [r7, #24]
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 f86b 	bl	8007aa2 <USBH_ParseEPDesc>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80079d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079d6:	3301      	adds	r3, #1
 80079d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d204      	bcs.n	80079f2 <USBH_ParseCfgDesc+0x19a>
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	885a      	ldrh	r2, [r3, #2]
 80079ec:	8afb      	ldrh	r3, [r7, #22]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d8b0      	bhi.n	8007954 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	791b      	ldrb	r3, [r3, #4]
 80079f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d201      	bcs.n	8007a02 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e01c      	b.n	8007a3c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a06:	3301      	adds	r3, #1
 8007a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d805      	bhi.n	8007a20 <USBH_ParseCfgDesc+0x1c8>
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	885a      	ldrh	r2, [r3, #2]
 8007a18:	8afb      	ldrh	r3, [r7, #22]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	f63f af74 	bhi.w	8007908 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	791b      	ldrb	r3, [r3, #4]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	bf28      	it	cs
 8007a28:	2302      	movcs	r3, #2
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d201      	bcs.n	8007a38 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e001      	b.n	8007a3c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3730      	adds	r7, #48	; 0x30
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	785a      	ldrb	r2, [r3, #1]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	789a      	ldrb	r2, [r3, #2]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	78da      	ldrb	r2, [r3, #3]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	791a      	ldrb	r2, [r3, #4]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	795a      	ldrb	r2, [r3, #5]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	799a      	ldrb	r2, [r3, #6]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	79da      	ldrb	r2, [r3, #7]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	7a1a      	ldrb	r2, [r3, #8]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	721a      	strb	r2, [r3, #8]
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b087      	sub	sp, #28
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	60f8      	str	r0, [r7, #12]
 8007aaa:	60b9      	str	r1, [r7, #8]
 8007aac:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	781a      	ldrb	r2, [r3, #0]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	785a      	ldrb	r2, [r3, #1]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	789a      	ldrb	r2, [r3, #2]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	78da      	ldrb	r2, [r3, #3]
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3305      	adds	r3, #5
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	021b      	lsls	r3, r3, #8
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	799a      	ldrb	r2, [r3, #6]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	889b      	ldrh	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007afe:	2303      	movs	r3, #3
 8007b00:	75fb      	strb	r3, [r7, #23]
 8007b02:	e033      	b.n	8007b6c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	889b      	ldrh	r3, [r3, #4]
 8007b08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	889b      	ldrh	r3, [r3, #4]
 8007b1a:	b21a      	sxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b299      	uxth	r1, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3305      	adds	r3, #5
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	430b      	orrs	r3, r1
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d110      	bne.n	8007b5e <USBH_ParseEPDesc+0xbc>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	b299      	uxth	r1, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3305      	adds	r3, #5
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	430b      	orrs	r3, r1
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	b21b      	sxth	r3, r3
 8007b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b5a:	b21b      	sxth	r3, r3
 8007b5c:	e001      	b.n	8007b62 <USBH_ParseEPDesc+0xc0>
 8007b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b21b      	sxth	r3, r3
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d116      	bne.n	8007ba4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	78db      	ldrb	r3, [r3, #3]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d005      	beq.n	8007b8e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	78db      	ldrb	r3, [r3, #3]
 8007b86:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d127      	bne.n	8007bde <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	799b      	ldrb	r3, [r3, #6]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d003      	beq.n	8007b9e <USBH_ParseEPDesc+0xfc>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	799b      	ldrb	r3, [r3, #6]
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	d91f      	bls.n	8007bde <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	75fb      	strb	r3, [r7, #23]
 8007ba2:	e01c      	b.n	8007bde <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	f003 0303 	and.w	r3, r3, #3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d10a      	bne.n	8007bc6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	799b      	ldrb	r3, [r3, #6]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d003      	beq.n	8007bc0 <USBH_ParseEPDesc+0x11e>
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	799b      	ldrb	r3, [r3, #6]
 8007bbc:	2b10      	cmp	r3, #16
 8007bbe:	d90e      	bls.n	8007bde <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	75fb      	strb	r3, [r7, #23]
 8007bc4:	e00b      	b.n	8007bde <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	78db      	ldrb	r3, [r3, #3]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d105      	bne.n	8007bde <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	799b      	ldrb	r3, [r3, #6]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	371c      	adds	r7, #28
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d120      	bne.n	8007c46 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	1e9a      	subs	r2, r3, #2
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	bf28      	it	cs
 8007c10:	4613      	movcs	r3, r2
 8007c12:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	3302      	adds	r3, #2
 8007c18:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	82fb      	strh	r3, [r7, #22]
 8007c1e:	e00b      	b.n	8007c38 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c20:	8afb      	ldrh	r3, [r7, #22]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4413      	add	r3, r2
 8007c26:	781a      	ldrb	r2, [r3, #0]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c32:	8afb      	ldrh	r3, [r7, #22]
 8007c34:	3302      	adds	r3, #2
 8007c36:	82fb      	strh	r3, [r7, #22]
 8007c38:	8afa      	ldrh	r2, [r7, #22]
 8007c3a:	8abb      	ldrh	r3, [r7, #20]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d3ef      	bcc.n	8007c20 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
  }
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	881a      	ldrh	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4413      	add	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c96:	2301      	movs	r3, #1
 8007c98:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	789b      	ldrb	r3, [r3, #2]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d002      	beq.n	8007ca8 <USBH_CtlReq+0x20>
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d00f      	beq.n	8007cc6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ca6:	e027      	b.n	8007cf8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	88fa      	ldrh	r2, [r7, #6]
 8007cb2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2202      	movs	r2, #2
 8007cbe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc4:	e018      	b.n	8007cf8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	f000 f81c 	bl	8007d04 <USBH_HandleControl>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <USBH_CtlReq+0x54>
 8007cd6:	7dfb      	ldrb	r3, [r7, #23]
 8007cd8:	2b03      	cmp	r3, #3
 8007cda:	d106      	bne.n	8007cea <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	761a      	strb	r2, [r3, #24]
      break;
 8007ce8:	e005      	b.n	8007cf6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d102      	bne.n	8007cf6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	709a      	strb	r2, [r3, #2]
      break;
 8007cf6:	bf00      	nop
  }
  return status;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	7e1b      	ldrb	r3, [r3, #24]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	2b0a      	cmp	r3, #10
 8007d1c:	f200 8156 	bhi.w	8007fcc <USBH_HandleControl+0x2c8>
 8007d20:	a201      	add	r2, pc, #4	; (adr r2, 8007d28 <USBH_HandleControl+0x24>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6f 	.word	0x08007d6f
 8007d30:	08007dd9 	.word	0x08007dd9
 8007d34:	08007dff 	.word	0x08007dff
 8007d38:	08007e37 	.word	0x08007e37
 8007d3c:	08007e61 	.word	0x08007e61
 8007d40:	08007eb3 	.word	0x08007eb3
 8007d44:	08007ed5 	.word	0x08007ed5
 8007d48:	08007f11 	.word	0x08007f11
 8007d4c:	08007f37 	.word	0x08007f37
 8007d50:	08007f75 	.word	0x08007f75
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f103 0110 	add.w	r1, r3, #16
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	795b      	ldrb	r3, [r3, #5]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f943 	bl	8007fec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	761a      	strb	r2, [r3, #24]
      break;
 8007d6c:	e139      	b.n	8007fe2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	795b      	ldrb	r3, [r3, #5]
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fcc5 	bl	8008704 <USBH_LL_GetURBState>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d11e      	bne.n	8007dc2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	7c1b      	ldrb	r3, [r3, #16]
 8007d88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	8adb      	ldrh	r3, [r3, #22]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d96:	7b7b      	ldrb	r3, [r7, #13]
 8007d98:	2b80      	cmp	r3, #128	; 0x80
 8007d9a:	d103      	bne.n	8007da4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2203      	movs	r2, #3
 8007da0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007da2:	e115      	b.n	8007fd0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2205      	movs	r2, #5
 8007da8:	761a      	strb	r2, [r3, #24]
      break;
 8007daa:	e111      	b.n	8007fd0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007dac:	7b7b      	ldrb	r3, [r7, #13]
 8007dae:	2b80      	cmp	r3, #128	; 0x80
 8007db0:	d103      	bne.n	8007dba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2209      	movs	r2, #9
 8007db6:	761a      	strb	r2, [r3, #24]
      break;
 8007db8:	e10a      	b.n	8007fd0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2207      	movs	r2, #7
 8007dbe:	761a      	strb	r2, [r3, #24]
      break;
 8007dc0:	e106      	b.n	8007fd0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b04      	cmp	r3, #4
 8007dc6:	d003      	beq.n	8007dd0 <USBH_HandleControl+0xcc>
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	f040 8100 	bne.w	8007fd0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	220b      	movs	r2, #11
 8007dd4:	761a      	strb	r2, [r3, #24]
      break;
 8007dd6:	e0fb      	b.n	8007fd0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6899      	ldr	r1, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	899a      	ldrh	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	791b      	ldrb	r3, [r3, #4]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f93a 	bl	800806a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2204      	movs	r2, #4
 8007dfa:	761a      	strb	r2, [r3, #24]
      break;
 8007dfc:	e0f1      	b.n	8007fe2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	791b      	ldrb	r3, [r3, #4]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fc7d 	bl	8008704 <USBH_LL_GetURBState>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d102      	bne.n	8007e1a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2209      	movs	r2, #9
 8007e18:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	2b05      	cmp	r3, #5
 8007e1e:	d102      	bne.n	8007e26 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e20:	2303      	movs	r3, #3
 8007e22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e24:	e0d6      	b.n	8007fd4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e26:	7bbb      	ldrb	r3, [r7, #14]
 8007e28:	2b04      	cmp	r3, #4
 8007e2a:	f040 80d3 	bne.w	8007fd4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	220b      	movs	r2, #11
 8007e32:	761a      	strb	r2, [r3, #24]
      break;
 8007e34:	e0ce      	b.n	8007fd4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6899      	ldr	r1, [r3, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	899a      	ldrh	r2, [r3, #12]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	795b      	ldrb	r3, [r3, #5]
 8007e42:	2001      	movs	r0, #1
 8007e44:	9000      	str	r0, [sp, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f8ea 	bl	8008020 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2206      	movs	r2, #6
 8007e5c:	761a      	strb	r2, [r3, #24]
      break;
 8007e5e:	e0c0      	b.n	8007fe2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	795b      	ldrb	r3, [r3, #5]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fc4c 	bl	8008704 <USBH_LL_GetURBState>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d103      	bne.n	8007e7e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2207      	movs	r2, #7
 8007e7a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e7c:	e0ac      	b.n	8007fd8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b05      	cmp	r3, #5
 8007e82:	d105      	bne.n	8007e90 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	220c      	movs	r2, #12
 8007e88:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8e:	e0a3      	b.n	8007fd8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d103      	bne.n	8007e9e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2205      	movs	r2, #5
 8007e9a:	761a      	strb	r2, [r3, #24]
      break;
 8007e9c:	e09c      	b.n	8007fd8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	f040 8099 	bne.w	8007fd8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	220b      	movs	r2, #11
 8007eaa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007eac:	2302      	movs	r3, #2
 8007eae:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb0:	e092      	b.n	8007fd8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	791b      	ldrb	r3, [r3, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2100      	movs	r1, #0
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f8d5 	bl	800806a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2208      	movs	r2, #8
 8007ed0:	761a      	strb	r2, [r3, #24]

      break;
 8007ed2:	e086      	b.n	8007fe2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	791b      	ldrb	r3, [r3, #4]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 fc12 	bl	8008704 <USBH_LL_GetURBState>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d105      	bne.n	8007ef6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	220d      	movs	r2, #13
 8007eee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ef4:	e072      	b.n	8007fdc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b04      	cmp	r3, #4
 8007efa:	d103      	bne.n	8007f04 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	220b      	movs	r2, #11
 8007f00:	761a      	strb	r2, [r3, #24]
      break;
 8007f02:	e06b      	b.n	8007fdc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b05      	cmp	r3, #5
 8007f08:	d168      	bne.n	8007fdc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f0e:	e065      	b.n	8007fdc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	795b      	ldrb	r3, [r3, #5]
 8007f14:	2201      	movs	r2, #1
 8007f16:	9200      	str	r2, [sp, #0]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f87f 	bl	8008020 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220a      	movs	r2, #10
 8007f32:	761a      	strb	r2, [r3, #24]
      break;
 8007f34:	e055      	b.n	8007fe2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	795b      	ldrb	r3, [r3, #5]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fbe1 	bl	8008704 <USBH_LL_GetURBState>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f46:	7bbb      	ldrb	r3, [r7, #14]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d105      	bne.n	8007f58 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	220d      	movs	r2, #13
 8007f54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f56:	e043      	b.n	8007fe0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d103      	bne.n	8007f66 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2209      	movs	r2, #9
 8007f62:	761a      	strb	r2, [r3, #24]
      break;
 8007f64:	e03c      	b.n	8007fe0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f66:	7bbb      	ldrb	r3, [r7, #14]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d139      	bne.n	8007fe0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	220b      	movs	r2, #11
 8007f70:	761a      	strb	r2, [r3, #24]
      break;
 8007f72:	e035      	b.n	8007fe0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	7e5b      	ldrb	r3, [r3, #25]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	765a      	strb	r2, [r3, #25]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	7e5b      	ldrb	r3, [r3, #25]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d806      	bhi.n	8007f96 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f94:	e025      	b.n	8007fe2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f9c:	2106      	movs	r1, #6
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	795b      	ldrb	r3, [r3, #5]
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f90c 	bl	80081cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	791b      	ldrb	r3, [r3, #4]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f906 	bl	80081cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007fca:	e00a      	b.n	8007fe2 <USBH_HandleControl+0x2de>

    default:
      break;
 8007fcc:	bf00      	nop
 8007fce:	e008      	b.n	8007fe2 <USBH_HandleControl+0x2de>
      break;
 8007fd0:	bf00      	nop
 8007fd2:	e006      	b.n	8007fe2 <USBH_HandleControl+0x2de>
      break;
 8007fd4:	bf00      	nop
 8007fd6:	e004      	b.n	8007fe2 <USBH_HandleControl+0x2de>
      break;
 8007fd8:	bf00      	nop
 8007fda:	e002      	b.n	8007fe2 <USBH_HandleControl+0x2de>
      break;
 8007fdc:	bf00      	nop
 8007fde:	e000      	b.n	8007fe2 <USBH_HandleControl+0x2de>
      break;
 8007fe0:	bf00      	nop
  }

  return status;
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ffa:	79f9      	ldrb	r1, [r7, #7]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	9303      	str	r3, [sp, #12]
 8008000:	2308      	movs	r3, #8
 8008002:	9302      	str	r3, [sp, #8]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	9301      	str	r3, [sp, #4]
 8008008:	2300      	movs	r3, #0
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	2200      	movs	r2, #0
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 fb46 	bl	80086a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b088      	sub	sp, #32
 8008024:	af04      	add	r7, sp, #16
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4611      	mov	r1, r2
 800802c:	461a      	mov	r2, r3
 800802e:	460b      	mov	r3, r1
 8008030:	80fb      	strh	r3, [r7, #6]
 8008032:	4613      	mov	r3, r2
 8008034:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008040:	2300      	movs	r3, #0
 8008042:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008044:	7979      	ldrb	r1, [r7, #5]
 8008046:	7e3b      	ldrb	r3, [r7, #24]
 8008048:	9303      	str	r3, [sp, #12]
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	9302      	str	r3, [sp, #8]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	2301      	movs	r3, #1
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	2300      	movs	r3, #0
 8008058:	2200      	movs	r2, #0
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 fb21 	bl	80086a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}

0800806a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	b088      	sub	sp, #32
 800806e:	af04      	add	r7, sp, #16
 8008070:	60f8      	str	r0, [r7, #12]
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	4611      	mov	r1, r2
 8008076:	461a      	mov	r2, r3
 8008078:	460b      	mov	r3, r1
 800807a:	80fb      	strh	r3, [r7, #6]
 800807c:	4613      	mov	r3, r2
 800807e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008080:	7979      	ldrb	r1, [r7, #5]
 8008082:	2300      	movs	r3, #0
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	9302      	str	r3, [sp, #8]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	2301      	movs	r3, #1
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	2300      	movs	r3, #0
 8008094:	2201      	movs	r2, #1
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fb03 	bl	80086a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800809c:	2300      	movs	r3, #0

}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b088      	sub	sp, #32
 80080aa:	af04      	add	r7, sp, #16
 80080ac:	60f8      	str	r0, [r7, #12]
 80080ae:	60b9      	str	r1, [r7, #8]
 80080b0:	4611      	mov	r1, r2
 80080b2:	461a      	mov	r2, r3
 80080b4:	460b      	mov	r3, r1
 80080b6:	80fb      	strh	r3, [r7, #6]
 80080b8:	4613      	mov	r3, r2
 80080ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ca:	7979      	ldrb	r1, [r7, #5]
 80080cc:	7e3b      	ldrb	r3, [r7, #24]
 80080ce:	9303      	str	r3, [sp, #12]
 80080d0:	88fb      	ldrh	r3, [r7, #6]
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	2301      	movs	r3, #1
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	2302      	movs	r3, #2
 80080de:	2200      	movs	r2, #0
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fade 	bl	80086a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af04      	add	r7, sp, #16
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	4611      	mov	r1, r2
 80080fc:	461a      	mov	r2, r3
 80080fe:	460b      	mov	r3, r1
 8008100:	80fb      	strh	r3, [r7, #6]
 8008102:	4613      	mov	r3, r2
 8008104:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008106:	7979      	ldrb	r1, [r7, #5]
 8008108:	2300      	movs	r3, #0
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	9302      	str	r3, [sp, #8]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	2301      	movs	r3, #1
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2302      	movs	r3, #2
 800811a:	2201      	movs	r2, #1
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 fac0 	bl	80086a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af04      	add	r7, sp, #16
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	4608      	mov	r0, r1
 8008136:	4611      	mov	r1, r2
 8008138:	461a      	mov	r2, r3
 800813a:	4603      	mov	r3, r0
 800813c:	70fb      	strb	r3, [r7, #3]
 800813e:	460b      	mov	r3, r1
 8008140:	70bb      	strb	r3, [r7, #2]
 8008142:	4613      	mov	r3, r2
 8008144:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008146:	7878      	ldrb	r0, [r7, #1]
 8008148:	78ba      	ldrb	r2, [r7, #2]
 800814a:	78f9      	ldrb	r1, [r7, #3]
 800814c:	8b3b      	ldrh	r3, [r7, #24]
 800814e:	9302      	str	r3, [sp, #8]
 8008150:	7d3b      	ldrb	r3, [r7, #20]
 8008152:	9301      	str	r3, [sp, #4]
 8008154:	7c3b      	ldrb	r3, [r7, #16]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	4603      	mov	r3, r0
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa53 	bl	8008606 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008176:	78fb      	ldrb	r3, [r7, #3]
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa72 	bl	8008664 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	460b      	mov	r3, r1
 8008194:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f836 	bl	8008208 <USBH_GetFreePipe>
 800819c:	4603      	mov	r3, r0
 800819e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081a0:	89fb      	ldrh	r3, [r7, #14]
 80081a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00a      	beq.n	80081c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80081aa:	78fa      	ldrb	r2, [r7, #3]
 80081ac:	89fb      	ldrh	r3, [r7, #14]
 80081ae:	f003 030f 	and.w	r3, r3, #15
 80081b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	33e0      	adds	r3, #224	; 0xe0
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80081c0:	89fb      	ldrh	r3, [r7, #14]
 80081c2:	b2db      	uxtb	r3, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3710      	adds	r7, #16
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	2b0f      	cmp	r3, #15
 80081dc:	d80d      	bhi.n	80081fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	33e0      	adds	r3, #224	; 0xe0
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80081f0:	6879      	ldr	r1, [r7, #4]
 80081f2:	33e0      	adds	r3, #224	; 0xe0
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	440b      	add	r3, r1
 80081f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e00f      	b.n	800823a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	33e0      	adds	r3, #224	; 0xe0
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d102      	bne.n	8008234 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	b29b      	uxth	r3, r3
 8008232:	e007      	b.n	8008244 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	3301      	adds	r3, #1
 8008238:	73fb      	strb	r3, [r7, #15]
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	2b0f      	cmp	r3, #15
 800823e:	d9ec      	bls.n	800821a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008240:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008254:	2201      	movs	r2, #1
 8008256:	490e      	ldr	r1, [pc, #56]	; (8008290 <MX_USB_HOST_Init+0x40>)
 8008258:	480e      	ldr	r0, [pc, #56]	; (8008294 <MX_USB_HOST_Init+0x44>)
 800825a:	f7fe fba7 	bl	80069ac <USBH_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008264:	f7f8 fca6 	bl	8000bb4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008268:	490b      	ldr	r1, [pc, #44]	; (8008298 <MX_USB_HOST_Init+0x48>)
 800826a:	480a      	ldr	r0, [pc, #40]	; (8008294 <MX_USB_HOST_Init+0x44>)
 800826c:	f7fe fc2c 	bl	8006ac8 <USBH_RegisterClass>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008276:	f7f8 fc9d 	bl	8000bb4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800827a:	4806      	ldr	r0, [pc, #24]	; (8008294 <MX_USB_HOST_Init+0x44>)
 800827c:	f7fe fcb0 	bl	8006be0 <USBH_Start>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008286:	f7f8 fc95 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800828a:	bf00      	nop
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	080082b1 	.word	0x080082b1
 8008294:	200001f0 	.word	0x200001f0
 8008298:	2000000c 	.word	0x2000000c

0800829c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082a0:	4802      	ldr	r0, [pc, #8]	; (80082ac <MX_USB_HOST_Process+0x10>)
 80082a2:	f7fe fcad 	bl	8006c00 <USBH_Process>
}
 80082a6:	bf00      	nop
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	200001f0 	.word	0x200001f0

080082b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	460b      	mov	r3, r1
 80082ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	3b01      	subs	r3, #1
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d819      	bhi.n	80082f8 <USBH_UserProcess+0x48>
 80082c4:	a201      	add	r2, pc, #4	; (adr r2, 80082cc <USBH_UserProcess+0x1c>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082f9 	.word	0x080082f9
 80082d8:	080082f1 	.word	0x080082f1
 80082dc:	080082e1 	.word	0x080082e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80082e0:	4b09      	ldr	r3, [pc, #36]	; (8008308 <USBH_UserProcess+0x58>)
 80082e2:	2203      	movs	r2, #3
 80082e4:	701a      	strb	r2, [r3, #0]
  break;
 80082e6:	e008      	b.n	80082fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80082e8:	4b07      	ldr	r3, [pc, #28]	; (8008308 <USBH_UserProcess+0x58>)
 80082ea:	2202      	movs	r2, #2
 80082ec:	701a      	strb	r2, [r3, #0]
  break;
 80082ee:	e004      	b.n	80082fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80082f0:	4b05      	ldr	r3, [pc, #20]	; (8008308 <USBH_UserProcess+0x58>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	701a      	strb	r2, [r3, #0]
  break;
 80082f6:	e000      	b.n	80082fa <USBH_UserProcess+0x4a>

  default:
  break;
 80082f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	200005c8 	.word	0x200005c8

0800830c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b08a      	sub	sp, #40	; 0x28
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008314:	f107 0314 	add.w	r3, r7, #20
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	609a      	str	r2, [r3, #8]
 8008320:	60da      	str	r2, [r3, #12]
 8008322:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800832c:	d147      	bne.n	80083be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800832e:	2300      	movs	r3, #0
 8008330:	613b      	str	r3, [r7, #16]
 8008332:	4b25      	ldr	r3, [pc, #148]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	4a24      	ldr	r2, [pc, #144]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 8008338:	f043 0301 	orr.w	r3, r3, #1
 800833c:	6313      	str	r3, [r2, #48]	; 0x30
 800833e:	4b22      	ldr	r3, [pc, #136]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	f003 0301 	and.w	r3, r3, #1
 8008346:	613b      	str	r3, [r7, #16]
 8008348:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800834a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800834e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008350:	2300      	movs	r3, #0
 8008352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008354:	2300      	movs	r3, #0
 8008356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	4619      	mov	r1, r3
 800835e:	481b      	ldr	r0, [pc, #108]	; (80083cc <HAL_HCD_MspInit+0xc0>)
 8008360:	f7f8 ff5a 	bl	8001218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008364:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800836a:	2302      	movs	r3, #2
 800836c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800836e:	2300      	movs	r3, #0
 8008370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008372:	2303      	movs	r3, #3
 8008374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008376:	230a      	movs	r3, #10
 8008378:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800837a:	f107 0314 	add.w	r3, r7, #20
 800837e:	4619      	mov	r1, r3
 8008380:	4812      	ldr	r0, [pc, #72]	; (80083cc <HAL_HCD_MspInit+0xc0>)
 8008382:	f7f8 ff49 	bl	8001218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 8008388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838a:	4a0f      	ldr	r2, [pc, #60]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 800838c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008390:	6353      	str	r3, [r2, #52]	; 0x34
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 8008398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839a:	4a0b      	ldr	r2, [pc, #44]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 800839c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083a0:	6453      	str	r3, [r2, #68]	; 0x44
 80083a2:	4b09      	ldr	r3, [pc, #36]	; (80083c8 <HAL_HCD_MspInit+0xbc>)
 80083a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083ae:	2200      	movs	r2, #0
 80083b0:	2100      	movs	r1, #0
 80083b2:	2043      	movs	r0, #67	; 0x43
 80083b4:	f7f8 fee0 	bl	8001178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083b8:	2043      	movs	r0, #67	; 0x43
 80083ba:	f7f8 ff09 	bl	80011d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083be:	bf00      	nop
 80083c0:	3728      	adds	r7, #40	; 0x28
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	40023800 	.word	0x40023800
 80083cc:	40020000 	.word	0x40020000

080083d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe ffed 	bl	80073be <USBH_LL_IncTimer>
}
 80083e4:	bf00      	nop
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff f825 	bl	800744a <USBH_LL_Connect>
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff f82e 	bl	8007478 <USBH_LL_Disconnect>
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
 8008430:	4613      	mov	r3, r2
 8008432:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe ffdf 	bl	8007412 <USBH_LL_PortEnabled>
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe ffdf 	bl	800742e <USBH_LL_PortDisabled>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008486:	2b01      	cmp	r3, #1
 8008488:	d12a      	bne.n	80084e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800848a:	4a18      	ldr	r2, [pc, #96]	; (80084ec <USBH_LL_Init+0x74>)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a15      	ldr	r2, [pc, #84]	; (80084ec <USBH_LL_Init+0x74>)
 8008496:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800849a:	4b14      	ldr	r3, [pc, #80]	; (80084ec <USBH_LL_Init+0x74>)
 800849c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084a2:	4b12      	ldr	r3, [pc, #72]	; (80084ec <USBH_LL_Init+0x74>)
 80084a4:	2208      	movs	r2, #8
 80084a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084a8:	4b10      	ldr	r3, [pc, #64]	; (80084ec <USBH_LL_Init+0x74>)
 80084aa:	2201      	movs	r2, #1
 80084ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <USBH_LL_Init+0x74>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084b4:	4b0d      	ldr	r3, [pc, #52]	; (80084ec <USBH_LL_Init+0x74>)
 80084b6:	2202      	movs	r2, #2
 80084b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084ba:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <USBH_LL_Init+0x74>)
 80084bc:	2200      	movs	r2, #0
 80084be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80084c0:	480a      	ldr	r0, [pc, #40]	; (80084ec <USBH_LL_Init+0x74>)
 80084c2:	f7f9 f9c3 	bl	800184c <HAL_HCD_Init>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80084cc:	f7f8 fb72 	bl	8000bb4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80084d0:	4806      	ldr	r0, [pc, #24]	; (80084ec <USBH_LL_Init+0x74>)
 80084d2:	f7f9 fdb2 	bl	800203a <HAL_HCD_GetCurrentFrame>
 80084d6:	4603      	mov	r3, r0
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7fe ff60 	bl	80073a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	200005cc 	.word	0x200005cc

080084f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008506:	4618      	mov	r0, r3
 8008508:	f7f9 fd21 	bl	8001f4e <HAL_HCD_Start>
 800850c:	4603      	mov	r3, r0
 800850e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	4618      	mov	r0, r3
 8008514:	f000 f95c 	bl	80087d0 <USBH_Get_USB_Status>
 8008518:	4603      	mov	r3, r0
 800851a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800851c:	7bbb      	ldrb	r3, [r7, #14]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008532:	2300      	movs	r3, #0
 8008534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800853c:	4618      	mov	r0, r3
 800853e:	f7f9 fd29 	bl	8001f94 <HAL_HCD_Stop>
 8008542:	4603      	mov	r3, r0
 8008544:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	4618      	mov	r0, r3
 800854a:	f000 f941 	bl	80087d0 <USBH_Get_USB_Status>
 800854e:	4603      	mov	r3, r0
 8008550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008552:	7bbb      	ldrb	r3, [r7, #14]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800856e:	4618      	mov	r0, r3
 8008570:	f7f9 fd71 	bl	8002056 <HAL_HCD_GetCurrentSpeed>
 8008574:	4603      	mov	r3, r0
 8008576:	2b02      	cmp	r3, #2
 8008578:	d00c      	beq.n	8008594 <USBH_LL_GetSpeed+0x38>
 800857a:	2b02      	cmp	r3, #2
 800857c:	d80d      	bhi.n	800859a <USBH_LL_GetSpeed+0x3e>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <USBH_LL_GetSpeed+0x2c>
 8008582:	2b01      	cmp	r3, #1
 8008584:	d003      	beq.n	800858e <USBH_LL_GetSpeed+0x32>
 8008586:	e008      	b.n	800859a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
    break;
 800858c:	e008      	b.n	80085a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800858e:	2301      	movs	r3, #1
 8008590:	73fb      	strb	r3, [r7, #15]
    break;
 8008592:	e005      	b.n	80085a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008594:	2302      	movs	r3, #2
 8008596:	73fb      	strb	r3, [r7, #15]
    break;
 8008598:	e002      	b.n	80085a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800859a:	2301      	movs	r3, #1
 800859c:	73fb      	strb	r3, [r7, #15]
    break;
 800859e:	bf00      	nop
  }
  return  speed;
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3710      	adds	r7, #16
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7f9 fd04 	bl	8001fce <HAL_HCD_ResetPort>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f8ff 	bl	80087d0 <USBH_Get_USB_Status>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f9 fd0b 	bl	8002012 <HAL_HCD_HC_GetXferCount>
 80085fc:	4603      	mov	r3, r0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008606:	b590      	push	{r4, r7, lr}
 8008608:	b089      	sub	sp, #36	; 0x24
 800860a:	af04      	add	r7, sp, #16
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	4608      	mov	r0, r1
 8008610:	4611      	mov	r1, r2
 8008612:	461a      	mov	r2, r3
 8008614:	4603      	mov	r3, r0
 8008616:	70fb      	strb	r3, [r7, #3]
 8008618:	460b      	mov	r3, r1
 800861a:	70bb      	strb	r3, [r7, #2]
 800861c:	4613      	mov	r3, r2
 800861e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800862e:	787c      	ldrb	r4, [r7, #1]
 8008630:	78ba      	ldrb	r2, [r7, #2]
 8008632:	78f9      	ldrb	r1, [r7, #3]
 8008634:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	4623      	mov	r3, r4
 8008646:	f7f9 f96f 	bl	8001928 <HAL_HCD_HC_Init>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f8bd 	bl	80087d0 <USBH_Get_USB_Status>
 8008656:	4603      	mov	r3, r0
 8008658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865a:	7bbb      	ldrb	r3, [r7, #14]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	bd90      	pop	{r4, r7, pc}

08008664 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	460b      	mov	r3, r1
 800866e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7f9 f9df 	bl	8001a46 <HAL_HCD_HC_Halt>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f89e 	bl	80087d0 <USBH_Get_USB_Status>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086a2:	b590      	push	{r4, r7, lr}
 80086a4:	b089      	sub	sp, #36	; 0x24
 80086a6:	af04      	add	r7, sp, #16
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	4608      	mov	r0, r1
 80086ac:	4611      	mov	r1, r2
 80086ae:	461a      	mov	r2, r3
 80086b0:	4603      	mov	r3, r0
 80086b2:	70fb      	strb	r3, [r7, #3]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70bb      	strb	r3, [r7, #2]
 80086b8:	4613      	mov	r3, r2
 80086ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086ca:	787c      	ldrb	r4, [r7, #1]
 80086cc:	78ba      	ldrb	r2, [r7, #2]
 80086ce:	78f9      	ldrb	r1, [r7, #3]
 80086d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	9301      	str	r3, [sp, #4]
 80086de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086e2:	9300      	str	r3, [sp, #0]
 80086e4:	4623      	mov	r3, r4
 80086e6:	f7f9 f9d1 	bl	8001a8c <HAL_HCD_HC_SubmitRequest>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f86d 	bl	80087d0 <USBH_Get_USB_Status>
 80086f6:	4603      	mov	r3, r0
 80086f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	bd90      	pop	{r4, r7, pc}

08008704 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7f9 fc65 	bl	8001fea <HAL_HCD_HC_GetURBState>
 8008720:	4603      	mov	r3, r0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3708      	adds	r7, #8
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	460b      	mov	r3, r1
 8008734:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800873c:	2b01      	cmp	r3, #1
 800873e:	d103      	bne.n	8008748 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	4618      	mov	r0, r3
 8008744:	f000 f870 	bl	8008828 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008748:	20c8      	movs	r0, #200	; 0xc8
 800874a:	f7f8 fc01 	bl	8000f50 <HAL_Delay>
  return USBH_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
 8008764:	4613      	mov	r3, r2
 8008766:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800876e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	212c      	movs	r1, #44	; 0x2c
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	4413      	add	r3, r2
 800877c:	333b      	adds	r3, #59	; 0x3b
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	212c      	movs	r1, #44	; 0x2c
 800878a:	fb01 f303 	mul.w	r3, r1, r3
 800878e:	4413      	add	r3, r2
 8008790:	3354      	adds	r3, #84	; 0x54
 8008792:	78ba      	ldrb	r2, [r7, #2]
 8008794:	701a      	strb	r2, [r3, #0]
 8008796:	e008      	b.n	80087aa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	212c      	movs	r1, #44	; 0x2c
 800879e:	fb01 f303 	mul.w	r3, r1, r3
 80087a2:	4413      	add	r3, r2
 80087a4:	3355      	adds	r3, #85	; 0x55
 80087a6:	78ba      	ldrb	r2, [r7, #2]
 80087a8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7f8 fbc5 	bl	8000f50 <HAL_Delay>
}
 80087c6:	bf00      	nop
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
	...

080087d0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d817      	bhi.n	8008814 <USBH_Get_USB_Status+0x44>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <USBH_Get_USB_Status+0x1c>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008803 	.word	0x08008803
 80087f4:	08008809 	.word	0x08008809
 80087f8:	0800880f 	.word	0x0800880f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008800:	e00b      	b.n	800881a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008802:	2302      	movs	r3, #2
 8008804:	73fb      	strb	r3, [r7, #15]
    break;
 8008806:	e008      	b.n	800881a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008808:	2301      	movs	r3, #1
 800880a:	73fb      	strb	r3, [r7, #15]
    break;
 800880c:	e005      	b.n	800881a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800880e:	2302      	movs	r3, #2
 8008810:	73fb      	strb	r3, [r7, #15]
    break;
 8008812:	e002      	b.n	800881a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008814:	2302      	movs	r3, #2
 8008816:	73fb      	strb	r3, [r7, #15]
    break;
 8008818:	bf00      	nop
  }
  return usb_status;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
 8008840:	e001      	b.n	8008846 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008842:	2301      	movs	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	461a      	mov	r2, r3
 800884a:	2101      	movs	r1, #1
 800884c:	4803      	ldr	r0, [pc, #12]	; (800885c <MX_DriverVbusFS+0x34>)
 800884e:	f7f8 ffa3 	bl	8001798 <HAL_GPIO_WritePin>
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	40020800 	.word	0x40020800

08008860 <__errno>:
 8008860:	4b01      	ldr	r3, [pc, #4]	; (8008868 <__errno+0x8>)
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	2000002c 	.word	0x2000002c

0800886c <__libc_init_array>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4d0d      	ldr	r5, [pc, #52]	; (80088a4 <__libc_init_array+0x38>)
 8008870:	4c0d      	ldr	r4, [pc, #52]	; (80088a8 <__libc_init_array+0x3c>)
 8008872:	1b64      	subs	r4, r4, r5
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	2600      	movs	r6, #0
 8008878:	42a6      	cmp	r6, r4
 800887a:	d109      	bne.n	8008890 <__libc_init_array+0x24>
 800887c:	4d0b      	ldr	r5, [pc, #44]	; (80088ac <__libc_init_array+0x40>)
 800887e:	4c0c      	ldr	r4, [pc, #48]	; (80088b0 <__libc_init_array+0x44>)
 8008880:	f000 f92e 	bl	8008ae0 <_init>
 8008884:	1b64      	subs	r4, r4, r5
 8008886:	10a4      	asrs	r4, r4, #2
 8008888:	2600      	movs	r6, #0
 800888a:	42a6      	cmp	r6, r4
 800888c:	d105      	bne.n	800889a <__libc_init_array+0x2e>
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f855 3b04 	ldr.w	r3, [r5], #4
 8008894:	4798      	blx	r3
 8008896:	3601      	adds	r6, #1
 8008898:	e7ee      	b.n	8008878 <__libc_init_array+0xc>
 800889a:	f855 3b04 	ldr.w	r3, [r5], #4
 800889e:	4798      	blx	r3
 80088a0:	3601      	adds	r6, #1
 80088a2:	e7f2      	b.n	800888a <__libc_init_array+0x1e>
 80088a4:	08008cf0 	.word	0x08008cf0
 80088a8:	08008cf0 	.word	0x08008cf0
 80088ac:	08008cf0 	.word	0x08008cf0
 80088b0:	08008cf4 	.word	0x08008cf4

080088b4 <malloc>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <malloc+0xc>)
 80088b6:	4601      	mov	r1, r0
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f000 b87f 	b.w	80089bc <_malloc_r>
 80088be:	bf00      	nop
 80088c0:	2000002c 	.word	0x2000002c

080088c4 <free>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	; (80088d0 <free+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f000 b80b 	b.w	80088e4 <_free_r>
 80088ce:	bf00      	nop
 80088d0:	2000002c 	.word	0x2000002c

080088d4 <memset>:
 80088d4:	4402      	add	r2, r0
 80088d6:	4603      	mov	r3, r0
 80088d8:	4293      	cmp	r3, r2
 80088da:	d100      	bne.n	80088de <memset+0xa>
 80088dc:	4770      	bx	lr
 80088de:	f803 1b01 	strb.w	r1, [r3], #1
 80088e2:	e7f9      	b.n	80088d8 <memset+0x4>

080088e4 <_free_r>:
 80088e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088e6:	2900      	cmp	r1, #0
 80088e8:	d044      	beq.n	8008974 <_free_r+0x90>
 80088ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ee:	9001      	str	r0, [sp, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f1a1 0404 	sub.w	r4, r1, #4
 80088f6:	bfb8      	it	lt
 80088f8:	18e4      	addlt	r4, r4, r3
 80088fa:	f000 f8e3 	bl	8008ac4 <__malloc_lock>
 80088fe:	4a1e      	ldr	r2, [pc, #120]	; (8008978 <_free_r+0x94>)
 8008900:	9801      	ldr	r0, [sp, #4]
 8008902:	6813      	ldr	r3, [r2, #0]
 8008904:	b933      	cbnz	r3, 8008914 <_free_r+0x30>
 8008906:	6063      	str	r3, [r4, #4]
 8008908:	6014      	str	r4, [r2, #0]
 800890a:	b003      	add	sp, #12
 800890c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008910:	f000 b8de 	b.w	8008ad0 <__malloc_unlock>
 8008914:	42a3      	cmp	r3, r4
 8008916:	d908      	bls.n	800892a <_free_r+0x46>
 8008918:	6825      	ldr	r5, [r4, #0]
 800891a:	1961      	adds	r1, r4, r5
 800891c:	428b      	cmp	r3, r1
 800891e:	bf01      	itttt	eq
 8008920:	6819      	ldreq	r1, [r3, #0]
 8008922:	685b      	ldreq	r3, [r3, #4]
 8008924:	1949      	addeq	r1, r1, r5
 8008926:	6021      	streq	r1, [r4, #0]
 8008928:	e7ed      	b.n	8008906 <_free_r+0x22>
 800892a:	461a      	mov	r2, r3
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	b10b      	cbz	r3, 8008934 <_free_r+0x50>
 8008930:	42a3      	cmp	r3, r4
 8008932:	d9fa      	bls.n	800892a <_free_r+0x46>
 8008934:	6811      	ldr	r1, [r2, #0]
 8008936:	1855      	adds	r5, r2, r1
 8008938:	42a5      	cmp	r5, r4
 800893a:	d10b      	bne.n	8008954 <_free_r+0x70>
 800893c:	6824      	ldr	r4, [r4, #0]
 800893e:	4421      	add	r1, r4
 8008940:	1854      	adds	r4, r2, r1
 8008942:	42a3      	cmp	r3, r4
 8008944:	6011      	str	r1, [r2, #0]
 8008946:	d1e0      	bne.n	800890a <_free_r+0x26>
 8008948:	681c      	ldr	r4, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	6053      	str	r3, [r2, #4]
 800894e:	4421      	add	r1, r4
 8008950:	6011      	str	r1, [r2, #0]
 8008952:	e7da      	b.n	800890a <_free_r+0x26>
 8008954:	d902      	bls.n	800895c <_free_r+0x78>
 8008956:	230c      	movs	r3, #12
 8008958:	6003      	str	r3, [r0, #0]
 800895a:	e7d6      	b.n	800890a <_free_r+0x26>
 800895c:	6825      	ldr	r5, [r4, #0]
 800895e:	1961      	adds	r1, r4, r5
 8008960:	428b      	cmp	r3, r1
 8008962:	bf04      	itt	eq
 8008964:	6819      	ldreq	r1, [r3, #0]
 8008966:	685b      	ldreq	r3, [r3, #4]
 8008968:	6063      	str	r3, [r4, #4]
 800896a:	bf04      	itt	eq
 800896c:	1949      	addeq	r1, r1, r5
 800896e:	6021      	streq	r1, [r4, #0]
 8008970:	6054      	str	r4, [r2, #4]
 8008972:	e7ca      	b.n	800890a <_free_r+0x26>
 8008974:	b003      	add	sp, #12
 8008976:	bd30      	pop	{r4, r5, pc}
 8008978:	200008d0 	.word	0x200008d0

0800897c <sbrk_aligned>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	4e0e      	ldr	r6, [pc, #56]	; (80089b8 <sbrk_aligned+0x3c>)
 8008980:	460c      	mov	r4, r1
 8008982:	6831      	ldr	r1, [r6, #0]
 8008984:	4605      	mov	r5, r0
 8008986:	b911      	cbnz	r1, 800898e <sbrk_aligned+0x12>
 8008988:	f000 f88c 	bl	8008aa4 <_sbrk_r>
 800898c:	6030      	str	r0, [r6, #0]
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f000 f887 	bl	8008aa4 <_sbrk_r>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d00a      	beq.n	80089b0 <sbrk_aligned+0x34>
 800899a:	1cc4      	adds	r4, r0, #3
 800899c:	f024 0403 	bic.w	r4, r4, #3
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d007      	beq.n	80089b4 <sbrk_aligned+0x38>
 80089a4:	1a21      	subs	r1, r4, r0
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f87c 	bl	8008aa4 <_sbrk_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d101      	bne.n	80089b4 <sbrk_aligned+0x38>
 80089b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80089b4:	4620      	mov	r0, r4
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	200008d4 	.word	0x200008d4

080089bc <_malloc_r>:
 80089bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c0:	1ccd      	adds	r5, r1, #3
 80089c2:	f025 0503 	bic.w	r5, r5, #3
 80089c6:	3508      	adds	r5, #8
 80089c8:	2d0c      	cmp	r5, #12
 80089ca:	bf38      	it	cc
 80089cc:	250c      	movcc	r5, #12
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	4607      	mov	r7, r0
 80089d2:	db01      	blt.n	80089d8 <_malloc_r+0x1c>
 80089d4:	42a9      	cmp	r1, r5
 80089d6:	d905      	bls.n	80089e4 <_malloc_r+0x28>
 80089d8:	230c      	movs	r3, #12
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	2600      	movs	r6, #0
 80089de:	4630      	mov	r0, r6
 80089e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e4:	4e2e      	ldr	r6, [pc, #184]	; (8008aa0 <_malloc_r+0xe4>)
 80089e6:	f000 f86d 	bl	8008ac4 <__malloc_lock>
 80089ea:	6833      	ldr	r3, [r6, #0]
 80089ec:	461c      	mov	r4, r3
 80089ee:	bb34      	cbnz	r4, 8008a3e <_malloc_r+0x82>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4638      	mov	r0, r7
 80089f4:	f7ff ffc2 	bl	800897c <sbrk_aligned>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	4604      	mov	r4, r0
 80089fc:	d14d      	bne.n	8008a9a <_malloc_r+0xde>
 80089fe:	6834      	ldr	r4, [r6, #0]
 8008a00:	4626      	mov	r6, r4
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	d140      	bne.n	8008a88 <_malloc_r+0xcc>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4638      	mov	r0, r7
 8008a0c:	eb04 0803 	add.w	r8, r4, r3
 8008a10:	f000 f848 	bl	8008aa4 <_sbrk_r>
 8008a14:	4580      	cmp	r8, r0
 8008a16:	d13a      	bne.n	8008a8e <_malloc_r+0xd2>
 8008a18:	6821      	ldr	r1, [r4, #0]
 8008a1a:	3503      	adds	r5, #3
 8008a1c:	1a6d      	subs	r5, r5, r1
 8008a1e:	f025 0503 	bic.w	r5, r5, #3
 8008a22:	3508      	adds	r5, #8
 8008a24:	2d0c      	cmp	r5, #12
 8008a26:	bf38      	it	cc
 8008a28:	250c      	movcc	r5, #12
 8008a2a:	4629      	mov	r1, r5
 8008a2c:	4638      	mov	r0, r7
 8008a2e:	f7ff ffa5 	bl	800897c <sbrk_aligned>
 8008a32:	3001      	adds	r0, #1
 8008a34:	d02b      	beq.n	8008a8e <_malloc_r+0xd2>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	442b      	add	r3, r5
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	e00e      	b.n	8008a5c <_malloc_r+0xa0>
 8008a3e:	6822      	ldr	r2, [r4, #0]
 8008a40:	1b52      	subs	r2, r2, r5
 8008a42:	d41e      	bmi.n	8008a82 <_malloc_r+0xc6>
 8008a44:	2a0b      	cmp	r2, #11
 8008a46:	d916      	bls.n	8008a76 <_malloc_r+0xba>
 8008a48:	1961      	adds	r1, r4, r5
 8008a4a:	42a3      	cmp	r3, r4
 8008a4c:	6025      	str	r5, [r4, #0]
 8008a4e:	bf18      	it	ne
 8008a50:	6059      	strne	r1, [r3, #4]
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	bf08      	it	eq
 8008a56:	6031      	streq	r1, [r6, #0]
 8008a58:	5162      	str	r2, [r4, r5]
 8008a5a:	604b      	str	r3, [r1, #4]
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	f104 060b 	add.w	r6, r4, #11
 8008a62:	f000 f835 	bl	8008ad0 <__malloc_unlock>
 8008a66:	f026 0607 	bic.w	r6, r6, #7
 8008a6a:	1d23      	adds	r3, r4, #4
 8008a6c:	1af2      	subs	r2, r6, r3
 8008a6e:	d0b6      	beq.n	80089de <_malloc_r+0x22>
 8008a70:	1b9b      	subs	r3, r3, r6
 8008a72:	50a3      	str	r3, [r4, r2]
 8008a74:	e7b3      	b.n	80089de <_malloc_r+0x22>
 8008a76:	6862      	ldr	r2, [r4, #4]
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	bf0c      	ite	eq
 8008a7c:	6032      	streq	r2, [r6, #0]
 8008a7e:	605a      	strne	r2, [r3, #4]
 8008a80:	e7ec      	b.n	8008a5c <_malloc_r+0xa0>
 8008a82:	4623      	mov	r3, r4
 8008a84:	6864      	ldr	r4, [r4, #4]
 8008a86:	e7b2      	b.n	80089ee <_malloc_r+0x32>
 8008a88:	4634      	mov	r4, r6
 8008a8a:	6876      	ldr	r6, [r6, #4]
 8008a8c:	e7b9      	b.n	8008a02 <_malloc_r+0x46>
 8008a8e:	230c      	movs	r3, #12
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	4638      	mov	r0, r7
 8008a94:	f000 f81c 	bl	8008ad0 <__malloc_unlock>
 8008a98:	e7a1      	b.n	80089de <_malloc_r+0x22>
 8008a9a:	6025      	str	r5, [r4, #0]
 8008a9c:	e7de      	b.n	8008a5c <_malloc_r+0xa0>
 8008a9e:	bf00      	nop
 8008aa0:	200008d0 	.word	0x200008d0

08008aa4 <_sbrk_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4d06      	ldr	r5, [pc, #24]	; (8008ac0 <_sbrk_r+0x1c>)
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f8 f96a 	bl	8000d88 <_sbrk>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_sbrk_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_sbrk_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	200008d8 	.word	0x200008d8

08008ac4 <__malloc_lock>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <__malloc_lock+0x8>)
 8008ac6:	f000 b809 	b.w	8008adc <__retarget_lock_acquire_recursive>
 8008aca:	bf00      	nop
 8008acc:	200008dc 	.word	0x200008dc

08008ad0 <__malloc_unlock>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__malloc_unlock+0x8>)
 8008ad2:	f000 b804 	b.w	8008ade <__retarget_lock_release_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	200008dc 	.word	0x200008dc

08008adc <__retarget_lock_acquire_recursive>:
 8008adc:	4770      	bx	lr

08008ade <__retarget_lock_release_recursive>:
 8008ade:	4770      	bx	lr

08008ae0 <_init>:
 8008ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae2:	bf00      	nop
 8008ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ae6:	bc08      	pop	{r3}
 8008ae8:	469e      	mov	lr, r3
 8008aea:	4770      	bx	lr

08008aec <_fini>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr
